From 95167a12628e044acf0c1afc65cb3976167aa597 Mon Sep 17 00:00:00 2001
From: Phuc Nguyen <phuc.nguyen@c0x12c.com>
Date: Tue, 10 Jun 2025 15:53:27 +0700
Subject: [PATCH] init

---
 app/api-application/build.gradle              |    25 +
 .../service/spoonacular/api/DefaultService.kt |    78 +
 .../spoonacular/api/IngredientsService.kt     |   282 +
 .../spoonacular/api/MealPlanningService.kt    |   272 +
 .../spoonacular/api/MenuItemsService.kt       |   146 +
 .../service/spoonacular/api/MiscService.kt    |   214 +
 .../spoonacular/api/ProductsService.kt        |   233 +
 .../service/spoonacular/api/RecipesService.kt |  1232 +
 .../service/spoonacular/api/WineService.kt    |    81 +
 .../service/spoonacular/auth/ApiKeyAuth.kt    |    52 +
 .../spoonacular/infrastructure/ApiClient.kt   |   127 +
 .../infrastructure/CollectionFormats.kt       |    56 +
 .../spoonacular/infrastructure/ResponseExt.kt |     1 +
 .../spoonacular/infrastructure/Serializer.kt  |     9 +
 .../model/AddMealPlanTemplate200Response.kt   |    40 +
 ...ddMealPlanTemplate200ResponseItemsInner.kt |    48 +
 ...lPlanTemplate200ResponseItemsInnerValue.kt |    44 +
 .../spoonacular/model/AddToMealPlanRequest.kt |    48 +
 .../model/AddToMealPlanRequestValue.kt        |    32 +
 ...dToMealPlanRequestValueIngredientsInner.kt |    32 +
 .../model/AddToShoppingListRequest.kt         |    40 +
 .../AnalyzeARecipeSearchQuery200Response.kt   |    44 +
 ...RecipeSearchQuery200ResponseDishesInner.kt |    36 +
 ...eSearchQuery200ResponseIngredientsInner.kt |    40 +
 .../AnalyzeRecipeInstructions200Response.kt   |    40 +
 ...Instructions200ResponseIngredientsInner.kt |    36 +
 ...tions200ResponseParsedInstructionsInner.kt |    36 +
 ...sponseParsedInstructionsInnerStepsInner.kt |    44 +
 ...ructionsInnerStepsInnerIngredientsInner.kt |    44 +
 .../spoonacular/model/AnalyzeRecipeRequest.kt |    44 +
 ...ompleteIngredientSearch200ResponseInner.kt |    48 +
 .../AutocompleteProductSearch200Response.kt   |    32 +
 ...eteProductSearch200ResponseResultsInner.kt |    36 +
 ...utocompleteRecipeSearch200ResponseInner.kt |    40 +
 .../model/ClassifyCuisine200Response.kt       |    40 +
 .../ClassifyGroceryProduct200Response.kt      |    48 +
 ...ssifyGroceryProductBulk200ResponseInner.kt |    48 +
 .../ClassifyGroceryProductBulkRequestInner.kt |    40 +
 .../model/ClassifyGroceryProductRequest.kt    |    40 +
 .../spoonacular/model/ComparableProduct.kt    |    44 +
 .../model/ComputeGlycemicLoad200Response.kt   |    36 +
 ...GlycemicLoad200ResponseIngredientsInner.kt |    44 +
 .../model/ComputeGlycemicLoadRequest.kt       |    32 +
 .../ComputeIngredientAmount200Response.kt     |    36 +
 .../model/ConnectUser200Response.kt           |    36 +
 .../spoonacular/model/ConnectUserRequest.kt   |    44 +
 .../model/ConvertAmounts200Response.kt        |    48 +
 .../model/CreateRecipeCard200Response.kt      |    32 +
 .../model/DetectFoodInText200Response.kt      |    32 +
 ...ctFoodInText200ResponseAnnotationsInner.kt |    40 +
 .../model/GenerateMealPlan200Response.kt      |    36 +
 .../GenerateMealPlan200ResponseNutrients.kt   |    44 +
 .../model/GetARandomFoodJoke200Response.kt    |    32 +
 ...lyzedRecipeInstructions200ResponseInner.kt |    36 +
 ...eInstructions200ResponseInnerStepsInner.kt |    44 +
 ...ResponseInnerStepsInnerIngredientsInner.kt |    44 +
 .../model/GetComparableProducts200Response.kt |    32 +
 ...leProducts200ResponseComparableProducts.kt |    52 +
 .../GetConversationSuggests200Response.kt     |    36 +
 ...ConversationSuggests200ResponseSuggests.kt |    32 +
 ...rsationSuggests200ResponseSuggestsInner.kt |    32 +
 .../model/GetDishPairingForWine200Response.kt |    36 +
 .../GetIngredientSubstitutes200Response.kt    |    40 +
 .../model/GetMealPlanTemplate200Response.kt   |    40 +
 ...GetMealPlanTemplate200ResponseDaysInner.kt |    52 +
 ...nTemplate200ResponseDaysInnerItemsInner.kt |    48 +
 ...late200ResponseDaysInnerItemsInnerValue.kt |    40 +
 .../model/GetMealPlanTemplates200Response.kt  |    32 +
 ...lPlanTemplates200ResponseTemplatesInner.kt |    36 +
 .../model/GetMealPlanWeek200Response.kt       |    32 +
 .../GetMealPlanWeek200ResponseDaysInner.kt    |    56 +
 ...lPlanWeek200ResponseDaysInnerItemsInner.kt |    48 +
 ...Week200ResponseDaysInnerItemsInnerValue.kt |    44 +
 ...eek200ResponseDaysInnerNutritionSummary.kt |    32 +
 ...DaysInnerNutritionSummaryNutrientsInner.kt |    44 +
 .../model/GetRandomRecipes200Response.kt      |    32 +
 .../GetRecipeEquipmentByID200Response.kt      |    32 +
 ...eEquipmentByID200ResponseEquipmentInner.kt |    36 +
 .../GetRecipeIngredientsByID200Response.kt    |    32 +
 ...redientsByID200ResponseIngredientsInner.kt |    40 +
 ...GetRecipeNutritionWidgetByID200Response.kt |    52 +
 ...eNutritionWidgetByID200ResponseBadInner.kt |    44 +
 ...NutritionWidgetByID200ResponseGoodInner.kt |    44 +
 .../GetRecipePriceBreakdownByID200Response.kt |    40 +
 ...reakdownByID200ResponseIngredientsInner.kt |    44 +
 ...wnByID200ResponseIngredientsInnerAmount.kt |    36 +
 ...200ResponseIngredientsInnerAmountMetric.kt |    36 +
 .../model/GetShoppingList200Response.kt       |    44 +
 .../GetShoppingList200ResponseAislesInner.kt  |    36 +
 ...ingList200ResponseAislesInnerItemsInner.kt |    56 +
 ...00ResponseAislesInnerItemsInnerMeasures.kt |    40 +
 ...seAislesInnerItemsInnerMeasuresOriginal.kt |    36 +
 .../GetSimilarRecipes200ResponseInner.kt      |    52 +
 .../model/GetWineDescription200Response.kt    |    32 +
 .../model/GetWinePairing200Response.kt        |    40 +
 ...nePairing200ResponseProductMatchesInner.kt |    64 +
 .../model/GetWineRecommendation200Response.kt |    36 +
 ...ndation200ResponseRecommendedWinesInner.kt |    64 +
 .../GuessNutritionByDishName200Response.kt    |    48 +
 ...sNutritionByDishName200ResponseCalories.kt |    44 +
 ...esponseCaloriesConfidenceRange95Percent.kt |    36 +
 .../model/ImageAnalysisByURL200Response.kt    |    40 +
 .../ImageAnalysisByURL200ResponseCategory.kt  |    36 +
 .../ImageAnalysisByURL200ResponseNutrition.kt |    48 +
 ...alysisByURL200ResponseNutritionCalories.kt |    44 +
 ...tritionCaloriesConfidenceRange95Percent.kt |    36 +
 ...ageAnalysisByURL200ResponseRecipesInner.kt |    44 +
 .../ImageClassificationByURL200Response.kt    |    36 +
 .../spoonacular/model/IngredientBasics.kt     |    40 +
 .../model/IngredientInformation.kt            |    96 +
 .../IngredientInformationEstimatedCost.kt     |    36 +
 .../model/IngredientInformationNutrition.kt   |    44 +
 ...ientInformationNutritionPropertiesInner.kt |    40 +
 .../model/IngredientSearch200Response.kt      |    44 +
 ...IngredientSearch200ResponseResultsInner.kt |    40 +
 ...dientsToGroceryProducts200ResponseInner.kt |    48 +
 ...ryProducts200ResponseInnerProductsInner.kt |    40 +
 .../MapIngredientsToGroceryProductsRequest.kt |    36 +
 .../service/spoonacular/model/MenuItem.kt     |    76 +
 .../spoonacular/model/MenuItemServings.kt     |    40 +
 .../spoonacular/model/ProductInformation.kt   |   104 +
 .../model/ProductInformationCredits.kt        |    44 +
 .../model/QuickAnswer200Response.kt           |    36 +
 .../spoonacular/model/RecipeInformation.kt    |   180 +
 ...cipeInformationExtendedIngredientsInner.kt |    72 +
 ...rmationExtendedIngredientsInnerMeasures.kt |    36 +
 ...nExtendedIngredientsInnerMeasuresMetric.kt |    40 +
 .../model/RecipeInformationWinePairing.kt     |    40 +
 ...formationWinePairingProductMatchesInner.kt |    64 +
 .../model/SearchAllFood200Response.kt         |    48 +
 ...rchAllFood200ResponseSearchResultsInner.kt |    40 +
 .../model/SearchCustomFoods200Response.kt     |    44 +
 ...hCustomFoods200ResponseCustomFoodsInner.kt |    48 +
 .../model/SearchFoodVideos200Response.kt      |    36 +
 .../SearchFoodVideos200ResponseVideosInner.kt |    56 +
 .../model/SearchGroceryProducts200Response.kt |    48 +
 .../SearchGroceryProductsByUPC200Response.kt  |    88 +
 ...roceryProductsByUPC200ResponseNutrition.kt |    36 +
 ...UPC200ResponseNutritionCaloricBreakdown.kt |    40 +
 ...ByUPC200ResponseNutritionNutrientsInner.kt |    44 +
 ...GroceryProductsByUPC200ResponseServings.kt |    40 +
 .../model/SearchMenuItems200Response.kt       |    48 +
 .../model/SearchRecipes200Response.kt         |    44 +
 .../SearchRecipes200ResponseResultsInner.kt   |    44 +
 ...rchRecipesByIngredients200ResponseInner.kt |    68 +
 ...s200ResponseInnerMissedIngredientsInner.kt |    76 +
 ...earchRecipesByNutrients200ResponseInner.kt |    60 +
 .../model/SearchRestaurants200Response.kt     |    32 +
 ...hRestaurants200ResponseRestaurantsInner.kt |   108 +
 ...rants200ResponseRestaurantsInnerAddress.kt |    68 +
 ...ts200ResponseRestaurantsInnerLocalHours.kt |    44 +
 ...seRestaurantsInnerLocalHoursOperational.kt |    56 +
 .../service/spoonacular/model/SearchResult.kt |    60 +
 .../model/SearchSiteContent200Response.kt     |    44 +
 .../model/SummarizeRecipe200Response.kt       |    40 +
 .../model/TalkToChatbot200Response.kt         |    36 +
 .../TalkToChatbot200ResponseMediaInner.kt     |    40 +
 .../spoonacular/model/TasteInformation.kt     |    56 +
 .../main/resources/spoonacular-openapi-3.json | 19151 ++++++++++++++++
 .../templates/kotlin-retrofit2/api.mustache   |   143 +
 .../infrastructure/ApiClient.kt.mustache      |   384 +
 .../kotlin/com/dietfit/retrofit/EitherCall.kt |    36 +-
 gradle/libs.versions.toml                     |     2 +
 163 files changed, 29023 insertions(+), 13 deletions(-)
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/DefaultService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/IngredientsService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MealPlanningService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MenuItemsService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MiscService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/ProductsService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/RecipesService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/WineService.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/auth/ApiKeyAuth.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ApiClient.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/CollectionFormats.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ResponseExt.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/Serializer.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInnerValue.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValue.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValueIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToShoppingListRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseDishesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteIngredientSearch200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200ResponseResultsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteRecipeSearch200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyCuisine200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProduct200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulk200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulkRequestInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComparableProduct.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200ResponseIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoadRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeIngredientAmount200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUser200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUserRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConvertAmounts200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/CreateRecipeCard200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200ResponseAnnotationsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200ResponseNutrients.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetARandomFoodJoke200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200ResponseComparableProducts.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggests.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggestsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetDishPairingForWine200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetIngredientSubstitutes200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200ResponseTemplatesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInnerValue.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummary.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRandomRecipes200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200ResponseEquipmentInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200ResponseIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseBadInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseGoodInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasures.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetSimilarRecipes200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineDescription200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200ResponseProductMatchesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200ResponseRecommendedWinesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCalories.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseCategory.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutrition.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCalories.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseRecipesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageClassificationByURL200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientBasics.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformation.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationEstimatedCost.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutrition.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutritionPropertiesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200ResponseResultsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInnerProductsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProductsRequest.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItem.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItemServings.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformation.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformationCredits.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/QuickAnswer200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformation.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasures.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasuresMetric.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairing.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairingProductMatchesInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200ResponseSearchResultsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200ResponseCustomFoodsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200ResponseVideosInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProducts200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutrition.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseServings.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchMenuItems200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200ResponseResultsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByNutrients200ResponseInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerAddress.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHours.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchResult.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchSiteContent200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SummarizeRecipe200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200Response.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200ResponseMediaInner.kt
 create mode 100644 app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TasteInformation.kt
 create mode 100644 app/api-application/src/main/resources/spoonacular-openapi-3.json
 create mode 100644 app/api-application/src/main/resources/templates/kotlin-retrofit2/api.mustache
 create mode 100644 app/api-application/src/main/resources/templates/kotlin-retrofit2/infrastructure/ApiClient.kt.mustache

diff --git a/app/api-application/build.gradle b/app/api-application/build.gradle
index 3cd06be..653a73e 100644
--- a/app/api-application/build.gradle
+++ b/app/api-application/build.gradle
@@ -1,4 +1,5 @@
 import org.gradle.api.tasks.testing.logging.TestExceptionFormat
+import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
 
 plugins {
   id("application")
@@ -6,6 +7,7 @@ plugins {
   alias(libs.plugins.ksp)
   alias(libs.plugins.shadow)
   alias(libs.plugins.allopen)
+  alias(libs.plugins.openapiGenerator)
 }
 
 group "com.dietfit.app"
@@ -175,3 +177,26 @@ test {
     exceptionFormat = TestExceptionFormat.FULL
   }
 }
+
+tasks.register("buildSpoonacularClient", GenerateTask) {
+  generatorName.set("kotlin")
+  inputSpec.set("$projectDir/src/main/resources/spoonacular-openapi-3.json")
+  outputDir.set("$projectDir/build/")
+  templateDir.set("$projectDir/src/main/resources/templates/kotlin-retrofit2")
+  apiPackage.set("com.dietfit.service.spoonacular.api")
+  modelPackage.set("com.dietfit.service.spoonacular.model")
+  configOptions.set([
+    "library"                       : "jvm-retrofit2",
+    "groupId"                       : "com.dietfit",
+    "artifactVersion"               : "1.0.0",
+    "packageName"                   : "com.dietfit.service.spoonacular",
+    "artifactId"                    : "spoonacular-api",
+    "serializationLibrary"          : "jackson",
+    "enumPropertyNaming"            : "UPPERCASE",
+    "apiSuffix"                     : "Service",
+    "omitGradleWrapper"             : "true",
+    "omitGradlePluginVersions"      : "true",
+    "additionalModelTypeAnnotations": "@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)",
+    "useCoroutines": "true",
+  ])
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/DefaultService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/DefaultService.kt
new file mode 100644
index 0000000..9d47fef
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/DefaultService.kt
@@ -0,0 +1,78 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import com.dietfit.service.spoonacular.model.AnalyzeRecipeRequest
+import com.dietfit.service.spoonacular.model.SearchRestaurants200Response
+
+interface DefaultService {
+  /**
+   * POST recipes/analyze
+   * Analyze Recipe
+   * This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param analyzeRecipeRequest Example request body.
+   * @param language The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)
+   * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
+   * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional)
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @POST("recipes/analyze")
+  suspend fun analyzeRecipe(@Body analyzeRecipeRequest: AnalyzeRecipeRequest, @Query("language") language: kotlin.String? = null, @Query("includeNutrition") includeNutrition: kotlin.Boolean? = null, @Query("includeTaste") includeTaste: kotlin.Boolean? = null): Either<kotlin.Any, ClientException>
+
+  /**
+   * GET recipes/{id}/card
+   * Create Recipe Card
+   * Generate a recipe card for a recipe.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param mask The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)
+   * @param backgroundImage The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)
+   * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
+   * @param fontColor The font color for the recipe card as a hex-string. (optional)
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @GET("recipes/{id}/card")
+  suspend fun createRecipeCardGet(@Path("id") id: kotlin.Int, @Query("mask") mask: kotlin.String? = null, @Query("backgroundImage") backgroundImage: kotlin.String? = null, @Query("backgroundColor") backgroundColor: kotlin.String? = null, @Query("fontColor") fontColor: kotlin.String? = null): Either<kotlin.Any, ClientException>
+
+  /**
+   * GET food/restaurants/search
+   * Search Restaurants
+   * Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The search query. (optional)
+   * @param lat The latitude of the user&#39;s location. (optional)
+   * @param lng The longitude of the user&#39;s location.\&quot;. (optional)
+   * @param distance The distance around the location in miles. (optional)
+   * @param budget The user&#39;s budget for a meal in USD. (optional)
+   * @param cuisine The cuisine of the restaurant. (optional)
+   * @param minRating The minimum rating of the restaurant between 0 and 5. (optional)
+   * @param isOpen Whether the restaurant must be open at the time of search. (optional)
+   * @param sort How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)
+   * @param page The page number of results. (optional)
+   * @return Either<SearchRestaurants200Response, ClientException>
+   */
+  @GET("food/restaurants/search")
+  suspend fun searchRestaurants(@Query("query") query: kotlin.String? = null, @Query("lat") lat: java.math.BigDecimal? = null, @Query("lng") lng: java.math.BigDecimal? = null, @Query("distance") distance: java.math.BigDecimal? = null, @Query("budget") budget: java.math.BigDecimal? = null, @Query("cuisine") cuisine: kotlin.String? = null, @Query("min-rating") minRating: java.math.BigDecimal? = null, @Query("is-open") isOpen: kotlin.Boolean? = null, @Query("sort") sort: kotlin.String? = null, @Query("page") page: java.math.BigDecimal? = null): Either<SearchRestaurants200Response, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/IngredientsService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/IngredientsService.kt
new file mode 100644
index 0000000..ea31b9b
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/IngredientsService.kt
@@ -0,0 +1,282 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.Field
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import okhttp3.ResponseBody
+import com.fasterxml.jackson.annotation.JsonProperty
+
+import com.dietfit.service.spoonacular.model.AutocompleteIngredientSearch200ResponseInner
+import com.dietfit.service.spoonacular.model.ComputeIngredientAmount200Response
+import com.dietfit.service.spoonacular.model.GetIngredientSubstitutes200Response
+import com.dietfit.service.spoonacular.model.IngredientInformation
+import com.dietfit.service.spoonacular.model.IngredientSearch200Response
+import com.dietfit.service.spoonacular.model.MapIngredientsToGroceryProducts200ResponseInner
+import com.dietfit.service.spoonacular.model.MapIngredientsToGroceryProductsRequest
+
+interface IngredientsService {
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageAutocompleteIngredientSearch(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * GET food/ingredients/autocomplete
+   * Autocomplete Ingredient Search
+   * Autocomplete the entry of an ingredient.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @param metaInformation Whether to return more meta information about the ingredients. (optional)
+   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @return Either<kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>, ClientException>
+   */
+  @GET("food/ingredients/autocomplete")
+  suspend fun autocompleteIngredientSearch(@Query("query") query: kotlin.String, @Query("number") number: kotlin.Int? = 10, @Query("metaInformation") metaInformation: kotlin.Boolean? = null, @Query("intolerances") intolerances: kotlin.String? = null, @Query("language") language: LanguageAutocompleteIngredientSearch? = null): Either<kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>, ClientException>
+
+  /**
+   * GET food/ingredients/{id}/amount
+   * Compute Ingredient Amount
+   * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the ingredient you want the amount for.
+   * @param nutrient The target nutrient. See a list of supported nutrients.
+   * @param target The target number of the given nutrient.
+   * @param unit The target unit. (optional)
+   * @return Either<ComputeIngredientAmount200Response, ClientException>
+   */
+  @GET("food/ingredients/{id}/amount")
+  suspend fun computeIngredientAmount(@Path("id") id: kotlin.Int, @Query("nutrient") nutrient: kotlin.String, @Query("target") target: kotlin.Int, @Query("unit") unit: kotlin.String? = null): Either<ComputeIngredientAmount200Response, ClientException>
+
+  /**
+   * GET food/ingredients/{id}/information
+   * Get Ingredient Information
+   * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The ingredient id.
+   * @param amount The amount of this ingredient. (optional)
+   * @param unit The unit for the given amount. (optional)
+   * @return Either<IngredientInformation, ClientException>
+   */
+  @GET("food/ingredients/{id}/information")
+  suspend fun getIngredientInformation(@Path("id") id: kotlin.Int, @Query("amount") amount: java.math.BigDecimal? = null, @Query("unit") unit: kotlin.String? = null): Either<IngredientInformation, ClientException>
+
+  /**
+   * GET food/ingredients/substitutes
+   * Get Ingredient Substitutes
+   * Search for substitutes for a given ingredient.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientName The name of the ingredient you want to replace.
+   * @return Either<GetIngredientSubstitutes200Response, ClientException>
+   */
+  @GET("food/ingredients/substitutes")
+  suspend fun getIngredientSubstitutes(@Query("ingredientName") ingredientName: kotlin.String): Either<GetIngredientSubstitutes200Response, ClientException>
+
+  /**
+   * GET food/ingredients/{id}/substitutes
+   * Get Ingredient Substitutes by ID
+   * Search for substitutes for a given ingredient.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the ingredient you want substitutes for.
+   * @return Either<GetIngredientSubstitutes200Response, ClientException>
+   */
+  @GET("food/ingredients/{id}/substitutes")
+  suspend fun getIngredientSubstitutesByID(@Path("id") id: kotlin.Int): Either<GetIngredientSubstitutes200Response, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageIngredientSearch(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * GET food/ingredients/search
+   * Ingredient Search
+   * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param addChildren Whether to add children of found foods. (optional)
+   * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
+   * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
+   * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
+   * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
+   * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
+   * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
+   * @param metaInformation Whether to return more meta information about the ingredients. (optional)
+   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
+   * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
+   * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @return Either<IngredientSearch200Response, ClientException>
+   */
+  @GET("food/ingredients/search")
+  suspend fun ingredientSearch(
+    @Query("query") query: kotlin.String,
+    @Query("addChildren") addChildren: kotlin.Boolean? = null,
+    @Query("minProteinPercent") minProteinPercent: java.math.BigDecimal? = null,
+    @Query("maxProteinPercent") maxProteinPercent: java.math.BigDecimal? = null,
+    @Query("minFatPercent") minFatPercent: java.math.BigDecimal? = null,
+    @Query("maxFatPercent") maxFatPercent: java.math.BigDecimal? = null,
+    @Query("minCarbsPercent") minCarbsPercent: java.math.BigDecimal? = null,
+    @Query("maxCarbsPercent") maxCarbsPercent: java.math.BigDecimal? = null,
+    @Query("metaInformation") metaInformation: kotlin.Boolean? = null,
+    @Query("intolerances") intolerances: kotlin.String? = null,
+    @Query("sort") sort: kotlin.String? = null,
+    @Query("sortDirection") sortDirection: kotlin.String? = null,
+    @Query("offset") offset: kotlin.Int? = null,
+    @Query("number") number: kotlin.Int? = 10,
+    @Query("language") language: LanguageIngredientSearch? = null
+  ): Either<IngredientSearch200Response, ClientException>
+
+  /**
+   * enum for parameter measure
+   */
+  enum class MeasureIngredientsByIDImage(val value: kotlin.String) {
+    @JsonProperty(value = "us")
+    US("us"),
+
+    @JsonProperty(value = "metric")
+    METRIC("metric")
+  }
+
+  /**
+   * GET recipes/{id}/ingredientWidget.png
+   * Ingredients by ID Image
+   * Visualize a recipe&#39;s ingredient list.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/ingredientWidget.png")
+  suspend fun ingredientsByIDImage(@Path("id") id: kotlin.Int, @Query("measure") measure: MeasureIngredientsByIDImage? = null): Either<ResponseBody, ClientException>
+
+  /**
+   * POST food/ingredients/map
+   * Map Ingredients to Grocery Products
+   * Map a set of ingredients to products you can buy in the grocery store.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param mapIngredientsToGroceryProductsRequest
+   * @return Either<kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>, ClientException>
+   */
+  @POST("food/ingredients/map")
+  suspend fun mapIngredientsToGroceryProducts(@Body mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest): Either<kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageVisualizeIngredients(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * enum for parameter measure
+   */
+  enum class MeasureVisualizeIngredients(val value: kotlin.String) {
+    @JsonProperty(value = "us")
+    US("us"),
+
+    @JsonProperty(value = "metric")
+    METRIC("metric")
+  }
+
+  /**
+   * enum for parameter view
+   */
+  enum class ViewVisualizeIngredients(val value: kotlin.String) {
+    @JsonProperty(value = "grid")
+    GRID("grid"),
+
+    @JsonProperty(value = "list")
+    LIST("list")
+  }
+
+  /**
+   * POST recipes/visualizeIngredients
+   * Ingredients Widget
+   * Visualize ingredients of a recipe. You can play around with that endpoint!
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
+   * @param servings The number of servings.
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @param measure The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)
+   * @param view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)
+   * @param defaultCss Whether the default CSS should be added to the response. (optional)
+   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/visualizeIngredients")
+  suspend fun visualizeIngredients(@Field("ingredientList") ingredientList: kotlin.String, @Field("servings") servings: java.math.BigDecimal, @Query("language") language: LanguageVisualizeIngredients? = null, @Field("measure") measure: kotlin.String? = null, @Field("view") view: kotlin.String? = null, @Field("defaultCss") defaultCss: kotlin.Boolean? = null, @Field("showBacklink") showBacklink: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MealPlanningService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MealPlanningService.kt
new file mode 100644
index 0000000..415fc43
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MealPlanningService.kt
@@ -0,0 +1,272 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.DELETE
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import com.dietfit.service.spoonacular.model.AddMealPlanTemplate200Response
+import com.dietfit.service.spoonacular.model.AddToMealPlanRequest
+import com.dietfit.service.spoonacular.model.AddToShoppingListRequest
+import com.dietfit.service.spoonacular.model.ConnectUser200Response
+import com.dietfit.service.spoonacular.model.ConnectUserRequest
+import com.dietfit.service.spoonacular.model.GenerateMealPlan200Response
+import com.dietfit.service.spoonacular.model.GetMealPlanTemplate200Response
+import com.dietfit.service.spoonacular.model.GetMealPlanTemplates200Response
+import com.dietfit.service.spoonacular.model.GetMealPlanWeek200Response
+import com.dietfit.service.spoonacular.model.GetShoppingList200Response
+
+interface MealPlanningService {
+  /**
+   * POST mealplanner/{username}/templates
+   * Add Meal Plan Template
+   * Add a meal plan template for a user.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @return Either<AddMealPlanTemplate200Response, ClientException>
+   */
+  @POST("mealplanner/{username}/templates")
+  suspend fun addMealPlanTemplate(@Path("username") username: kotlin.String, @Query("hash") hash: kotlin.String): Either<AddMealPlanTemplate200Response, ClientException>
+
+  /**
+   * POST mealplanner/{username}/items
+   * Add to Meal Plan
+   * Add an item to the user&#39;s meal plan.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @param addToMealPlanRequest
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @POST("mealplanner/{username}/items")
+  suspend fun addToMealPlan(@Path("username") username: kotlin.String, @Query("hash") hash: kotlin.String, @Body addToMealPlanRequest: AddToMealPlanRequest): Either<kotlin.Any, ClientException>
+
+  /**
+   * POST mealplanner/{username}/shopping-list/items
+   * Add to Shopping List
+   * Add an item to the current shopping list of a user.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @param addToShoppingListRequest
+   * @return Either<GetShoppingList200Response, ClientException>
+   */
+  @POST("mealplanner/{username}/shopping-list/items")
+  suspend fun addToShoppingList(@Path("username") username: kotlin.String, @Query("hash") hash: kotlin.String, @Body addToShoppingListRequest: AddToShoppingListRequest): Either<GetShoppingList200Response, ClientException>
+
+  /**
+   * DELETE mealplanner/{username}/day/{date}
+   * Clear Meal Plan Day
+   * Delete all planned items from the user&#39;s meal plan for a specific day.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param date The date in the format yyyy-mm-dd.
+   * @param hash The private hash for the username.
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @DELETE("mealplanner/{username}/day/{date}")
+  suspend fun clearMealPlanDay(@Path("username") username: kotlin.String, @Path("date") date: kotlin.String, @Query("hash") hash: kotlin.String): Either<kotlin.Any, ClientException>
+
+  /**
+   * POST users/connect
+   * Connect User
+   * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param connectUserRequest
+   * @return Either<ConnectUser200Response, ClientException>
+   */
+  @POST("users/connect")
+  suspend fun connectUser(@Body connectUserRequest: ConnectUserRequest): Either<ConnectUser200Response, ClientException>
+
+  /**
+   * DELETE mealplanner/{username}/items/{id}
+   * Delete from Meal Plan
+   * Delete an item from the user&#39;s meal plan.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param id The shopping list item id.
+   * @param hash The private hash for the username.
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @DELETE("mealplanner/{username}/items/{id}")
+  suspend fun deleteFromMealPlan(@Path("username") username: kotlin.String, @Path("id") id: kotlin.Int, @Query("hash") hash: kotlin.String): Either<kotlin.Any, ClientException>
+
+  /**
+   * DELETE mealplanner/{username}/shopping-list/items/{id}
+   * Delete from Shopping List
+   * Delete an item from the current shopping list of the user.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param id The shopping list item id.
+   * @param hash The private hash for the username.
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @DELETE("mealplanner/{username}/shopping-list/items/{id}")
+  suspend fun deleteFromShoppingList(@Path("username") username: kotlin.String, @Path("id") id: kotlin.Int, @Query("hash") hash: kotlin.String): Either<kotlin.Any, ClientException>
+
+  /**
+   * DELETE mealplanner/{username}/templates/{id}
+   * Delete Meal Plan Template
+   * Delete a meal plan template for a user.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param id The shopping list item id.
+   * @param hash The private hash for the username.
+   * @return Either<kotlin.Any, ClientException>
+   */
+  @DELETE("mealplanner/{username}/templates/{id}")
+  suspend fun deleteMealPlanTemplate(@Path("username") username: kotlin.String, @Path("id") id: kotlin.Int, @Query("hash") hash: kotlin.String): Either<kotlin.Any, ClientException>
+
+  /**
+   * GET mealplanner/generate
+   * Generate Meal Plan
+   * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
+   * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
+   * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
+   * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
+   * @return Either<GenerateMealPlan200Response, ClientException>
+   */
+  @GET("mealplanner/generate")
+  suspend fun generateMealPlan(@Query("timeFrame") timeFrame: kotlin.String? = null, @Query("targetCalories") targetCalories: java.math.BigDecimal? = null, @Query("diet") diet: kotlin.String? = null, @Query("exclude") exclude: kotlin.String? = null): Either<GenerateMealPlan200Response, ClientException>
+
+  /**
+   * POST mealplanner/{username}/shopping-list/{start_date}/{end_date}
+   * Generate Shopping List
+   * Generate the shopping list for a user from the meal planner in a given time frame.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param startDate The start date in the format yyyy-mm-dd.
+   * @param endDate The end date in the format yyyy-mm-dd.
+   * @param hash The private hash for the username.
+   * @return Either<GetShoppingList200Response, ClientException>
+   */
+  @POST("mealplanner/{username}/shopping-list/{start_date}/{end_date}")
+  suspend fun generateShoppingList(@Path("username") username: kotlin.String, @Path("start_date") startDate: kotlin.String, @Path("end_date") endDate: kotlin.String, @Query("hash") hash: kotlin.String): Either<GetShoppingList200Response, ClientException>
+
+  /**
+   * GET mealplanner/{username}/templates/{id}
+   * Get Meal Plan Template
+   * Get information about a meal plan template.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param id The shopping list item id.
+   * @param hash The private hash for the username.
+   * @return Either<GetMealPlanTemplate200Response, ClientException>
+   */
+  @GET("mealplanner/{username}/templates/{id}")
+  suspend fun getMealPlanTemplate(@Path("username") username: kotlin.String, @Path("id") id: kotlin.Int, @Query("hash") hash: kotlin.String): Either<GetMealPlanTemplate200Response, ClientException>
+
+  /**
+   * GET mealplanner/{username}/templates
+   * Get Meal Plan Templates
+   * Get meal plan templates from user or public ones.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @return Either<GetMealPlanTemplates200Response, ClientException>
+   */
+  @GET("mealplanner/{username}/templates")
+  suspend fun getMealPlanTemplates(@Path("username") username: kotlin.String, @Query("hash") hash: kotlin.String): Either<GetMealPlanTemplates200Response, ClientException>
+
+  /**
+   * GET mealplanner/{username}/week/{start_date}
+   * Get Meal Plan Week
+   * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
+   * @param hash The private hash for the username.
+   * @return Either<GetMealPlanWeek200Response, ClientException>
+   */
+  @GET("mealplanner/{username}/week/{start_date}")
+  suspend fun getMealPlanWeek(@Path("username") username: kotlin.String, @Path("start_date") startDate: kotlin.String, @Query("hash") hash: kotlin.String): Either<GetMealPlanWeek200Response, ClientException>
+
+  /**
+   * GET mealplanner/{username}/shopping-list
+   * Get Shopping List
+   * Get the current shopping list for the given user.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @return Either<GetShoppingList200Response, ClientException>
+   */
+  @GET("mealplanner/{username}/shopping-list")
+  suspend fun getShoppingList(@Path("username") username: kotlin.String, @Query("hash") hash: kotlin.String): Either<GetShoppingList200Response, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MenuItemsService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MenuItemsService.kt
new file mode 100644
index 0000000..6082906
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MenuItemsService.kt
@@ -0,0 +1,146 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.Query
+import arrow.core.Either
+import okhttp3.ResponseBody
+import com.dietfit.service.spoonacular.model.AutocompleteProductSearch200Response
+import com.dietfit.service.spoonacular.model.MenuItem
+import com.dietfit.service.spoonacular.model.SearchMenuItems200Response
+
+interface MenuItemsService {
+  /**
+   * GET food/menuItems/suggest
+   * Autocomplete Menu Item Search
+   * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (partial) search query.
+   * @param number The number of results to return (between 1 and 25). (optional)
+   * @return Either<AutocompleteProductSearch200Response, ClientException>
+   */
+  @GET("food/menuItems/suggest")
+  suspend fun autocompleteMenuItemSearch(@Query("query") query: kotlin.String, @Query("number") number: kotlin.Int? = null): Either<AutocompleteProductSearch200Response, ClientException>
+
+  /**
+   * GET food/menuItems/{id}
+   * Get Menu Item Information
+   * Use a menu item id to get all available information about a menu item, such as nutrition.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The menu item id.
+   * @return Either<MenuItem, ClientException>
+   */
+  @GET("food/menuItems/{id}")
+  suspend fun getMenuItemInformation(@Path("id") id: kotlin.Int): Either<MenuItem, ClientException>
+
+  /**
+   * GET food/menuItems/{id}/nutritionWidget.png
+   * Menu Item Nutrition by ID Image
+   * Visualize a menu item&#39;s nutritional information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The menu item id.
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("food/menuItems/{id}/nutritionWidget.png")
+  suspend fun menuItemNutritionByIDImage(@Path("id") id: kotlin.Int): Either<ResponseBody, ClientException>
+
+  /**
+   * GET food/menuItems/{id}/nutritionLabel.png
+   * Menu Item Nutrition Label Image
+   * Visualize a menu item&#39;s nutritional label information as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The menu item id.
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("food/menuItems/{id}/nutritionLabel.png")
+  suspend fun menuItemNutritionLabelImage(@Path("id") id: kotlin.Int, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<ResponseBody, ClientException>
+
+  /**
+   * GET food/menuItems/{id}/nutritionLabel
+   * Menu Item Nutrition Label Widget
+   * Visualize a menu item&#39;s nutritional label information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The menu item id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("food/menuItems/{id}/nutritionLabel")
+  suspend fun menuItemNutritionLabelWidget(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET food/menuItems/search
+   * Search Menu Items
+   * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param minCalories The minimum amount of calories the menu item must have. (optional)
+   * @param maxCalories The maximum amount of calories the menu item can have. (optional)
+   * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
+   * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
+   * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
+   * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
+   * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
+   * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
+   * @param addMenuItemInformation If set to true, you get more information about the menu items returned. (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchMenuItems200Response, ClientException>
+   */
+  @GET("food/menuItems/search")
+  suspend fun searchMenuItems(@Query("query") query: kotlin.String, @Query("minCalories") minCalories: java.math.BigDecimal? = null, @Query("maxCalories") maxCalories: java.math.BigDecimal? = null, @Query("minCarbs") minCarbs: java.math.BigDecimal? = null, @Query("maxCarbs") maxCarbs: java.math.BigDecimal? = null, @Query("minProtein") minProtein: java.math.BigDecimal? = null, @Query("maxProtein") maxProtein: java.math.BigDecimal? = null, @Query("minFat") minFat: java.math.BigDecimal? = null, @Query("maxFat") maxFat: java.math.BigDecimal? = null, @Query("addMenuItemInformation") addMenuItemInformation: kotlin.Boolean? = null, @Query("offset") offset: kotlin.Int? = null, @Query("number") number: kotlin.Int? = 10): Either<SearchMenuItems200Response, ClientException>
+
+  /**
+   * GET food/menuItems/{id}/nutritionWidget
+   * Menu Item Nutrition by ID Widget
+   * Visualize a menu item&#39;s nutritional information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The menu item id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("food/menuItems/{id}/nutritionWidget")
+  suspend fun visualizeMenuItemNutritionByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true): Either<kotlin.String, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MiscService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MiscService.kt
new file mode 100644
index 0000000..736ddea
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/MiscService.kt
@@ -0,0 +1,214 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Field
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.GET
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import com.dietfit.service.spoonacular.model.DetectFoodInText200Response
+import com.dietfit.service.spoonacular.model.GetARandomFoodJoke200Response
+import com.dietfit.service.spoonacular.model.GetConversationSuggests200Response
+import com.dietfit.service.spoonacular.model.ImageAnalysisByURL200Response
+import com.dietfit.service.spoonacular.model.ImageClassificationByURL200Response
+import com.dietfit.service.spoonacular.model.SearchAllFood200Response
+import com.dietfit.service.spoonacular.model.SearchCustomFoods200Response
+import com.dietfit.service.spoonacular.model.SearchFoodVideos200Response
+import com.dietfit.service.spoonacular.model.SearchSiteContent200Response
+import com.dietfit.service.spoonacular.model.TalkToChatbot200Response
+
+interface MiscService {
+  /**
+   * POST food/detect
+   * Detect Food in Text
+   * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param text
+   * @return Either<DetectFoodInText200Response, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("food/detect")
+  suspend fun detectFoodInText(@Field("text") text: kotlin.String): Either<DetectFoodInText200Response, ClientException>
+
+  /**
+   * GET food/jokes/random
+   * Random Food Joke
+   * Get a random joke that is related to food. Caution: this is an endpoint for adults!
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @return Either<GetARandomFoodJoke200Response, ClientException>
+   */
+  @GET("food/jokes/random")
+  suspend fun getARandomFoodJoke(): Either<GetARandomFoodJoke200Response, ClientException>
+
+  /**
+   * GET food/converse/suggest
+   * Conversation Suggests
+   * This endpoint returns suggestions for things the user can say or ask the chatbot.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
+   * @param number The number of suggestions to return (between 1 and 25). (optional)
+   * @return Either<GetConversationSuggests200Response, ClientException>
+   */
+  @GET("food/converse/suggest")
+  suspend fun getConversationSuggests(@Query("query") query: kotlin.String, @Query("number") number: java.math.BigDecimal? = null): Either<GetConversationSuggests200Response, ClientException>
+
+  /**
+   * GET food/trivia/random
+   * Random Food Trivia
+   * Returns random food trivia.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @return Either<GetARandomFoodJoke200Response, ClientException>
+   */
+  @GET("food/trivia/random")
+  suspend fun getRandomFoodTrivia(): Either<GetARandomFoodJoke200Response, ClientException>
+
+  /**
+   * GET food/images/analyze
+   * Image Analysis by URL
+   * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param imageUrl The URL of the image to be analyzed.
+   * @return Either<ImageAnalysisByURL200Response, ClientException>
+   */
+  @GET("food/images/analyze")
+  suspend fun imageAnalysisByURL(@Query("imageUrl") imageUrl: kotlin.String): Either<ImageAnalysisByURL200Response, ClientException>
+
+  /**
+   * GET food/images/classify
+   * Image Classification by URL
+   * Classify a food image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param imageUrl The URL of the image to be classified.
+   * @return Either<ImageClassificationByURL200Response, ClientException>
+   */
+  @GET("food/images/classify")
+  suspend fun imageClassificationByURL(@Query("imageUrl") imageUrl: kotlin.String): Either<ImageClassificationByURL200Response, ClientException>
+
+  /**
+   * GET food/search
+   * Search All Food
+   * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The search query.
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchAllFood200Response, ClientException>
+   */
+  @GET("food/search")
+  suspend fun searchAllFood(@Query("query") query: kotlin.String, @Query("offset") offset: kotlin.Int? = null, @Query("number") number: kotlin.Int? = 10): Either<SearchAllFood200Response, ClientException>
+
+  /**
+   * GET food/customFoods/search
+   * Search Custom Foods
+   * Search custom foods in a user&#39;s account.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param username The username.
+   * @param hash The private hash for the username.
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchCustomFoods200Response, ClientException>
+   */
+  @GET("food/customFoods/search")
+  suspend fun searchCustomFoods(@Query("query") query: kotlin.String, @Query("username") username: kotlin.String, @Query("hash") hash: kotlin.String, @Query("offset") offset: kotlin.Int? = null, @Query("number") number: kotlin.Int? = 10): Either<SearchCustomFoods200Response, ClientException>
+
+  /**
+   * GET food/videos/search
+   * Search Food Videos
+   * Find recipe and other food related videos.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param type The type of the recipes. See a full list of supported meal types. (optional)
+   * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
+   * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
+   * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
+   * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
+   * @param minLength Minimum video length in seconds. (optional)
+   * @param maxLength Maximum video length in seconds. (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchFoodVideos200Response, ClientException>
+   */
+  @GET("food/videos/search")
+  suspend fun searchFoodVideos(@Query("query") query: kotlin.String, @Query("type") type: kotlin.String? = null, @Query("cuisine") cuisine: kotlin.String? = null, @Query("diet") diet: kotlin.String? = null, @Query("includeIngredients") includeIngredients: kotlin.String? = null, @Query("excludeIngredients") excludeIngredients: kotlin.String? = null, @Query("minLength") minLength: java.math.BigDecimal? = null, @Query("maxLength") maxLength: java.math.BigDecimal? = null, @Query("offset") offset: kotlin.Int? = null, @Query("number") number: kotlin.Int? = 10): Either<SearchFoodVideos200Response, ClientException>
+
+  /**
+   * GET food/site/search
+   * Search Site Content
+   * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
+   * @return Either<SearchSiteContent200Response, ClientException>
+   */
+  @GET("food/site/search")
+  suspend fun searchSiteContent(@Query("query") query: kotlin.String): Either<SearchSiteContent200Response, ClientException>
+
+  /**
+   * GET food/converse
+   * Talk to Chatbot
+   * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param text The request / question / answer from the user to the chatbot.
+   * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
+   * @return Either<TalkToChatbot200Response, ClientException>
+   */
+  @GET("food/converse")
+  suspend fun talkToChatbot(@Query("text") text: kotlin.String, @Query("contextId") contextId: kotlin.String? = null): Either<TalkToChatbot200Response, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/ProductsService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/ProductsService.kt
new file mode 100644
index 0000000..2e246db
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/ProductsService.kt
@@ -0,0 +1,233 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import okhttp3.ResponseBody
+import com.fasterxml.jackson.annotation.JsonProperty
+
+import com.dietfit.service.spoonacular.model.AutocompleteProductSearch200Response
+import com.dietfit.service.spoonacular.model.ClassifyGroceryProduct200Response
+import com.dietfit.service.spoonacular.model.ClassifyGroceryProductBulk200ResponseInner
+import com.dietfit.service.spoonacular.model.ClassifyGroceryProductBulkRequestInner
+import com.dietfit.service.spoonacular.model.ClassifyGroceryProductRequest
+import com.dietfit.service.spoonacular.model.GetComparableProducts200Response
+import com.dietfit.service.spoonacular.model.ProductInformation
+import com.dietfit.service.spoonacular.model.SearchGroceryProducts200Response
+import com.dietfit.service.spoonacular.model.SearchGroceryProductsByUPC200Response
+
+interface ProductsService {
+  /**
+   * GET food/products/suggest
+   * Autocomplete Product Search
+   * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (partial) search query.
+   * @param number The number of results to return (between 1 and 25). (optional)
+   * @return Either<AutocompleteProductSearch200Response, ClientException>
+   */
+  @GET("food/products/suggest")
+  suspend fun autocompleteProductSearch(@Query("query") query: kotlin.String, @Query("number") number: kotlin.Int? = null): Either<AutocompleteProductSearch200Response, ClientException>
+
+  /**
+   * enum for parameter locale
+   */
+  enum class LocaleClassifyGroceryProduct(val value: kotlin.String) {
+    @JsonProperty(value = "en_US")
+    US("en_US"),
+
+    @JsonProperty(value = "en_GB")
+    GB("en_GB")
+  }
+
+  /**
+   * POST food/products/classify
+   * Classify Grocery Product
+   * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param classifyGroceryProductRequest
+   * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
+   * @return Either<ClassifyGroceryProduct200Response, ClientException>
+   */
+  @POST("food/products/classify")
+  suspend fun classifyGroceryProduct(@Body classifyGroceryProductRequest: ClassifyGroceryProductRequest, @Query("locale") locale: LocaleClassifyGroceryProduct? = null): Either<ClassifyGroceryProduct200Response, ClientException>
+
+  /**
+   * POST food/products/classifyBatch
+   * Classify Grocery Product Bulk
+   * Provide a set of product jsons, get back classified products.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param classifyGroceryProductBulkRequestInner
+   * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
+   * @return Either<kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>, ClientException>
+   */
+  @POST("food/products/classifyBatch")
+  suspend fun classifyGroceryProductBulk(@Body classifyGroceryProductBulkRequestInner: kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>, @Query("locale") locale: kotlin.String? = null): Either<kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>, ClientException>
+
+  /**
+   * GET food/products/upc/{upc}/comparable
+   * Get Comparable Products
+   * Find comparable products to the given one.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param upc The UPC of the product for which you want to find comparable products.
+   * @return Either<GetComparableProducts200Response, ClientException>
+   */
+  @GET("food/products/upc/{upc}/comparable")
+  suspend fun getComparableProducts(@Path("upc") upc: kotlin.String): Either<GetComparableProducts200Response, ClientException>
+
+  /**
+   * GET food/products/{id}
+   * Get Product Information
+   * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the packaged food.
+   * @return Either<ProductInformation, ClientException>
+   */
+  @GET("food/products/{id}")
+  suspend fun getProductInformation(@Path("id") id: kotlin.Int): Either<ProductInformation, ClientException>
+
+  /**
+   * GET food/products/{id}/nutritionWidget.png
+   * Product Nutrition by ID Image
+   * Visualize a product&#39;s nutritional information as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the product.
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("food/products/{id}/nutritionWidget.png")
+  suspend fun productNutritionByIDImage(@Path("id") id: kotlin.Int): Either<ResponseBody, ClientException>
+
+  /**
+   * GET food/products/{id}/nutritionLabel.png
+   * Product Nutrition Label Image
+   * Get a product&#39;s nutrition label as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The product id.
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("food/products/{id}/nutritionLabel.png")
+  suspend fun productNutritionLabelImage(@Path("id") id: kotlin.Int, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<ResponseBody, ClientException>
+
+  /**
+   * GET food/products/{id}/nutritionLabel
+   * Product Nutrition Label Widget
+   * Get a product&#39;s nutrition label as an HTML widget.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The product id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("food/products/{id}/nutritionLabel")
+  suspend fun productNutritionLabelWidget(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET food/products/search
+   * Search Grocery Products
+   * Search packaged food products, such as frozen pizza or Greek yogurt.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param minCalories The minimum amount of calories the product must have. (optional)
+   * @param maxCalories The maximum amount of calories the product can have. (optional)
+   * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
+   * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
+   * @param minProtein The minimum amount of protein in grams the product must have. (optional)
+   * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
+   * @param minFat The minimum amount of fat in grams the product must have. (optional)
+   * @param maxFat The maximum amount of fat in grams the product can have. (optional)
+   * @param addProductInformation If set to true, you get more information about the products returned. (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchGroceryProducts200Response, ClientException>
+   */
+  @GET("food/products/search")
+  suspend fun searchGroceryProducts(@Query("query") query: kotlin.String, @Query("minCalories") minCalories: java.math.BigDecimal? = null, @Query("maxCalories") maxCalories: java.math.BigDecimal? = null, @Query("minCarbs") minCarbs: java.math.BigDecimal? = null, @Query("maxCarbs") maxCarbs: java.math.BigDecimal? = null, @Query("minProtein") minProtein: java.math.BigDecimal? = null, @Query("maxProtein") maxProtein: java.math.BigDecimal? = null, @Query("minFat") minFat: java.math.BigDecimal? = null, @Query("maxFat") maxFat: java.math.BigDecimal? = null, @Query("addProductInformation") addProductInformation: kotlin.Boolean? = null, @Query("offset") offset: kotlin.Int? = null, @Query("number") number: kotlin.Int? = 10): Either<SearchGroceryProducts200Response, ClientException>
+
+  /**
+   * GET food/products/upc/{upc}
+   * Search Grocery Products by UPC
+   * Get information about a packaged food using its UPC.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param upc The product&#39;s UPC.
+   * @return Either<SearchGroceryProductsByUPC200Response, ClientException>
+   */
+  @GET("food/products/upc/{upc}")
+  suspend fun searchGroceryProductsByUPC(@Path("upc") upc: kotlin.String): Either<SearchGroceryProductsByUPC200Response, ClientException>
+
+  /**
+   * GET food/products/{id}/nutritionWidget
+   * Product Nutrition by ID Widget
+   * Visualize a product&#39;s nutritional information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the product.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("food/products/{id}/nutritionWidget")
+  suspend fun visualizeProductNutritionByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true): Either<kotlin.String, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/RecipesService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/RecipesService.kt
new file mode 100644
index 0000000..b98b235
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/RecipesService.kt
@@ -0,0 +1,1232 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.Field
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.GET
+import retrofit2.http.Multipart
+import retrofit2.http.Part
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.Query
+import arrow.core.Either
+import okhttp3.ResponseBody
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+import com.dietfit.service.spoonacular.model.AnalyzeARecipeSearchQuery200Response
+import com.dietfit.service.spoonacular.model.AnalyzeRecipeInstructions200Response
+import com.dietfit.service.spoonacular.model.AutocompleteRecipeSearch200ResponseInner
+import com.dietfit.service.spoonacular.model.ClassifyCuisine200Response
+import com.dietfit.service.spoonacular.model.ComputeGlycemicLoad200Response
+import com.dietfit.service.spoonacular.model.ComputeGlycemicLoadRequest
+import com.dietfit.service.spoonacular.model.ConvertAmounts200Response
+import com.dietfit.service.spoonacular.model.CreateRecipeCard200Response
+import com.dietfit.service.spoonacular.model.GetAnalyzedRecipeInstructions200ResponseInner
+import com.dietfit.service.spoonacular.model.GetRandomRecipes200Response
+import com.dietfit.service.spoonacular.model.GetRecipeEquipmentByID200Response
+import com.dietfit.service.spoonacular.model.GetRecipeIngredientsByID200Response
+import com.dietfit.service.spoonacular.model.GetRecipeNutritionWidgetByID200Response
+import com.dietfit.service.spoonacular.model.GetRecipePriceBreakdownByID200Response
+import com.dietfit.service.spoonacular.model.GetSimilarRecipes200ResponseInner
+import com.dietfit.service.spoonacular.model.GuessNutritionByDishName200Response
+import com.dietfit.service.spoonacular.model.IngredientInformation
+import com.dietfit.service.spoonacular.model.QuickAnswer200Response
+import com.dietfit.service.spoonacular.model.RecipeInformation
+import com.dietfit.service.spoonacular.model.SearchRecipes200Response
+import com.dietfit.service.spoonacular.model.SearchRecipesByIngredients200ResponseInner
+import com.dietfit.service.spoonacular.model.SearchRecipesByNutrients200ResponseInner
+import com.dietfit.service.spoonacular.model.SummarizeRecipe200Response
+import com.dietfit.service.spoonacular.model.TasteInformation
+import okhttp3.MultipartBody
+
+interface RecipesService {
+  /**
+   * GET recipes/queries/analyze
+   * Analyze a Recipe Search Query
+   * Parse a recipe search query to find out its intention.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param q The recipe search query.
+   * @return Either<AnalyzeARecipeSearchQuery200Response, ClientException>
+   */
+  @GET("recipes/queries/analyze")
+  suspend fun analyzeARecipeSearchQuery(@Query("q") q: kotlin.String): Either<AnalyzeARecipeSearchQuery200Response, ClientException>
+
+  /**
+   * POST recipes/analyzeInstructions
+   * Analyze Recipe Instructions
+   * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param instructions The recipe&#39;s instructions.
+   * @return Either<AnalyzeRecipeInstructions200Response, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/analyzeInstructions")
+  suspend fun analyzeRecipeInstructions(@Field("instructions") instructions: kotlin.String): Either<AnalyzeRecipeInstructions200Response, ClientException>
+
+  /**
+   * GET recipes/autocomplete
+   * Autocomplete Recipe Search
+   * Autocomplete a partial input to suggest possible recipe names.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>, ClientException>
+   */
+  @GET("recipes/autocomplete")
+  suspend fun autocompleteRecipeSearch(@Query("query") query: kotlin.String, @Query("number") number: kotlin.Int? = 10): Either<kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageClassifyCuisine(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST recipes/cuisine
+   * Classify Cuisine
+   * Classify the recipe&#39;s cuisine.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param title The title of the recipe.
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @return Either<ClassifyCuisine200Response, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/cuisine")
+  suspend fun classifyCuisine(@Field("title") title: kotlin.String, @Field("ingredientList") ingredientList: kotlin.String, @Query("language") language: LanguageClassifyCuisine? = null): Either<ClassifyCuisine200Response, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageComputeGlycemicLoad(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST food/ingredients/glycemicLoad
+   * Compute Glycemic Load
+   * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param computeGlycemicLoadRequest
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @return Either<ComputeGlycemicLoad200Response, ClientException>
+   */
+  @POST("food/ingredients/glycemicLoad")
+  suspend fun computeGlycemicLoad(@Body computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, @Query("language") language: LanguageComputeGlycemicLoad? = null): Either<ComputeGlycemicLoad200Response, ClientException>
+
+  /**
+   * GET recipes/convert
+   * Convert Amounts
+   * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientName The ingredient which you want to convert.
+   * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
+   * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
+   * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
+   * @return Either<ConvertAmounts200Response, ClientException>
+   */
+  @GET("recipes/convert")
+  suspend fun convertAmounts(@Query("ingredientName") ingredientName: kotlin.String, @Query("sourceAmount") sourceAmount: java.math.BigDecimal, @Query("sourceUnit") sourceUnit: kotlin.String, @Query("targetUnit") targetUnit: kotlin.String): Either<ConvertAmounts200Response, ClientException>
+
+  /**
+   * enum for parameter mask
+   */
+  enum class MaskCreateRecipeCard(val value: kotlin.String) {
+    @JsonProperty(value = "ellipseMask")
+    ELLIPSE_MASK("ellipseMask"),
+
+    @JsonProperty(value = "diamondMask")
+    DIAMOND_MASK("diamondMask"),
+
+    @JsonProperty(value = "starMask")
+    STAR_MASK("starMask"),
+
+    @JsonProperty(value = "heartMask")
+    HEART_MASK("heartMask"),
+
+    @JsonProperty(value = "potMask")
+    POT_MASK("potMask"),
+
+    @JsonProperty(value = "fishMask")
+    FISH_MASK("fishMask")
+  }
+
+  /**
+   * enum for parameter backgroundImage
+   */
+  enum class BackgroundImageCreateRecipeCard(val value: kotlin.String) {
+    @JsonProperty(value = "none")
+    NONE("none"),
+
+    @JsonProperty(value = "background1")
+    BACKGROUND1("background1"),
+
+    @JsonProperty(value = "background2")
+    BACKGROUND2("background2")
+  }
+
+  /**
+   * POST recipes/visualizeRecipe
+   * Create Recipe Card
+   * Generate a recipe card for a recipe.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param title The title of the recipe.
+   * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
+   * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
+   * @param readyInMinutes The number of minutes it takes to get the recipe on the table.
+   * @param servings The number of servings the recipe makes.
+   * @param mask The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).
+   * @param backgroundImage The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).
+   * @param image The binary image of the recipe as jpg. (optional)
+   * @param imageUrl If you do not sent a binary image you can also pass the image URL. (optional)
+   * @param author The author of the recipe. (optional)
+   * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
+   * @param fontColor The font color for the recipe card as a hex-string. (optional)
+   * @param source The source of the recipe. (optional)
+   * @return Either<CreateRecipeCard200Response, ClientException>
+   */
+  @Multipart
+  @POST("recipes/visualizeRecipe")
+  suspend fun createRecipeCard(@Part("title") title: kotlin.String, @Part("ingredients") ingredients: kotlin.String, @Part("instructions") instructions: kotlin.String, @Part("readyInMinutes") readyInMinutes: java.math.BigDecimal, @Part("servings") servings: java.math.BigDecimal, @Part("mask") mask: kotlin.String, @Part("backgroundImage") backgroundImage: kotlin.String, @Part image: MultipartBody.Part? = null, @Part("imageUrl") imageUrl: kotlin.String? = null, @Part("author") author: kotlin.String? = null, @Part("backgroundColor") backgroundColor: kotlin.String? = null, @Part("fontColor") fontColor: kotlin.String? = null, @Part("source") source: kotlin.String? = null): Either<CreateRecipeCard200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/equipmentWidget.png
+   * Equipment by ID Image
+   * Visualize a recipe&#39;s equipment list as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/equipmentWidget.png")
+  suspend fun equipmentByIDImage(@Path("id") id: kotlin.Int): Either<ResponseBody, ClientException>
+
+  /**
+   * GET recipes/extract
+   * Extract Recipe from Website
+   * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param url The URL of the recipe page.
+   * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
+   * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
+   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
+   * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
+   * @return Either<RecipeInformation, ClientException>
+   */
+  @GET("recipes/extract")
+  suspend fun extractRecipeFromWebsite(@Query("url") url: kotlin.String, @Query("forceExtraction") forceExtraction: kotlin.Boolean? = null, @Query("analyze") analyze: kotlin.Boolean? = null, @Query("includeNutrition") includeNutrition: kotlin.Boolean? = false, @Query("includeTaste") includeTaste: kotlin.Boolean? = false): Either<RecipeInformation, ClientException>
+
+  /**
+   * GET recipes/{id}/analyzedInstructions
+   * Get Analyzed Recipe Instructions
+   * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
+   * @return Either<kotlin.collections.List<GetAnalyzedRecipeInstructions200ResponseInner>, ClientException>
+   */
+  @GET("recipes/{id}/analyzedInstructions")
+  suspend fun getAnalyzedRecipeInstructions(@Path("id") id: kotlin.Int, @Query("stepBreakdown") stepBreakdown: kotlin.Boolean? = null): Either<kotlin.collections.List<GetAnalyzedRecipeInstructions200ResponseInner>, ClientException>
+
+  /**
+   * GET recipes/random
+   * Get Random Recipes
+   * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
+   * @param includeTags A comma-separated list of tags that the random recipe(s) must adhere to. (optional)
+   * @param excludeTags A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<GetRandomRecipes200Response, ClientException>
+   */
+  @GET("recipes/random")
+  suspend fun getRandomRecipes(@Query("includeNutrition") includeNutrition: kotlin.Boolean? = false, @Query("include-tags") includeTags: kotlin.String? = null, @Query("exclude-tags") excludeTags: kotlin.String? = null, @Query("number") number: kotlin.Int? = 10): Either<GetRandomRecipes200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/equipmentWidget.json
+   * Equipment by ID
+   * Get a recipe&#39;s equipment list.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<GetRecipeEquipmentByID200Response, ClientException>
+   */
+  @GET("recipes/{id}/equipmentWidget.json")
+  suspend fun getRecipeEquipmentByID(@Path("id") id: kotlin.Int): Either<GetRecipeEquipmentByID200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/information
+   * Get Recipe Information
+   * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the recipe.
+   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
+   * @param addWinePairing Add a wine pairing to the recipe. (optional)
+   * @param addTasteData Add taste data to the recipe. (optional)
+   * @return Either<RecipeInformation, ClientException>
+   */
+  @GET("recipes/{id}/information")
+  suspend fun getRecipeInformation(@Path("id") id: kotlin.Int, @Query("includeNutrition") includeNutrition: kotlin.Boolean? = false, @Query("addWinePairing") addWinePairing: kotlin.Boolean? = null, @Query("addTasteData") addTasteData: kotlin.Boolean? = null): Either<RecipeInformation, ClientException>
+
+  /**
+   * GET recipes/informationBulk
+   * Get Recipe Information Bulk
+   * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ids A comma-separated list of recipe ids.
+   * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
+   * @return Either<kotlin.collections.Set<RecipeInformation>, ClientException>
+   */
+  @GET("recipes/informationBulk")
+  suspend fun getRecipeInformationBulk(@Query("ids") ids: kotlin.String, @Query("includeNutrition") includeNutrition: kotlin.Boolean? = false): Either<kotlin.collections.Set<RecipeInformation>, ClientException>
+
+  /**
+   * GET recipes/{id}/ingredientWidget.json
+   * Ingredients by ID
+   * Get a recipe&#39;s ingredient list.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<GetRecipeIngredientsByID200Response, ClientException>
+   */
+  @GET("recipes/{id}/ingredientWidget.json")
+  suspend fun getRecipeIngredientsByID(@Path("id") id: kotlin.Int): Either<GetRecipeIngredientsByID200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/nutritionWidget.json
+   * Nutrition by ID
+   * Get a recipe&#39;s nutrition data.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<GetRecipeNutritionWidgetByID200Response, ClientException>
+   */
+  @GET("recipes/{id}/nutritionWidget.json")
+  suspend fun getRecipeNutritionWidgetByID(@Path("id") id: kotlin.Int): Either<GetRecipeNutritionWidgetByID200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/priceBreakdownWidget.json
+   * Price Breakdown by ID
+   * Get a recipe&#39;s price breakdown data.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<GetRecipePriceBreakdownByID200Response, ClientException>
+   */
+  @GET("recipes/{id}/priceBreakdownWidget.json")
+  suspend fun getRecipePriceBreakdownByID(@Path("id") id: kotlin.Int): Either<GetRecipePriceBreakdownByID200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/tasteWidget.json
+   * Taste by ID
+   * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param normalize Normalize to the strongest taste. (optional, default to true)
+   * @return Either<TasteInformation, ClientException>
+   */
+  @GET("recipes/{id}/tasteWidget.json")
+  suspend fun getRecipeTasteByID(@Path("id") id: kotlin.Int, @Query("normalize") normalize: kotlin.Boolean? = true): Either<TasteInformation, ClientException>
+
+  /**
+   * GET recipes/{id}/similar
+   * Get Similar Recipes
+   * Find recipes which are similar to the given one.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The id of the source recipe for which similar recipes should be found.
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<kotlin.collections.Set<GetSimilarRecipes200ResponseInner>, ClientException>
+   */
+  @GET("recipes/{id}/similar")
+  suspend fun getSimilarRecipes(@Path("id") id: kotlin.Int, @Query("number") number: kotlin.Int? = 10): Either<kotlin.collections.Set<GetSimilarRecipes200ResponseInner>, ClientException>
+
+  /**
+   * GET recipes/guessNutrition
+   * Guess Nutrition by Dish Name
+   * Estimate the macronutrients of a dish based on its title.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param title The title of the dish.
+   * @return Either<GuessNutritionByDishName200Response, ClientException>
+   */
+  @GET("recipes/guessNutrition")
+  suspend fun guessNutritionByDishName(@Query("title") title: kotlin.String): Either<GuessNutritionByDishName200Response, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageParseIngredients(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST recipes/parseIngredients
+   * Parse Ingredients
+   * Extract an ingredient from plain text.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
+   * @param servings The number of servings that you can make from the ingredients.
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
+   * @return Either<kotlin.collections.Set<IngredientInformation>, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/parseIngredients")
+  suspend fun parseIngredients(@Field("ingredientList") ingredientList: kotlin.String, @Field("servings") servings: java.math.BigDecimal, @Query("language") language: LanguageParseIngredients? = null, @Field("includeNutrition") includeNutrition: kotlin.Boolean? = null): Either<kotlin.collections.Set<IngredientInformation>, ClientException>
+
+  /**
+   * GET recipes/{id}/priceBreakdownWidget.png
+   * Price Breakdown by ID Image
+   * Visualize a recipe&#39;s price breakdown.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/priceBreakdownWidget.png")
+  suspend fun priceBreakdownByIDImage(@Path("id") id: kotlin.Int): Either<ResponseBody, ClientException>
+
+  /**
+   * GET recipes/quickAnswer
+   * Quick Answer
+   * Answer a nutrition related natural language question.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param q The nutrition related question.
+   * @return Either<QuickAnswer200Response, ClientException>
+   */
+  @GET("recipes/quickAnswer")
+  suspend fun quickAnswer(@Query("q") q: kotlin.String): Either<QuickAnswer200Response, ClientException>
+
+  /**
+   * GET recipes/{id}/nutritionWidget.png
+   * Recipe Nutrition by ID Image
+   * Visualize a recipe&#39;s nutritional information as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/nutritionWidget.png")
+  suspend fun recipeNutritionByIDImage(@Path("id") id: kotlin.Int): Either<ResponseBody, ClientException>
+
+  /**
+   * GET recipes/{id}/nutritionLabel.png
+   * Recipe Nutrition Label Image
+   * Get a recipe&#39;s nutrition label as an image.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/nutritionLabel.png")
+  suspend fun recipeNutritionLabelImage(@Path("id") id: kotlin.Int, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<ResponseBody, ClientException>
+
+  /**
+   * GET recipes/{id}/nutritionLabel
+   * Recipe Nutrition Label Widget
+   * Get a recipe&#39;s nutrition label as an HTML widget.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @param showOptionalNutrients Whether to show optional nutrients. (optional)
+   * @param showZeroValues Whether to show zero values. (optional)
+   * @param showIngredients Whether to show a list of ingredients. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/nutritionLabel")
+  suspend fun recipeNutritionLabelWidget(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true, @Query("showOptionalNutrients") showOptionalNutrients: kotlin.Boolean? = null, @Query("showZeroValues") showZeroValues: kotlin.Boolean? = null, @Query("showIngredients") showIngredients: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET recipes/{id}/tasteWidget.png
+   * Recipe Taste by ID Image
+   * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param normalize Normalize to the strongest taste. (optional)
+   * @param rgb Red, green, blue values for the chart color. (optional)
+   * @return Either<ResponseBody, ClientException>
+   */
+  @GET("recipes/{id}/tasteWidget.png")
+  suspend fun recipeTasteByIDImage(@Path("id") id: kotlin.Int, @Query("normalize") normalize: kotlin.Boolean? = null, @Query("rgb") rgb: kotlin.String? = null): Either<ResponseBody, ClientException>
+
+  /**
+   * GET recipes/complexSearch
+   * Search Recipes
+   * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param query The (natural language) search query.
+   * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
+   * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
+   * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
+   * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
+   * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
+   * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
+   * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
+   * @param type The type of recipe. See a full list of supported meal types. (optional)
+   * @param instructionsRequired Whether the recipes must have instructions. (optional)
+   * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
+   * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
+   * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
+   * @param author The username of the recipe author. (optional)
+   * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
+   * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
+   * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
+   * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
+   * @param minServings The minimum amount of servings the recipe is for. (optional)
+   * @param maxServings The maximum amount of servings the recipe is for. (optional)
+   * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
+   * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
+   * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
+   * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
+   * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
+   * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
+   * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
+   * @param minCalories The minimum amount of calories the recipe must have. (optional)
+   * @param maxCalories The maximum amount of calories the recipe can have. (optional)
+   * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
+   * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
+   * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
+   * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
+   * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
+   * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
+   * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
+   * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
+   * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
+   * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
+   * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
+   * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
+   * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
+   * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
+   * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
+   * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
+   * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
+   * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
+   * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
+   * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
+   * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
+   * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
+   * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
+   * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
+   * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
+   * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
+   * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
+   * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
+   * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
+   * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
+   * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
+   * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
+   * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
+   * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
+   * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
+   * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
+   * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
+   * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
+   * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
+   * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
+   * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
+   * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
+   * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
+   * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
+   * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
+   * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
+   * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
+   * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
+   * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
+   * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
+   * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
+   * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
+   * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
+   * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
+   * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
+   * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
+   * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
+   * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
+   * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
+   * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
+   * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @return Either<SearchRecipes200Response, ClientException>
+   */
+  @GET("recipes/complexSearch")
+  suspend fun searchRecipes(
+    @Query("query") query: kotlin.String,
+    @Query("cuisine") cuisine: kotlin.String? = null,
+    @Query("excludeCuisine") excludeCuisine: kotlin.String? = null,
+    @Query("diet") diet: kotlin.String? = null,
+    @Query("intolerances") intolerances: kotlin.String? = null,
+    @Query("equipment") equipment: kotlin.String? = null,
+    @Query("includeIngredients") includeIngredients: kotlin.String? = null,
+    @Query("excludeIngredients") excludeIngredients: kotlin.String? = null,
+    @Query("type") type: kotlin.String? = null,
+    @Query("instructionsRequired") instructionsRequired: kotlin.Boolean? = null,
+    @Query("fillIngredients") fillIngredients: kotlin.Boolean? = null,
+    @Query("addRecipeInformation") addRecipeInformation: kotlin.Boolean? = null,
+    @Query("addRecipeNutrition") addRecipeNutrition: kotlin.Boolean? = null,
+    @Query("author") author: kotlin.String? = null,
+    @Query("tags") tags: kotlin.String? = null,
+    @Query("recipeBoxId") recipeBoxId: kotlin.Int? = null,
+    @Query("titleMatch") titleMatch: kotlin.String? = null,
+    @Query("maxReadyTime") maxReadyTime: java.math.BigDecimal? = null,
+    @Query("minServings") minServings: java.math.BigDecimal? = null,
+    @Query("maxServings") maxServings: java.math.BigDecimal? = null,
+    @Query("ignorePantry") ignorePantry: kotlin.Boolean? = false,
+    @Query("sort") sort: kotlin.String? = null,
+    @Query("sortDirection") sortDirection: kotlin.String? = null,
+    @Query("minCarbs") minCarbs: java.math.BigDecimal? = null,
+    @Query("maxCarbs") maxCarbs: java.math.BigDecimal? = null,
+    @Query("minProtein") minProtein: java.math.BigDecimal? = null,
+    @Query("maxProtein") maxProtein: java.math.BigDecimal? = null,
+    @Query("minCalories") minCalories: java.math.BigDecimal? = null,
+    @Query("maxCalories") maxCalories: java.math.BigDecimal? = null,
+    @Query("minFat") minFat: java.math.BigDecimal? = null,
+    @Query("maxFat") maxFat: java.math.BigDecimal? = null,
+    @Query("minAlcohol") minAlcohol: java.math.BigDecimal? = null,
+    @Query("maxAlcohol") maxAlcohol: java.math.BigDecimal? = null,
+    @Query("minCaffeine") minCaffeine: java.math.BigDecimal? = null,
+    @Query("maxCaffeine") maxCaffeine: java.math.BigDecimal? = null,
+    @Query("minCopper") minCopper: java.math.BigDecimal? = null,
+    @Query("maxCopper") maxCopper: java.math.BigDecimal? = null,
+    @Query("minCalcium") minCalcium: java.math.BigDecimal? = null,
+    @Query("maxCalcium") maxCalcium: java.math.BigDecimal? = null,
+    @Query("minCholine") minCholine: java.math.BigDecimal? = null,
+    @Query("maxCholine") maxCholine: java.math.BigDecimal? = null,
+    @Query("minCholesterol") minCholesterol: java.math.BigDecimal? = null,
+    @Query("maxCholesterol") maxCholesterol: java.math.BigDecimal? = null,
+    @Query("minFluoride") minFluoride: java.math.BigDecimal? = null,
+    @Query("maxFluoride") maxFluoride: java.math.BigDecimal? = null,
+    @Query("minSaturatedFat") minSaturatedFat: java.math.BigDecimal? = null,
+    @Query("maxSaturatedFat") maxSaturatedFat: java.math.BigDecimal? = null,
+    @Query("minVitaminA") minVitaminA: java.math.BigDecimal? = null,
+    @Query("maxVitaminA") maxVitaminA: java.math.BigDecimal? = null,
+    @Query("minVitaminC") minVitaminC: java.math.BigDecimal? = null,
+    @Query("maxVitaminC") maxVitaminC: java.math.BigDecimal? = null,
+    @Query("minVitaminD") minVitaminD: java.math.BigDecimal? = null,
+    @Query("maxVitaminD") maxVitaminD: java.math.BigDecimal? = null,
+    @Query("minVitaminE") minVitaminE: java.math.BigDecimal? = null,
+    @Query("maxVitaminE") maxVitaminE: java.math.BigDecimal? = null,
+    @Query("minVitaminK") minVitaminK: java.math.BigDecimal? = null,
+    @Query("maxVitaminK") maxVitaminK: java.math.BigDecimal? = null,
+    @Query("minVitaminB1") minVitaminB1: java.math.BigDecimal? = null,
+    @Query("maxVitaminB1") maxVitaminB1: java.math.BigDecimal? = null,
+    @Query("minVitaminB2") minVitaminB2: java.math.BigDecimal? = null,
+    @Query("maxVitaminB2") maxVitaminB2: java.math.BigDecimal? = null,
+    @Query("minVitaminB5") minVitaminB5: java.math.BigDecimal? = null,
+    @Query("maxVitaminB5") maxVitaminB5: java.math.BigDecimal? = null,
+    @Query("minVitaminB3") minVitaminB3: java.math.BigDecimal? = null,
+    @Query("maxVitaminB3") maxVitaminB3: java.math.BigDecimal? = null,
+    @Query("minVitaminB6") minVitaminB6: java.math.BigDecimal? = null,
+    @Query("maxVitaminB6") maxVitaminB6: java.math.BigDecimal? = null,
+    @Query("minVitaminB12") minVitaminB12: java.math.BigDecimal? = null,
+    @Query("maxVitaminB12") maxVitaminB12: java.math.BigDecimal? = null,
+    @Query("minFiber") minFiber: java.math.BigDecimal? = null,
+    @Query("maxFiber") maxFiber: java.math.BigDecimal? = null,
+    @Query("minFolate") minFolate: java.math.BigDecimal? = null,
+    @Query("maxFolate") maxFolate: java.math.BigDecimal? = null,
+    @Query("minFolicAcid") minFolicAcid: java.math.BigDecimal? = null,
+    @Query("maxFolicAcid") maxFolicAcid: java.math.BigDecimal? = null,
+    @Query("minIodine") minIodine: java.math.BigDecimal? = null,
+    @Query("maxIodine") maxIodine: java.math.BigDecimal? = null,
+    @Query("minIron") minIron: java.math.BigDecimal? = null,
+    @Query("maxIron") maxIron: java.math.BigDecimal? = null,
+    @Query("minMagnesium") minMagnesium: java.math.BigDecimal? = null,
+    @Query("maxMagnesium") maxMagnesium: java.math.BigDecimal? = null,
+    @Query("minManganese") minManganese: java.math.BigDecimal? = null,
+    @Query("maxManganese") maxManganese: java.math.BigDecimal? = null,
+    @Query("minPhosphorus") minPhosphorus: java.math.BigDecimal? = null,
+    @Query("maxPhosphorus") maxPhosphorus: java.math.BigDecimal? = null,
+    @Query("minPotassium") minPotassium: java.math.BigDecimal? = null,
+    @Query("maxPotassium") maxPotassium: java.math.BigDecimal? = null,
+    @Query("minSelenium") minSelenium: java.math.BigDecimal? = null,
+    @Query("maxSelenium") maxSelenium: java.math.BigDecimal? = null,
+    @Query("minSodium") minSodium: java.math.BigDecimal? = null,
+    @Query("maxSodium") maxSodium: java.math.BigDecimal? = null,
+    @Query("minSugar") minSugar: java.math.BigDecimal? = null,
+    @Query("maxSugar") maxSugar: java.math.BigDecimal? = null,
+    @Query("minZinc") minZinc: java.math.BigDecimal? = null,
+    @Query("maxZinc") maxZinc: java.math.BigDecimal? = null,
+    @Query("offset") offset: kotlin.Int? = null,
+    @Query("number") number: kotlin.Int? = 10
+  ): Either<SearchRecipes200Response, ClientException>
+
+  /**
+   * GET recipes/findByIngredients
+   * Search Recipes by Ingredients
+   *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredients A comma-separated list of ingredients that the recipes should contain.
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
+   * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
+   * @return Either<kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>, ClientException>
+   */
+  @GET("recipes/findByIngredients")
+  suspend fun searchRecipesByIngredients(@Query("ingredients") ingredients: kotlin.String, @Query("number") number: kotlin.Int? = 10, @Query("ranking") ranking: kotlin.Int? = null, @Query("ignorePantry") ignorePantry: kotlin.Boolean? = false): Either<kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>, ClientException>
+
+  /**
+   * GET recipes/findByNutrients
+   * Search Recipes by Nutrients
+   * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
+   * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
+   * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
+   * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
+   * @param minCalories The minimum amount of calories the recipe must have. (optional)
+   * @param maxCalories The maximum amount of calories the recipe can have. (optional)
+   * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
+   * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
+   * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
+   * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
+   * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
+   * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
+   * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
+   * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
+   * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
+   * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
+   * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
+   * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
+   * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
+   * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
+   * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
+   * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
+   * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
+   * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
+   * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
+   * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
+   * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
+   * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
+   * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
+   * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
+   * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
+   * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
+   * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
+   * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
+   * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
+   * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
+   * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
+   * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
+   * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
+   * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
+   * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
+   * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
+   * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
+   * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
+   * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
+   * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
+   * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
+   * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
+   * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
+   * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
+   * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
+   * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
+   * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
+   * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
+   * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
+   * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
+   * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
+   * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
+   * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
+   * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
+   * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
+   * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
+   * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
+   * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
+   * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
+   * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
+   * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
+   * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
+   * @param offset The number of results to skip (between 0 and 900). (optional)
+   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
+   * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
+   * @return Either<kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>, ClientException>
+   */
+  @GET("recipes/findByNutrients")
+  suspend fun searchRecipesByNutrients(
+    @Query("minCarbs") minCarbs: java.math.BigDecimal? = null,
+    @Query("maxCarbs") maxCarbs: java.math.BigDecimal? = null,
+    @Query("minProtein") minProtein: java.math.BigDecimal? = null,
+    @Query("maxProtein") maxProtein: java.math.BigDecimal? = null,
+    @Query("minCalories") minCalories: java.math.BigDecimal? = null,
+    @Query("maxCalories") maxCalories: java.math.BigDecimal? = null,
+    @Query("minFat") minFat: java.math.BigDecimal? = null,
+    @Query("maxFat") maxFat: java.math.BigDecimal? = null,
+    @Query("minAlcohol") minAlcohol: java.math.BigDecimal? = null,
+    @Query("maxAlcohol") maxAlcohol: java.math.BigDecimal? = null,
+    @Query("minCaffeine") minCaffeine: java.math.BigDecimal? = null,
+    @Query("maxCaffeine") maxCaffeine: java.math.BigDecimal? = null,
+    @Query("minCopper") minCopper: java.math.BigDecimal? = null,
+    @Query("maxCopper") maxCopper: java.math.BigDecimal? = null,
+    @Query("minCalcium") minCalcium: java.math.BigDecimal? = null,
+    @Query("maxCalcium") maxCalcium: java.math.BigDecimal? = null,
+    @Query("minCholine") minCholine: java.math.BigDecimal? = null,
+    @Query("maxCholine") maxCholine: java.math.BigDecimal? = null,
+    @Query("minCholesterol") minCholesterol: java.math.BigDecimal? = null,
+    @Query("maxCholesterol") maxCholesterol: java.math.BigDecimal? = null,
+    @Query("minFluoride") minFluoride: java.math.BigDecimal? = null,
+    @Query("maxFluoride") maxFluoride: java.math.BigDecimal? = null,
+    @Query("minSaturatedFat") minSaturatedFat: java.math.BigDecimal? = null,
+    @Query("maxSaturatedFat") maxSaturatedFat: java.math.BigDecimal? = null,
+    @Query("minVitaminA") minVitaminA: java.math.BigDecimal? = null,
+    @Query("maxVitaminA") maxVitaminA: java.math.BigDecimal? = null,
+    @Query("minVitaminC") minVitaminC: java.math.BigDecimal? = null,
+    @Query("maxVitaminC") maxVitaminC: java.math.BigDecimal? = null,
+    @Query("minVitaminD") minVitaminD: java.math.BigDecimal? = null,
+    @Query("maxVitaminD") maxVitaminD: java.math.BigDecimal? = null,
+    @Query("minVitaminE") minVitaminE: java.math.BigDecimal? = null,
+    @Query("maxVitaminE") maxVitaminE: java.math.BigDecimal? = null,
+    @Query("minVitaminK") minVitaminK: java.math.BigDecimal? = null,
+    @Query("maxVitaminK") maxVitaminK: java.math.BigDecimal? = null,
+    @Query("minVitaminB1") minVitaminB1: java.math.BigDecimal? = null,
+    @Query("maxVitaminB1") maxVitaminB1: java.math.BigDecimal? = null,
+    @Query("minVitaminB2") minVitaminB2: java.math.BigDecimal? = null,
+    @Query("maxVitaminB2") maxVitaminB2: java.math.BigDecimal? = null,
+    @Query("minVitaminB5") minVitaminB5: java.math.BigDecimal? = null,
+    @Query("maxVitaminB5") maxVitaminB5: java.math.BigDecimal? = null,
+    @Query("minVitaminB3") minVitaminB3: java.math.BigDecimal? = null,
+    @Query("maxVitaminB3") maxVitaminB3: java.math.BigDecimal? = null,
+    @Query("minVitaminB6") minVitaminB6: java.math.BigDecimal? = null,
+    @Query("maxVitaminB6") maxVitaminB6: java.math.BigDecimal? = null,
+    @Query("minVitaminB12") minVitaminB12: java.math.BigDecimal? = null,
+    @Query("maxVitaminB12") maxVitaminB12: java.math.BigDecimal? = null,
+    @Query("minFiber") minFiber: java.math.BigDecimal? = null,
+    @Query("maxFiber") maxFiber: java.math.BigDecimal? = null,
+    @Query("minFolate") minFolate: java.math.BigDecimal? = null,
+    @Query("maxFolate") maxFolate: java.math.BigDecimal? = null,
+    @Query("minFolicAcid") minFolicAcid: java.math.BigDecimal? = null,
+    @Query("maxFolicAcid") maxFolicAcid: java.math.BigDecimal? = null,
+    @Query("minIodine") minIodine: java.math.BigDecimal? = null,
+    @Query("maxIodine") maxIodine: java.math.BigDecimal? = null,
+    @Query("minIron") minIron: java.math.BigDecimal? = null,
+    @Query("maxIron") maxIron: java.math.BigDecimal? = null,
+    @Query("minMagnesium") minMagnesium: java.math.BigDecimal? = null,
+    @Query("maxMagnesium") maxMagnesium: java.math.BigDecimal? = null,
+    @Query("minManganese") minManganese: java.math.BigDecimal? = null,
+    @Query("maxManganese") maxManganese: java.math.BigDecimal? = null,
+    @Query("minPhosphorus") minPhosphorus: java.math.BigDecimal? = null,
+    @Query("maxPhosphorus") maxPhosphorus: java.math.BigDecimal? = null,
+    @Query("minPotassium") minPotassium: java.math.BigDecimal? = null,
+    @Query("maxPotassium") maxPotassium: java.math.BigDecimal? = null,
+    @Query("minSelenium") minSelenium: java.math.BigDecimal? = null,
+    @Query("maxSelenium") maxSelenium: java.math.BigDecimal? = null,
+    @Query("minSodium") minSodium: java.math.BigDecimal? = null,
+    @Query("maxSodium") maxSodium: java.math.BigDecimal? = null,
+    @Query("minSugar") minSugar: java.math.BigDecimal? = null,
+    @Query("maxSugar") maxSugar: java.math.BigDecimal? = null,
+    @Query("minZinc") minZinc: java.math.BigDecimal? = null,
+    @Query("maxZinc") maxZinc: java.math.BigDecimal? = null,
+    @Query("offset") offset: kotlin.Int? = null,
+    @Query("number") number: kotlin.Int? = 10,
+    @Query("random") random: kotlin.Boolean? = null
+  ): Either<kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>, ClientException>
+
+  /**
+   * GET recipes/{id}/summary
+   * Summarize Recipe
+   * Automatically generate a short description that summarizes key information about the recipe.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @return Either<SummarizeRecipe200Response, ClientException>
+   */
+  @GET("recipes/{id}/summary")
+  suspend fun summarizeRecipe(@Path("id") id: kotlin.Int): Either<SummarizeRecipe200Response, ClientException>
+
+  /**
+   * enum for parameter view
+   */
+  enum class ViewVisualizeEquipment(val value: kotlin.String) {
+    @JsonProperty(value = "grid")
+    GRID("grid"),
+
+    @JsonProperty(value = "list")
+    LIST("list")
+  }
+
+  /**
+   * POST recipes/visualizeEquipment
+   * Equipment Widget
+   * Visualize the equipment used to make a recipe.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param instructions The recipe&#39;s instructions.
+   * @param view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)
+   * @param defaultCss Whether the default CSS should be added to the response. (optional)
+   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/visualizeEquipment")
+  suspend fun visualizeEquipment(@Field("instructions") instructions: kotlin.String, @Field("view") view: kotlin.String? = null, @Field("defaultCss") defaultCss: kotlin.Boolean? = null, @Field("showBacklink") showBacklink: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageVisualizePriceBreakdown(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST recipes/visualizePriceEstimator
+   * Price Breakdown Widget
+   * Visualize the price breakdown of a recipe.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
+   * @param servings The number of servings.
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
+   * @param defaultCss Whether the default CSS should be added to the response. (optional)
+   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/visualizePriceEstimator")
+  suspend fun visualizePriceBreakdown(@Field("ingredientList") ingredientList: kotlin.String, @Field("servings") servings: java.math.BigDecimal, @Query("language") language: LanguageVisualizePriceBreakdown? = null, @Field("mode") mode: java.math.BigDecimal? = null, @Field("defaultCss") defaultCss: kotlin.Boolean? = null, @Field("showBacklink") showBacklink: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET recipes/{id}/equipmentWidget
+   * Equipment by ID Widget
+   * Visualize a recipe&#39;s equipment list.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/equipmentWidget")
+  suspend fun visualizeRecipeEquipmentByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true): Either<kotlin.String, ClientException>
+
+  /**
+   * enum for parameter measure
+   */
+  enum class MeasureVisualizeRecipeIngredientsByID(val value: kotlin.String) {
+    @JsonProperty(value = "us")
+    US("us"),
+
+    @JsonProperty(value = "metric")
+    METRIC("metric")
+  }
+
+  /**
+   * GET recipes/{id}/ingredientWidget
+   * Ingredients by ID Widget
+   * Visualize a recipe&#39;s ingredient list.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/ingredientWidget")
+  suspend fun visualizeRecipeIngredientsByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true, @Query("measure") measure: MeasureVisualizeRecipeIngredientsByID? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageVisualizeRecipeNutrition(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST recipes/visualizeNutrition
+   * Recipe Nutrition Widget
+   * Visualize a recipe&#39;s nutritional information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
+   * @param servings The number of servings.
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @param defaultCss Whether the default CSS should be added to the response. (optional)
+   * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/visualizeNutrition")
+  suspend fun visualizeRecipeNutrition(@Field("ingredientList") ingredientList: kotlin.String, @Field("servings") servings: java.math.BigDecimal, @Query("language") language: LanguageVisualizeRecipeNutrition? = null, @Field("defaultCss") defaultCss: kotlin.Boolean? = null, @Field("showBacklink") showBacklink: kotlin.Boolean? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET recipes/{id}/nutritionWidget
+   * Recipe Nutrition by ID Widget
+   * Visualize a recipe&#39;s nutritional information as HTML including CSS.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/nutritionWidget")
+  suspend fun visualizeRecipeNutritionByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true): Either<kotlin.String, ClientException>
+
+  /**
+   * GET recipes/{id}/priceBreakdownWidget
+   * Price Breakdown by ID Widget
+   * Visualize a recipe&#39;s price breakdown.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/priceBreakdownWidget")
+  suspend fun visualizeRecipePriceBreakdownByID(@Path("id") id: kotlin.Int, @Query("defaultCss") defaultCss: kotlin.Boolean? = true): Either<kotlin.String, ClientException>
+
+  /**
+   * enum for parameter language
+   */
+  enum class LanguageVisualizeRecipeTaste(val value: kotlin.String) {
+    @JsonProperty(value = "en")
+    EN("en"),
+
+    @JsonProperty(value = "de")
+    DE("de")
+  }
+
+  /**
+   * POST recipes/visualizeTaste
+   * Recipe Taste Widget
+   * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param ingredientList The ingredient list of the recipe, one ingredient per line.
+   * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
+   * @param normalize Normalize to the strongest taste. (optional)
+   * @param rgb Red, green, blue values for the chart color. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @FormUrlEncoded
+  @POST("recipes/visualizeTaste")
+  suspend fun visualizeRecipeTaste(@Field("ingredientList") ingredientList: kotlin.String, @Query("language") language: LanguageVisualizeRecipeTaste? = null, @Field("normalize") normalize: kotlin.Boolean? = null, @Field("rgb") rgb: kotlin.String? = null): Either<kotlin.String, ClientException>
+
+  /**
+   * GET recipes/{id}/tasteWidget
+   * Recipe Taste by ID Widget
+   * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param id The recipe id.
+   * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
+   * @param rgb Red, green, blue values for the chart color. (optional)
+   * @return Either<kotlin.String, ClientException>
+   */
+  @GET("recipes/{id}/tasteWidget")
+  suspend fun visualizeRecipeTasteByID(@Path("id") id: kotlin.Int, @Query("normalize") normalize: kotlin.Boolean? = true, @Query("rgb") rgb: kotlin.String? = null): Either<kotlin.String, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/WineService.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/WineService.kt
new file mode 100644
index 0000000..413841c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/api/WineService.kt
@@ -0,0 +1,81 @@
+package com.dietfit.service.spoonacular.api
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.GET
+import retrofit2.http.Query
+import arrow.core.Either
+import com.dietfit.service.spoonacular.model.GetDishPairingForWine200Response
+import com.dietfit.service.spoonacular.model.GetWineDescription200Response
+import com.dietfit.service.spoonacular.model.GetWinePairing200Response
+import com.dietfit.service.spoonacular.model.GetWineRecommendation200Response
+
+interface WineService {
+  /**
+   * GET food/wine/dishes
+   * Dish Pairing for Wine
+   * Find a dish that goes well with a given wine.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
+   * @return Either<GetDishPairingForWine200Response, ClientException>
+   */
+  @GET("food/wine/dishes")
+  suspend fun getDishPairingForWine(@Query("wine") wine: kotlin.String): Either<GetDishPairingForWine200Response, ClientException>
+
+  /**
+   * GET food/wine/description
+   * Wine Description
+   * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
+   * @return Either<GetWineDescription200Response, ClientException>
+   */
+  @GET("food/wine/description")
+  suspend fun getWineDescription(@Query("wine") wine: kotlin.String): Either<GetWineDescription200Response, ClientException>
+
+  /**
+   * GET food/wine/pairing
+   * Wine Pairing
+   * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
+   * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
+   * @return Either<GetWinePairing200Response, ClientException>
+   */
+  @GET("food/wine/pairing")
+  suspend fun getWinePairing(@Query("food") food: kotlin.String, @Query("maxPrice") maxPrice: java.math.BigDecimal? = null): Either<GetWinePairing200Response, ClientException>
+
+  /**
+   * GET food/wine/recommendation
+   * Wine Recommendation
+   * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
+   * Responses:
+   *  - 200: Success
+   *  - 401: Unauthorized
+   *  - 403: Forbidden
+   *  - 404: Not Found
+   *
+   * @param wine The type of wine to get a specific product recommendation for.
+   * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
+   * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
+   * @param number The number of wine recommendations expected (between 1 and 100). (optional, default to 10)
+   * @return Either<GetWineRecommendation200Response, ClientException>
+   */
+  @GET("food/wine/recommendation")
+  suspend fun getWineRecommendation(@Query("wine") wine: kotlin.String, @Query("maxPrice") maxPrice: java.math.BigDecimal? = null, @Query("minRating") minRating: java.math.BigDecimal? = null, @Query("number") number: java.math.BigDecimal? = java.math.BigDecimal("10")): Either<GetWineRecommendation200Response, ClientException>
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/auth/ApiKeyAuth.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/auth/ApiKeyAuth.kt
new file mode 100644
index 0000000..662f8be
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/auth/ApiKeyAuth.kt
@@ -0,0 +1,52 @@
+package com.dietfit.service.spoonacular.auth
+
+import java.io.IOException
+import java.net.URI
+import java.net.URISyntaxException
+
+import okhttp3.Interceptor
+import okhttp3.Response
+
+class ApiKeyAuth(
+  private val location: String = "",
+  private val paramName: String = "",
+  private var apiKey: String = ""
+) : Interceptor {
+
+  @Throws(IOException::class)
+  override fun intercept(chain: Interceptor.Chain): Response {
+    var request = chain.request()
+
+    if ("query" == location) {
+      var newQuery = request.url.toUri().query
+      val paramValue = "$paramName=$apiKey"
+      if (newQuery == null) {
+        newQuery = paramValue
+      } else {
+        newQuery += "&$paramValue"
+      }
+
+      val newUri: URI
+      try {
+        val oldUri = request.url.toUri()
+        newUri = URI(
+          oldUri.scheme, oldUri.authority,
+          oldUri.path, newQuery, oldUri.fragment
+        )
+      } catch (e: URISyntaxException) {
+        throw IOException(e)
+      }
+
+      request = request.newBuilder().url(newUri.toURL()).build()
+    } else if ("header" == location) {
+      request = request.newBuilder()
+        .addHeader(paramName, apiKey)
+        .build()
+    } else if ("cookie" == location) {
+      request = request.newBuilder()
+        .addHeader("Cookie", "$paramName=$apiKey")
+        .build()
+    }
+    return chain.proceed(request)
+  }
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ApiClient.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ApiClient.kt
new file mode 100644
index 0000000..2de7329
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ApiClient.kt
@@ -0,0 +1,127 @@
+package com.dietfit.service.spoonacular.infrastructure
+
+import com.dietfit.service.spoonacular.auth.ApiKeyAuth
+
+import okhttp3.Call
+import okhttp3.Interceptor
+import okhttp3.OkHttpClient
+import retrofit2.Retrofit
+import okhttp3.logging.HttpLoggingInterceptor
+import retrofit2.Converter
+import retrofit2.CallAdapter
+import com.fasterxml.jackson.databind.ObjectMapper
+import retrofit2.converter.jackson.JacksonConverterFactory
+
+class ApiClient(
+  private var baseUrl: String = defaultBasePath,
+  private val okHttpClientBuilder: OkHttpClient.Builder? = null,
+  private val serializerBuilder: ObjectMapper = Serializer.jacksonObjectMapper,
+  private val callFactory: Call.Factory? = null,
+  private val callAdapterFactories: List<CallAdapter.Factory> = listOf(),
+  private val converterFactories: List<Converter.Factory> = listOf(
+    JacksonConverterFactory.create(serializerBuilder)
+  )
+) {
+  private val apiAuthorizations = mutableMapOf<String, Interceptor>()
+  var logger: ((String) -> Unit)? = null
+
+  private val retrofitBuilder: Retrofit.Builder by lazy {
+    Retrofit.Builder()
+      .baseUrl(baseUrl)
+      .apply {
+        callAdapterFactories.forEach {
+          addCallAdapterFactory(it)
+        }
+      }
+      .apply {
+        converterFactories.forEach {
+          addConverterFactory(it)
+        }
+      }
+  }
+
+  private val clientBuilder: OkHttpClient.Builder by lazy {
+    okHttpClientBuilder ?: defaultClientBuilder
+  }
+
+  private val defaultClientBuilder: OkHttpClient.Builder by lazy {
+    OkHttpClient()
+      .newBuilder()
+      .addInterceptor(
+        HttpLoggingInterceptor { message -> logger?.invoke(message) }
+          .apply { level = HttpLoggingInterceptor.Level.BODY }
+      )
+  }
+
+  init {
+    normalizeBaseUrl()
+  }
+
+  constructor(
+    baseUrl: String = defaultBasePath,
+    okHttpClientBuilder: OkHttpClient.Builder? = null,
+    serializerBuilder: ObjectMapper = Serializer.jacksonObjectMapper,
+    authNames: Array<String>
+  ) : this(baseUrl, okHttpClientBuilder, serializerBuilder) {
+    authNames.forEach { authName ->
+      val auth: Interceptor? = when (authName) {
+        "apiKeyScheme" -> ApiKeyAuth("header", "x-api-key")
+
+        else -> throw RuntimeException("auth name $authName not found in available auth names")
+      }
+      if (auth != null) {
+        addAuthorization(authName, auth)
+      }
+    }
+  }
+
+  /**
+   * Adds an authorization to be used by the client
+   * @param authName Authentication name
+   * @param authorization Authorization interceptor
+   * @return ApiClient
+   */
+  fun addAuthorization(authName: String, authorization: Interceptor): ApiClient {
+    if (apiAuthorizations.containsKey(authName)) {
+      throw RuntimeException("auth name $authName already in api authorizations")
+    }
+    apiAuthorizations[authName] = authorization
+    clientBuilder.addInterceptor(authorization)
+    return this
+  }
+
+  fun setLogger(logger: (String) -> Unit): ApiClient {
+    this.logger = logger
+    return this
+  }
+
+  fun <S> createService(serviceClass: Class<S>): S {
+    val usedCallFactory = this.callFactory ?: clientBuilder.build()
+    return retrofitBuilder.callFactory(usedCallFactory).build().create(serviceClass)
+  }
+
+  private fun normalizeBaseUrl() {
+    if (!baseUrl.endsWith("/")) {
+      baseUrl += "/"
+    }
+  }
+
+  private inline fun <T, reified U> Iterable<T>.runOnFirst(callback: U.() -> Unit) {
+    for (element in this) {
+      if (element is U) {
+        callback.invoke(element)
+        break
+      }
+    }
+  }
+
+  companion object {
+    @JvmStatic
+    protected val baseUrlKey: String = "com.dietfit.service.spoonacular.baseUrl"
+
+    @JvmStatic
+    val defaultBasePath: String by lazy {
+      System.getProperties().getProperty(baseUrlKey, "https://api.spoonacular.com")
+    }
+  }
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/CollectionFormats.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/CollectionFormats.kt
new file mode 100644
index 0000000..754b2a7
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/CollectionFormats.kt
@@ -0,0 +1,56 @@
+package com.dietfit.service.spoonacular.infrastructure
+
+class CollectionFormats {
+
+  open class CSVParams {
+
+    var params: List<String>
+
+    constructor(params: List<String>) {
+      this.params = params
+    }
+
+    constructor(vararg params: String) {
+      this.params = listOf(*params)
+    }
+
+    override fun toString(): String {
+      return params.joinToString(",")
+    }
+  }
+
+  open class SSVParams : CSVParams {
+
+    constructor(params: List<String>) : super(params)
+
+    constructor(vararg params: String) : super(*params)
+
+    override fun toString(): String {
+      return params.joinToString(" ")
+    }
+  }
+
+  class TSVParams : CSVParams {
+
+    constructor(params: List<String>) : super(params)
+
+    constructor(vararg params: String) : super(*params)
+
+    override fun toString(): String {
+      return params.joinToString("\t")
+    }
+  }
+
+  class PIPESParams : CSVParams {
+
+    constructor(params: List<String>) : super(params)
+
+    constructor(vararg params: String) : super(*params)
+
+    override fun toString(): String {
+      return params.joinToString("|")
+    }
+  }
+
+  class SPACEParams : SSVParams()
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ResponseExt.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ResponseExt.kt
new file mode 100644
index 0000000..7fb5572
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/ResponseExt.kt
@@ -0,0 +1 @@
+package com.dietfit.service.spoonacular.infrastructure
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/Serializer.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/Serializer.kt
new file mode 100644
index 0000000..f02179b
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/infrastructure/Serializer.kt
@@ -0,0 +1,9 @@
+package com.dietfit.service.spoonacular.infrastructure
+
+import com.dietfit.jackson.configured
+import com.fasterxml.jackson.databind.ObjectMapper
+
+object Serializer {
+  @JvmStatic
+  val jacksonObjectMapper: ObjectMapper = ObjectMapper().configured()
+}
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200Response.kt
new file mode 100644
index 0000000..da58910
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param items
+ * @param publishAsPublic
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddMealPlanTemplate200Response(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("items")
+  val items: kotlin.collections.Set<AddMealPlanTemplate200ResponseItemsInner>,
+
+  @field:JsonProperty("publishAsPublic")
+  val publishAsPublic: kotlin.Boolean
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInner.kt
new file mode 100644
index 0000000..b74b770
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param day
+ * @param slot
+ * @param position
+ * @param type
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddMealPlanTemplate200ResponseItemsInner(
+
+  @field:JsonProperty("day")
+  val day: kotlin.Int,
+
+  @field:JsonProperty("slot")
+  val slot: kotlin.Int,
+
+  @field:JsonProperty("position")
+  val position: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: AddMealPlanTemplate200ResponseItemsInnerValue? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInnerValue.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInnerValue.kt
new file mode 100644
index 0000000..a8b0572
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddMealPlanTemplate200ResponseItemsInnerValue.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param servings
+ * @param title
+ * @param imageType
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddMealPlanTemplate200ResponseItemsInnerValue(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int? = null,
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String? = null,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequest.kt
new file mode 100644
index 0000000..f10233c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequest.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param date
+ * @param slot
+ * @param position
+ * @param type
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddToMealPlanRequest(
+
+  @field:JsonProperty("date")
+  val date: java.math.BigDecimal,
+
+  @field:JsonProperty("slot")
+  val slot: kotlin.Int,
+
+  @field:JsonProperty("position")
+  val position: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: AddToMealPlanRequestValue
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValue.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValue.kt
new file mode 100644
index 0000000..cdab05f
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValue.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddToMealPlanRequestValue(
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<AddToMealPlanRequestValueIngredientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValueIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValueIngredientsInner.kt
new file mode 100644
index 0000000..0e564eb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToMealPlanRequestValueIngredientsInner.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddToMealPlanRequestValueIngredientsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToShoppingListRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToShoppingListRequest.kt
new file mode 100644
index 0000000..8f0a850
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AddToShoppingListRequest.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param item
+ * @param aisle
+ * @param parse
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AddToShoppingListRequest(
+
+  @field:JsonProperty("item")
+  val item: kotlin.String,
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("parse")
+  val parse: kotlin.Boolean
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200Response.kt
new file mode 100644
index 0000000..e9d84e0
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param dishes
+ * @param ingredients
+ * @param cuisines
+ * @param modifiers
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeARecipeSearchQuery200Response(
+
+  @field:JsonProperty("dishes")
+  val dishes: kotlin.collections.Set<AnalyzeARecipeSearchQuery200ResponseDishesInner>,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<AnalyzeARecipeSearchQuery200ResponseIngredientsInner>,
+
+  @field:JsonProperty("cuisines")
+  val cuisines: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("modifiers")
+  val modifiers: kotlin.collections.List<kotlin.String>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseDishesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseDishesInner.kt
new file mode 100644
index 0000000..7b1941c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseDishesInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param image
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeARecipeSearchQuery200ResponseDishesInner(
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseIngredientsInner.kt
new file mode 100644
index 0000000..e171f95
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeARecipeSearchQuery200ResponseIngredientsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param image
+ * @param include
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeARecipeSearchQuery200ResponseIngredientsInner(
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("include")
+  val include: kotlin.Boolean,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200Response.kt
new file mode 100644
index 0000000..8edb7b6
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param parsedInstructions
+ * @param ingredients
+ * @param equipment
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeInstructions200Response(
+
+  @field:JsonProperty("parsedInstructions")
+  val parsedInstructions: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseParsedInstructionsInner>,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseIngredientsInner>,
+
+  @field:JsonProperty("equipment")
+  val equipment: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseIngredientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseIngredientsInner.kt
new file mode 100644
index 0000000..5a8d3fb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseIngredientsInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeInstructions200ResponseIngredientsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.kt
new file mode 100644
index 0000000..7e3310c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param steps
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeInstructions200ResponseParsedInstructionsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("steps")
+  val steps: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.kt
new file mode 100644
index 0000000..e000232
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param number
+ * @param step
+ * @param ingredients
+ * @param equipment
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner(
+
+  @field:JsonProperty("number")
+  val number: java.math.BigDecimal,
+
+  @field:JsonProperty("step")
+  val step: kotlin.String,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner>? = null,
+
+  @field:JsonProperty("equipment")
+  val equipment: kotlin.collections.Set<AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner.kt
new file mode 100644
index 0000000..ddf1fca
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param localizedName
+ * @param image
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("localizedName")
+  val localizedName: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeRequest.kt
new file mode 100644
index 0000000..8a585e4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AnalyzeRecipeRequest.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param servings
+ * @param ingredients
+ * @param instructions
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AnalyzeRecipeRequest(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String? = null,
+
+  @field:JsonProperty("servings")
+  val servings: kotlin.Int? = null,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("instructions")
+  val instructions: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteIngredientSearch200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteIngredientSearch200ResponseInner.kt
new file mode 100644
index 0000000..99dcade
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteIngredientSearch200ResponseInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param image
+ * @param id
+ * @param aisle
+ * @param possibleUnits
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AutocompleteIngredientSearch200ResponseInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int? = null,
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String? = null,
+
+  @field:JsonProperty("possibleUnits")
+  val possibleUnits: kotlin.collections.List<kotlin.String>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200Response.kt
new file mode 100644
index 0000000..e3fba9a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param results
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AutocompleteProductSearch200Response(
+
+  @field:JsonProperty("results")
+  val results: kotlin.collections.Set<AutocompleteProductSearch200ResponseResultsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200ResponseResultsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200ResponseResultsInner.kt
new file mode 100644
index 0000000..8eefc8f
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteProductSearch200ResponseResultsInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AutocompleteProductSearch200ResponseResultsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteRecipeSearch200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteRecipeSearch200ResponseInner.kt
new file mode 100644
index 0000000..82752c8
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/AutocompleteRecipeSearch200ResponseInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param imageType
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class AutocompleteRecipeSearch200ResponseInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyCuisine200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyCuisine200Response.kt
new file mode 100644
index 0000000..96242fe
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyCuisine200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param cuisine
+ * @param cuisines
+ * @param confidence
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ClassifyCuisine200Response(
+
+  @field:JsonProperty("cuisine")
+  val cuisine: kotlin.String,
+
+  @field:JsonProperty("cuisines")
+  val cuisines: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("confidence")
+  val confidence: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProduct200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProduct200Response.kt
new file mode 100644
index 0000000..d3dcca1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProduct200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param cleanTitle
+ * @param image
+ * @param category
+ * @param breadcrumbs
+ * @param usdaCode
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ClassifyGroceryProduct200Response(
+
+  @field:JsonProperty("cleanTitle")
+  val cleanTitle: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("category")
+  val category: kotlin.String,
+
+  @field:JsonProperty("breadcrumbs")
+  val breadcrumbs: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("usdaCode")
+  val usdaCode: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulk200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulk200ResponseInner.kt
new file mode 100644
index 0000000..2339f39
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulk200ResponseInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param cleanTitle
+ * @param image
+ * @param category
+ * @param breadcrumbs
+ * @param usdaCode
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ClassifyGroceryProductBulk200ResponseInner(
+
+  @field:JsonProperty("cleanTitle")
+  val cleanTitle: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("category")
+  val category: kotlin.String,
+
+  @field:JsonProperty("breadcrumbs")
+  val breadcrumbs: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("usdaCode")
+  val usdaCode: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulkRequestInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulkRequestInner.kt
new file mode 100644
index 0000000..2b9450a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductBulkRequestInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param upc
+ * @param pluCode
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ClassifyGroceryProductBulkRequestInner(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("upc")
+  val upc: kotlin.String,
+
+  @field:JsonProperty("plu_code")
+  val pluCode: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductRequest.kt
new file mode 100644
index 0000000..b2c2a03
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ClassifyGroceryProductRequest.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param upc
+ * @param pluCode
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ClassifyGroceryProductRequest(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("upc")
+  val upc: kotlin.String,
+
+  @field:JsonProperty("plu_code")
+  val pluCode: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComparableProduct.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComparableProduct.kt
new file mode 100644
index 0000000..fcfc071
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComparableProduct.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param difference
+ * @param id
+ * @param image
+ * @param title
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ComparableProduct(
+
+  @field:JsonProperty("difference")
+  val difference: java.math.BigDecimal,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200Response.kt
new file mode 100644
index 0000000..161b5f1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param totalGlycemicLoad
+ * @param ingredients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ComputeGlycemicLoad200Response(
+
+  @field:JsonProperty("totalGlycemicLoad")
+  val totalGlycemicLoad: java.math.BigDecimal,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<ComputeGlycemicLoad200ResponseIngredientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200ResponseIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200ResponseIngredientsInner.kt
new file mode 100644
index 0000000..daec859
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoad200ResponseIngredientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param original
+ * @param glycemicIndex
+ * @param glycemicLoad
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ComputeGlycemicLoad200ResponseIngredientsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("original")
+  val original: kotlin.String,
+
+  @field:JsonProperty("glycemicIndex")
+  val glycemicIndex: java.math.BigDecimal,
+
+  @field:JsonProperty("glycemicLoad")
+  val glycemicLoad: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoadRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoadRequest.kt
new file mode 100644
index 0000000..194cdeb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeGlycemicLoadRequest.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ComputeGlycemicLoadRequest(
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.List<kotlin.String>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeIngredientAmount200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeIngredientAmount200Response.kt
new file mode 100644
index 0000000..ede334e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ComputeIngredientAmount200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param amount
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ComputeIngredientAmount200Response(
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUser200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUser200Response.kt
new file mode 100644
index 0000000..8956577
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUser200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param username
+ * @param hash
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ConnectUser200Response(
+
+  @field:JsonProperty("username")
+  val username: kotlin.String,
+
+  @field:JsonProperty("hash")
+  val hash: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUserRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUserRequest.kt
new file mode 100644
index 0000000..d30e669
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConnectUserRequest.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param username
+ * @param firstName
+ * @param lastName
+ * @param email
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ConnectUserRequest(
+
+  @field:JsonProperty("username")
+  val username: kotlin.String,
+
+  @field:JsonProperty("firstName")
+  val firstName: kotlin.String,
+
+  @field:JsonProperty("lastName")
+  val lastName: kotlin.String,
+
+  @field:JsonProperty("email")
+  val email: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConvertAmounts200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConvertAmounts200Response.kt
new file mode 100644
index 0000000..a62cdf5
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ConvertAmounts200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param sourceAmount
+ * @param sourceUnit
+ * @param targetAmount
+ * @param targetUnit
+ * @param answer
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ConvertAmounts200Response(
+
+  @field:JsonProperty("sourceAmount")
+  val sourceAmount: java.math.BigDecimal,
+
+  @field:JsonProperty("sourceUnit")
+  val sourceUnit: kotlin.String,
+
+  @field:JsonProperty("targetAmount")
+  val targetAmount: java.math.BigDecimal,
+
+  @field:JsonProperty("targetUnit")
+  val targetUnit: kotlin.String,
+
+  @field:JsonProperty("answer")
+  val answer: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/CreateRecipeCard200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/CreateRecipeCard200Response.kt
new file mode 100644
index 0000000..54ff646
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/CreateRecipeCard200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param url
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class CreateRecipeCard200Response(
+
+  @field:JsonProperty("url")
+  val url: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200Response.kt
new file mode 100644
index 0000000..687f788
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param annotations
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class DetectFoodInText200Response(
+
+  @field:JsonProperty("annotations")
+  val annotations: kotlin.collections.Set<DetectFoodInText200ResponseAnnotationsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200ResponseAnnotationsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200ResponseAnnotationsInner.kt
new file mode 100644
index 0000000..a1cf2c1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/DetectFoodInText200ResponseAnnotationsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param `annotation`
+ * @param image
+ * @param tag
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class DetectFoodInText200ResponseAnnotationsInner(
+
+  @field:JsonProperty("annotation")
+  val `annotation`: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("tag")
+  val tag: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200Response.kt
new file mode 100644
index 0000000..f6e139c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param meals
+ * @param nutrients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GenerateMealPlan200Response(
+
+  @field:JsonProperty("meals")
+  val meals: kotlin.collections.Set<GetSimilarRecipes200ResponseInner>,
+
+  @field:JsonProperty("nutrients")
+  val nutrients: GenerateMealPlan200ResponseNutrients
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200ResponseNutrients.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200ResponseNutrients.kt
new file mode 100644
index 0000000..6474b7e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GenerateMealPlan200ResponseNutrients.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param calories
+ * @param carbohydrates
+ * @param fat
+ * @param protein
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GenerateMealPlan200ResponseNutrients(
+
+  @field:JsonProperty("calories")
+  val calories: java.math.BigDecimal,
+
+  @field:JsonProperty("carbohydrates")
+  val carbohydrates: java.math.BigDecimal,
+
+  @field:JsonProperty("fat")
+  val fat: java.math.BigDecimal,
+
+  @field:JsonProperty("protein")
+  val protein: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetARandomFoodJoke200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetARandomFoodJoke200Response.kt
new file mode 100644
index 0000000..b9f4c03
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetARandomFoodJoke200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param text
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetARandomFoodJoke200Response(
+
+  @field:JsonProperty("text")
+  val text: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInner.kt
new file mode 100644
index 0000000..457e4a0
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param steps
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetAnalyzedRecipeInstructions200ResponseInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("steps")
+  val steps: kotlin.collections.Set<GetAnalyzedRecipeInstructions200ResponseInnerStepsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInner.kt
new file mode 100644
index 0000000..bff4587
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param number
+ * @param step
+ * @param ingredients
+ * @param equipment
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetAnalyzedRecipeInstructions200ResponseInnerStepsInner(
+
+  @field:JsonProperty("number")
+  val number: java.math.BigDecimal,
+
+  @field:JsonProperty("step")
+  val step: kotlin.String,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner>? = null,
+
+  @field:JsonProperty("equipment")
+  val equipment: kotlin.collections.Set<GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner.kt
new file mode 100644
index 0000000..3cfd8f6
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param localizedName
+ * @param image
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetAnalyzedRecipeInstructions200ResponseInnerStepsInnerIngredientsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("localizedName")
+  val localizedName: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200Response.kt
new file mode 100644
index 0000000..04a2ecc
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param comparableProducts
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetComparableProducts200Response(
+
+  @field:JsonProperty("comparableProducts")
+  val comparableProducts: GetComparableProducts200ResponseComparableProducts
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200ResponseComparableProducts.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200ResponseComparableProducts.kt
new file mode 100644
index 0000000..e3e424d
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetComparableProducts200ResponseComparableProducts.kt
@@ -0,0 +1,52 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param calories
+ * @param likes
+ * @param price
+ * @param protein
+ * @param spoonacularScore
+ * @param sugar
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetComparableProducts200ResponseComparableProducts(
+
+  @field:JsonProperty("calories")
+  val calories: kotlin.collections.List<ComparableProduct>,
+
+  @field:JsonProperty("likes")
+  val likes: kotlin.collections.List<ComparableProduct>,
+
+  @field:JsonProperty("price")
+  val price: kotlin.collections.List<ComparableProduct>,
+
+  @field:JsonProperty("protein")
+  val protein: kotlin.collections.List<ComparableProduct>,
+
+  @field:JsonProperty("spoonacular_score")
+  val spoonacularScore: kotlin.collections.List<ComparableProduct>,
+
+  @field:JsonProperty("sugar")
+  val sugar: kotlin.collections.List<ComparableProduct>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200Response.kt
new file mode 100644
index 0000000..8245da1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param suggests
+ * @param words
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetConversationSuggests200Response(
+
+  @field:JsonProperty("suggests")
+  val suggests: GetConversationSuggests200ResponseSuggests,
+
+  @field:JsonProperty("words")
+  val words: kotlin.collections.List<kotlin.String>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggests.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggests.kt
new file mode 100644
index 0000000..b37fc57
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggests.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param underscore
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetConversationSuggests200ResponseSuggests(
+
+  @field:JsonProperty("_")
+  val underscore: kotlin.collections.Set<GetConversationSuggests200ResponseSuggestsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggestsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggestsInner.kt
new file mode 100644
index 0000000..7835b71
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetConversationSuggests200ResponseSuggestsInner.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetConversationSuggests200ResponseSuggestsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetDishPairingForWine200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetDishPairingForWine200Response.kt
new file mode 100644
index 0000000..fdb1f9b
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetDishPairingForWine200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param pairings
+ * @param text
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetDishPairingForWine200Response(
+
+  @field:JsonProperty("pairings")
+  val pairings: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("text")
+  val text: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetIngredientSubstitutes200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetIngredientSubstitutes200Response.kt
new file mode 100644
index 0000000..487c986
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetIngredientSubstitutes200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredient
+ * @param substitutes
+ * @param message
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetIngredientSubstitutes200Response(
+
+  @field:JsonProperty("ingredient")
+  val ingredient: kotlin.String,
+
+  @field:JsonProperty("substitutes")
+  val substitutes: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("message")
+  val message: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200Response.kt
new file mode 100644
index 0000000..bb56dd2
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param days
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplate200Response(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("days")
+  val days: kotlin.collections.Set<GetMealPlanTemplate200ResponseDaysInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInner.kt
new file mode 100644
index 0000000..0c01220
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInner.kt
@@ -0,0 +1,52 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param day
+ * @param nutritionSummary
+ * @param nutritionSummaryBreakfast
+ * @param nutritionSummaryLunch
+ * @param nutritionSummaryDinner
+ * @param items
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplate200ResponseDaysInner(
+
+  @field:JsonProperty("day")
+  val day: kotlin.String,
+
+  @field:JsonProperty("nutritionSummary")
+  val nutritionSummary: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryBreakfast")
+  val nutritionSummaryBreakfast: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryLunch")
+  val nutritionSummaryLunch: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryDinner")
+  val nutritionSummaryDinner: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("items")
+  val items: kotlin.collections.Set<GetMealPlanTemplate200ResponseDaysInnerItemsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInner.kt
new file mode 100644
index 0000000..40716a0
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param slot
+ * @param position
+ * @param type
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplate200ResponseDaysInnerItemsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("slot")
+  val slot: kotlin.Int,
+
+  @field:JsonProperty("position")
+  val position: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue.kt
new file mode 100644
index 0000000..84b22d0
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param imageType
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue(
+
+  @field:JsonProperty("id")
+  val id: java.math.BigDecimal,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200Response.kt
new file mode 100644
index 0000000..45110c4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param templates
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplates200Response(
+
+  @field:JsonProperty("templates")
+  val templates: kotlin.collections.Set<GetMealPlanTemplates200ResponseTemplatesInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200ResponseTemplatesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200ResponseTemplatesInner.kt
new file mode 100644
index 0000000..b38061e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanTemplates200ResponseTemplatesInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanTemplates200ResponseTemplatesInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200Response.kt
new file mode 100644
index 0000000..c0c4382
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param days
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200Response(
+
+  @field:JsonProperty("days")
+  val days: kotlin.collections.Set<GetMealPlanWeek200ResponseDaysInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInner.kt
new file mode 100644
index 0000000..0930367
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInner.kt
@@ -0,0 +1,56 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param date
+ * @param day
+ * @param nutritionSummary
+ * @param nutritionSummaryBreakfast
+ * @param nutritionSummaryLunch
+ * @param nutritionSummaryDinner
+ * @param items
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200ResponseDaysInner(
+
+  @field:JsonProperty("date")
+  val date: java.math.BigDecimal,
+
+  @field:JsonProperty("day")
+  val day: kotlin.String,
+
+  @field:JsonProperty("nutritionSummary")
+  val nutritionSummary: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryBreakfast")
+  val nutritionSummaryBreakfast: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryLunch")
+  val nutritionSummaryLunch: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("nutritionSummaryDinner")
+  val nutritionSummaryDinner: GetMealPlanWeek200ResponseDaysInnerNutritionSummary? = null,
+
+  @field:JsonProperty("items")
+  val items: kotlin.collections.Set<GetMealPlanWeek200ResponseDaysInnerItemsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInner.kt
new file mode 100644
index 0000000..04226c5
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param slot
+ * @param position
+ * @param type
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200ResponseDaysInnerItemsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("slot")
+  val slot: kotlin.Int,
+
+  @field:JsonProperty("position")
+  val position: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: GetMealPlanWeek200ResponseDaysInnerItemsInnerValue? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInnerValue.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInnerValue.kt
new file mode 100644
index 0000000..db40e6f
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerItemsInnerValue.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param servings
+ * @param id
+ * @param title
+ * @param imageType
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200ResponseDaysInnerItemsInnerValue(
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal,
+
+  @field:JsonProperty("id")
+  val id: java.math.BigDecimal,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummary.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummary.kt
new file mode 100644
index 0000000..19ae36f
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummary.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param nutrients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200ResponseDaysInnerNutritionSummary(
+
+  @field:JsonProperty("nutrients")
+  val nutrients: kotlin.collections.Set<GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner.kt
new file mode 100644
index 0000000..cb5d446
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param amount
+ * @param unit
+ * @param percentDailyNeeds
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("percentDailyNeeds")
+  val percentDailyNeeds: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRandomRecipes200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRandomRecipes200Response.kt
new file mode 100644
index 0000000..dc95701
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRandomRecipes200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param recipes
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRandomRecipes200Response(
+
+  @field:JsonProperty("recipes")
+  val recipes: kotlin.collections.Set<RecipeInformation>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200Response.kt
new file mode 100644
index 0000000..8e19e25
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param equipment
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeEquipmentByID200Response(
+
+  @field:JsonProperty("equipment")
+  val equipment: kotlin.collections.Set<GetRecipeEquipmentByID200ResponseEquipmentInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200ResponseEquipmentInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200ResponseEquipmentInner.kt
new file mode 100644
index 0000000..af1cd4a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeEquipmentByID200ResponseEquipmentInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param image
+ * @param name
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeEquipmentByID200ResponseEquipmentInner(
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200Response.kt
new file mode 100644
index 0000000..0190829
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeIngredientsByID200Response(
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<GetRecipeIngredientsByID200ResponseIngredientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200ResponseIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200ResponseIngredientsInner.kt
new file mode 100644
index 0000000..88c7d07
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeIngredientsByID200ResponseIngredientsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param image
+ * @param name
+ * @param amount
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeIngredientsByID200ResponseIngredientsInner(
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200Response.kt
new file mode 100644
index 0000000..de69cd7
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200Response.kt
@@ -0,0 +1,52 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param calories
+ * @param carbs
+ * @param fat
+ * @param protein
+ * @param bad
+ * @param good
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeNutritionWidgetByID200Response(
+
+  @field:JsonProperty("calories")
+  val calories: kotlin.String,
+
+  @field:JsonProperty("carbs")
+  val carbs: kotlin.String,
+
+  @field:JsonProperty("fat")
+  val fat: kotlin.String,
+
+  @field:JsonProperty("protein")
+  val protein: kotlin.String,
+
+  @field:JsonProperty("bad")
+  val bad: kotlin.collections.Set<GetRecipeNutritionWidgetByID200ResponseBadInner>,
+
+  @field:JsonProperty("good")
+  val good: kotlin.collections.Set<GetRecipeNutritionWidgetByID200ResponseGoodInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseBadInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseBadInner.kt
new file mode 100644
index 0000000..3935d0a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseBadInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param amount
+ * @param indented
+ * @param percentOfDailyNeeds
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeNutritionWidgetByID200ResponseBadInner(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: kotlin.String,
+
+  @field:JsonProperty("indented")
+  val indented: kotlin.Boolean,
+
+  @field:JsonProperty("percentOfDailyNeeds")
+  val percentOfDailyNeeds: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseGoodInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseGoodInner.kt
new file mode 100644
index 0000000..8c8fc43
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipeNutritionWidgetByID200ResponseGoodInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param amount
+ * @param indented
+ * @param percentOfDailyNeeds
+ * @param title
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipeNutritionWidgetByID200ResponseGoodInner(
+
+  @field:JsonProperty("amount")
+  val amount: kotlin.String,
+
+  @field:JsonProperty("indented")
+  val indented: kotlin.Boolean,
+
+  @field:JsonProperty("percentOfDailyNeeds")
+  val percentOfDailyNeeds: java.math.BigDecimal,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200Response.kt
new file mode 100644
index 0000000..b327c7a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredients
+ * @param totalCost
+ * @param totalCostPerServing
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipePriceBreakdownByID200Response(
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.Set<GetRecipePriceBreakdownByID200ResponseIngredientsInner>,
+
+  @field:JsonProperty("totalCost")
+  val totalCost: java.math.BigDecimal,
+
+  @field:JsonProperty("totalCostPerServing")
+  val totalCostPerServing: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInner.kt
new file mode 100644
index 0000000..826eb9c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param image
+ * @param name
+ * @param price
+ * @param amount
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipePriceBreakdownByID200ResponseIngredientsInner(
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: java.math.BigDecimal,
+
+  @field:JsonProperty("amount")
+  val amount: GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount.kt
new file mode 100644
index 0000000..6862869
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param metric
+ * @param us
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount(
+
+  @field:JsonProperty("metric")
+  val metric: GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric,
+
+  @field:JsonProperty("us")
+  val us: GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric.kt
new file mode 100644
index 0000000..d56a7b5
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param unit
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric(
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200Response.kt
new file mode 100644
index 0000000..54ffac7
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param aisles
+ * @param cost
+ * @param startDate
+ * @param endDate
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetShoppingList200Response(
+
+  @field:JsonProperty("aisles")
+  val aisles: kotlin.collections.Set<GetShoppingList200ResponseAislesInner>,
+
+  @field:JsonProperty("cost")
+  val cost: java.math.BigDecimal,
+
+  @field:JsonProperty("startDate")
+  val startDate: java.math.BigDecimal,
+
+  @field:JsonProperty("endDate")
+  val endDate: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInner.kt
new file mode 100644
index 0000000..908f3c4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInner.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param aisle
+ * @param items
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetShoppingList200ResponseAislesInner(
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("items")
+  val items: kotlin.collections.Set<GetShoppingList200ResponseAislesInnerItemsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInner.kt
new file mode 100644
index 0000000..0afcc0c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInner.kt
@@ -0,0 +1,56 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param pantryItem
+ * @param aisle
+ * @param cost
+ * @param ingredientId
+ * @param measures
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetShoppingList200ResponseAislesInnerItemsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("pantryItem")
+  val pantryItem: kotlin.Boolean,
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("cost")
+  val cost: java.math.BigDecimal,
+
+  @field:JsonProperty("ingredientId")
+  val ingredientId: kotlin.Int,
+
+  @field:JsonProperty("measures")
+  val measures: GetShoppingList200ResponseAislesInnerItemsInnerMeasures? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasures.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasures.kt
new file mode 100644
index 0000000..730b93b
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasures.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param original
+ * @param metric
+ * @param us
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetShoppingList200ResponseAislesInnerItemsInnerMeasures(
+
+  @field:JsonProperty("original")
+  val original: GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal,
+
+  @field:JsonProperty("metric")
+  val metric: GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal,
+
+  @field:JsonProperty("us")
+  val us: GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal.kt
new file mode 100644
index 0000000..221f948
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param amount
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal(
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetSimilarRecipes200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetSimilarRecipes200ResponseInner.kt
new file mode 100644
index 0000000..0518e6a
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetSimilarRecipes200ResponseInner.kt
@@ -0,0 +1,52 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param imageType
+ * @param readyInMinutes
+ * @param servings
+ * @param sourceUrl
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetSimilarRecipes200ResponseInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("readyInMinutes")
+  val readyInMinutes: kotlin.Int,
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal,
+
+  @field:JsonProperty("sourceUrl")
+  val sourceUrl: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineDescription200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineDescription200Response.kt
new file mode 100644
index 0000000..2a793ec
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineDescription200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param wineDescription
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetWineDescription200Response(
+
+  @field:JsonProperty("wineDescription")
+  val wineDescription: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200Response.kt
new file mode 100644
index 0000000..bee17a5
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param pairedWines
+ * @param pairingText
+ * @param productMatches
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetWinePairing200Response(
+
+  @field:JsonProperty("pairedWines")
+  val pairedWines: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("pairingText")
+  val pairingText: kotlin.String,
+
+  @field:JsonProperty("productMatches")
+  val productMatches: kotlin.collections.Set<GetWinePairing200ResponseProductMatchesInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200ResponseProductMatchesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200ResponseProductMatchesInner.kt
new file mode 100644
index 0000000..b768198
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWinePairing200ResponseProductMatchesInner.kt
@@ -0,0 +1,64 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param averageRating
+ * @param imageUrl
+ * @param link
+ * @param price
+ * @param ratingCount
+ * @param score
+ * @param description
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetWinePairing200ResponseProductMatchesInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("averageRating")
+  val averageRating: java.math.BigDecimal,
+
+  @field:JsonProperty("imageUrl")
+  val imageUrl: kotlin.String,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: kotlin.String,
+
+  @field:JsonProperty("ratingCount")
+  val ratingCount: kotlin.Int,
+
+  @field:JsonProperty("score")
+  val score: java.math.BigDecimal,
+
+  @field:JsonProperty("description")
+  val description: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200Response.kt
new file mode 100644
index 0000000..e29c768
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param recommendedWines
+ * @param totalFound
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetWineRecommendation200Response(
+
+  @field:JsonProperty("recommendedWines")
+  val recommendedWines: kotlin.collections.Set<GetWineRecommendation200ResponseRecommendedWinesInner>,
+
+  @field:JsonProperty("totalFound")
+  val totalFound: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200ResponseRecommendedWinesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200ResponseRecommendedWinesInner.kt
new file mode 100644
index 0000000..591c76e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GetWineRecommendation200ResponseRecommendedWinesInner.kt
@@ -0,0 +1,64 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param averageRating
+ * @param description
+ * @param imageUrl
+ * @param link
+ * @param price
+ * @param ratingCount
+ * @param score
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GetWineRecommendation200ResponseRecommendedWinesInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("averageRating")
+  val averageRating: java.math.BigDecimal,
+
+  @field:JsonProperty("description")
+  val description: kotlin.String,
+
+  @field:JsonProperty("imageUrl")
+  val imageUrl: kotlin.String,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: kotlin.String,
+
+  @field:JsonProperty("ratingCount")
+  val ratingCount: kotlin.Int,
+
+  @field:JsonProperty("score")
+  val score: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200Response.kt
new file mode 100644
index 0000000..c35f755
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param calories
+ * @param carbs
+ * @param fat
+ * @param protein
+ * @param recipesUsed
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GuessNutritionByDishName200Response(
+
+  @field:JsonProperty("calories")
+  val calories: GuessNutritionByDishName200ResponseCalories,
+
+  @field:JsonProperty("carbs")
+  val carbs: GuessNutritionByDishName200ResponseCalories,
+
+  @field:JsonProperty("fat")
+  val fat: GuessNutritionByDishName200ResponseCalories,
+
+  @field:JsonProperty("protein")
+  val protein: GuessNutritionByDishName200ResponseCalories,
+
+  @field:JsonProperty("recipesUsed")
+  val recipesUsed: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCalories.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCalories.kt
new file mode 100644
index 0000000..77ad945
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCalories.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param confidenceRange95Percent
+ * @param standardDeviation
+ * @param unit
+ * @param `value`
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GuessNutritionByDishName200ResponseCalories(
+
+  @field:JsonProperty("confidenceRange95Percent")
+  val confidenceRange95Percent: GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent,
+
+  @field:JsonProperty("standardDeviation")
+  val standardDeviation: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("value")
+  val `value`: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent.kt
new file mode 100644
index 0000000..bd9371c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param max
+ * @param min
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent(
+
+  @field:JsonProperty("max")
+  val max: java.math.BigDecimal,
+
+  @field:JsonProperty("min")
+  val min: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200Response.kt
new file mode 100644
index 0000000..fc19afa
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param nutrition
+ * @param category
+ * @param recipes
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200Response(
+
+  @field:JsonProperty("nutrition")
+  val nutrition: ImageAnalysisByURL200ResponseNutrition,
+
+  @field:JsonProperty("category")
+  val category: ImageAnalysisByURL200ResponseCategory,
+
+  @field:JsonProperty("recipes")
+  val recipes: kotlin.collections.Set<ImageAnalysisByURL200ResponseRecipesInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseCategory.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseCategory.kt
new file mode 100644
index 0000000..b8cc212
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseCategory.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param probability
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200ResponseCategory(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("probability")
+  val probability: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutrition.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutrition.kt
new file mode 100644
index 0000000..65f6191
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutrition.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param recipesUsed
+ * @param calories
+ * @param fat
+ * @param protein
+ * @param carbs
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200ResponseNutrition(
+
+  @field:JsonProperty("recipesUsed")
+  val recipesUsed: kotlin.Int,
+
+  @field:JsonProperty("calories")
+  val calories: ImageAnalysisByURL200ResponseNutritionCalories,
+
+  @field:JsonProperty("fat")
+  val fat: ImageAnalysisByURL200ResponseNutritionCalories,
+
+  @field:JsonProperty("protein")
+  val protein: ImageAnalysisByURL200ResponseNutritionCalories,
+
+  @field:JsonProperty("carbs")
+  val carbs: ImageAnalysisByURL200ResponseNutritionCalories
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCalories.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCalories.kt
new file mode 100644
index 0000000..3167b79
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCalories.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param `value`
+ * @param unit
+ * @param confidenceRange95Percent
+ * @param standardDeviation
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200ResponseNutritionCalories(
+
+  @field:JsonProperty("value")
+  val `value`: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("confidenceRange95Percent")
+  val confidenceRange95Percent: ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent,
+
+  @field:JsonProperty("standardDeviation")
+  val standardDeviation: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent.kt
new file mode 100644
index 0000000..8620cf8
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param min
+ * @param max
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent(
+
+  @field:JsonProperty("min")
+  val min: java.math.BigDecimal,
+
+  @field:JsonProperty("max")
+  val max: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseRecipesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseRecipesInner.kt
new file mode 100644
index 0000000..b8e8feb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageAnalysisByURL200ResponseRecipesInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param imageType
+ * @param url
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageAnalysisByURL200ResponseRecipesInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("url")
+  val url: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageClassificationByURL200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageClassificationByURL200Response.kt
new file mode 100644
index 0000000..a119dec
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ImageClassificationByURL200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param category
+ * @param probability
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ImageClassificationByURL200Response(
+
+  @field:JsonProperty("category")
+  val category: kotlin.String,
+
+  @field:JsonProperty("probability")
+  val probability: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientBasics.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientBasics.kt
new file mode 100644
index 0000000..b1e55e2
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientBasics.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param description
+ * @param name
+ * @param safetyLevel
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientBasics(
+
+  @field:JsonProperty("description")
+  val description: kotlin.String?,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("safety_level")
+  val safetyLevel: kotlin.String?
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformation.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformation.kt
new file mode 100644
index 0000000..141b66c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformation.kt
@@ -0,0 +1,96 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param original
+ * @param originalName
+ * @param name
+ * @param amount
+ * @param unit
+ * @param unitShort
+ * @param unitLong
+ * @param possibleUnits
+ * @param estimatedCost
+ * @param consistency
+ * @param aisle
+ * @param image
+ * @param meta
+ * @param shoppingListUnits
+ * @param nutrition
+ * @param categoryPath
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientInformation(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("original")
+  val original: kotlin.String,
+
+  @field:JsonProperty("originalName")
+  val originalName: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("unitShort")
+  val unitShort: kotlin.String,
+
+  @field:JsonProperty("unitLong")
+  val unitLong: kotlin.String,
+
+  @field:JsonProperty("possibleUnits")
+  val possibleUnits: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("estimatedCost")
+  val estimatedCost: IngredientInformationEstimatedCost,
+
+  @field:JsonProperty("consistency")
+  val consistency: kotlin.String,
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("meta")
+  val meta: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("shoppingListUnits")
+  val shoppingListUnits: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("nutrition")
+  val nutrition: IngredientInformationNutrition? = null,
+
+  @field:JsonProperty("categoryPath")
+  val categoryPath: kotlin.collections.List<kotlin.String>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationEstimatedCost.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationEstimatedCost.kt
new file mode 100644
index 0000000..5ce5110
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationEstimatedCost.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param `value`
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientInformationEstimatedCost(
+
+  @field:JsonProperty("value")
+  val `value`: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutrition.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutrition.kt
new file mode 100644
index 0000000..50b3fd4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutrition.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param nutrients
+ * @param properties
+ * @param caloricBreakdown
+ * @param weightPerServing
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientInformationNutrition(
+
+  @field:JsonProperty("nutrients")
+  val nutrients: kotlin.collections.Set<SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner>,
+
+  @field:JsonProperty("properties")
+  val properties: kotlin.collections.Set<IngredientInformationNutritionPropertiesInner>,
+
+  @field:JsonProperty("caloricBreakdown")
+  val caloricBreakdown: SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown,
+
+  @field:JsonProperty("weightPerServing")
+  val weightPerServing: GetShoppingList200ResponseAislesInnerItemsInnerMeasuresOriginal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutritionPropertiesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutritionPropertiesInner.kt
new file mode 100644
index 0000000..fe8a37d
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientInformationNutritionPropertiesInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param amount
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientInformationNutritionPropertiesInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200Response.kt
new file mode 100644
index 0000000..36236cb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param results
+ * @param offset
+ * @param number
+ * @param totalResults
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientSearch200Response(
+
+  @field:JsonProperty("results")
+  val results: kotlin.collections.Set<IngredientSearch200ResponseResultsInner>,
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("number")
+  val number: kotlin.Int,
+
+  @field:JsonProperty("totalResults")
+  val totalResults: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200ResponseResultsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200ResponseResultsInner.kt
new file mode 100644
index 0000000..d9626cb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/IngredientSearch200ResponseResultsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param image
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class IngredientSearch200ResponseResultsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInner.kt
new file mode 100644
index 0000000..7afe5bd
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param original
+ * @param originalName
+ * @param ingredientImage
+ * @param meta
+ * @param products
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class MapIngredientsToGroceryProducts200ResponseInner(
+
+  @field:JsonProperty("original")
+  val original: kotlin.String,
+
+  @field:JsonProperty("originalName")
+  val originalName: kotlin.String,
+
+  @field:JsonProperty("ingredientImage")
+  val ingredientImage: kotlin.String,
+
+  @field:JsonProperty("meta")
+  val meta: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("products")
+  val products: kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInnerProductsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInnerProductsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInnerProductsInner.kt
new file mode 100644
index 0000000..6336f53
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProducts200ResponseInnerProductsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param upc
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class MapIngredientsToGroceryProducts200ResponseInnerProductsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("upc")
+  val upc: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProductsRequest.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProductsRequest.kt
new file mode 100644
index 0000000..3e3406d
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MapIngredientsToGroceryProductsRequest.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param ingredients
+ * @param servings
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class MapIngredientsToGroceryProductsRequest(
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItem.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItem.kt
new file mode 100644
index 0000000..781b89e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItem.kt
@@ -0,0 +1,76 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param restaurantChain
+ * @param price
+ * @param spoonacularScore
+ * @param nutrition
+ * @param badges
+ * @param breadcrumbs
+ * @param generatedText
+ * @param imageType
+ * @param likes
+ * @param servings
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class MenuItem(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("restaurantChain")
+  val restaurantChain: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: java.math.BigDecimal?,
+
+  @field:JsonProperty("spoonacularScore")
+  val spoonacularScore: java.math.BigDecimal?,
+
+  @field:JsonProperty("nutrition")
+  val nutrition: SearchGroceryProductsByUPC200ResponseNutrition? = null,
+
+  @field:JsonProperty("badges")
+  val badges: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("breadcrumbs")
+  val breadcrumbs: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("generatedText")
+  val generatedText: kotlin.String? = null,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String? = null,
+
+  @field:JsonProperty("likes")
+  val likes: kotlin.Int? = null,
+
+  @field:JsonProperty("servings")
+  val servings: MenuItemServings? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItemServings.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItemServings.kt
new file mode 100644
index 0000000..bed59e8
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/MenuItemServings.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param number
+ * @param propertySize
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class MenuItemServings(
+
+  @field:JsonProperty("number")
+  val number: java.math.BigDecimal,
+
+  @field:JsonProperty("size")
+  val propertySize: java.math.BigDecimal?,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String?
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformation.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformation.kt
new file mode 100644
index 0000000..2bc30cb
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformation.kt
@@ -0,0 +1,104 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param breadcrumbs
+ * @param imageType
+ * @param badges
+ * @param importantBadges
+ * @param ingredientCount
+ * @param ingredientList
+ * @param ingredients
+ * @param likes
+ * @param aisle
+ * @param nutrition
+ * @param price
+ * @param servings
+ * @param spoonacularScore
+ * @param upc
+ * @param usdaCode
+ * @param generatedText
+ * @param credits
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ProductInformation(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("breadcrumbs")
+  val breadcrumbs: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("badges")
+  val badges: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("importantBadges")
+  val importantBadges: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("ingredientCount")
+  val ingredientCount: kotlin.Int,
+
+  @field:JsonProperty("ingredientList")
+  val ingredientList: kotlin.String,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.List<IngredientBasics>,
+
+  @field:JsonProperty("likes")
+  val likes: java.math.BigDecimal,
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String?,
+
+  @field:JsonProperty("nutrition")
+  val nutrition: SearchGroceryProductsByUPC200ResponseNutrition,
+
+  @field:JsonProperty("price")
+  val price: java.math.BigDecimal,
+
+  @field:JsonProperty("servings")
+  val servings: SearchGroceryProductsByUPC200ResponseServings,
+
+  @field:JsonProperty("spoonacularScore")
+  val spoonacularScore: java.math.BigDecimal,
+
+  @field:JsonProperty("upc")
+  val upc: kotlin.String? = null,
+
+  @field:JsonProperty("usdaCode")
+  val usdaCode: kotlin.String? = null,
+
+  @field:JsonProperty("generatedText")
+  val generatedText: kotlin.String? = null,
+
+  @field:JsonProperty("credits")
+  val credits: ProductInformationCredits? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformationCredits.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformationCredits.kt
new file mode 100644
index 0000000..6291fcf
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/ProductInformationCredits.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param text
+ * @param link
+ * @param image
+ * @param imageLink
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class ProductInformationCredits(
+
+  @field:JsonProperty("text")
+  val text: kotlin.String? = null,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String? = null,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String? = null,
+
+  @field:JsonProperty("imageLink")
+  val imageLink: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/QuickAnswer200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/QuickAnswer200Response.kt
new file mode 100644
index 0000000..d80b556
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/QuickAnswer200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param answer
+ * @param image
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class QuickAnswer200Response(
+
+  @field:JsonProperty("answer")
+  val answer: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformation.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformation.kt
new file mode 100644
index 0000000..9ba7f88
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformation.kt
@@ -0,0 +1,180 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param image
+ * @param servings
+ * @param readyInMinutes
+ * @param sourceName
+ * @param sourceUrl
+ * @param spoonacularSourceUrl
+ * @param aggregateLikes
+ * @param healthScore
+ * @param spoonacularScore
+ * @param pricePerServing
+ * @param analyzedInstructions
+ * @param cheap
+ * @param creditsText
+ * @param cuisines
+ * @param dairyFree
+ * @param diets
+ * @param gaps
+ * @param glutenFree
+ * @param instructions
+ * @param lowFodmap
+ * @param occasions
+ * @param sustainable
+ * @param vegan
+ * @param vegetarian
+ * @param veryHealthy
+ * @param veryPopular
+ * @param weightWatcherSmartPoints
+ * @param dishTypes
+ * @param extendedIngredients
+ * @param summary
+ * @param imageType
+ * @param preparationMinutes
+ * @param cookingMinutes
+ * @param license
+ * @param winePairing
+ * @param taste
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformation(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String?,
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal,
+
+  @field:JsonProperty("readyInMinutes")
+  val readyInMinutes: kotlin.Int,
+
+  @field:JsonProperty("sourceName")
+  val sourceName: kotlin.String,
+
+  @field:JsonProperty("sourceUrl")
+  val sourceUrl: kotlin.String,
+
+  @field:JsonProperty("spoonacularSourceUrl")
+  val spoonacularSourceUrl: kotlin.String,
+
+  @field:JsonProperty("aggregateLikes")
+  val aggregateLikes: kotlin.Int,
+
+  @field:JsonProperty("healthScore")
+  val healthScore: java.math.BigDecimal,
+
+  @field:JsonProperty("spoonacularScore")
+  val spoonacularScore: java.math.BigDecimal,
+
+  @field:JsonProperty("pricePerServing")
+  val pricePerServing: java.math.BigDecimal,
+
+  @field:JsonProperty("analyzedInstructions")
+  val analyzedInstructions: kotlin.collections.List<kotlin.Any>,
+
+  @field:JsonProperty("cheap")
+  val cheap: kotlin.Boolean,
+
+  @field:JsonProperty("creditsText")
+  val creditsText: kotlin.String,
+
+  @field:JsonProperty("cuisines")
+  val cuisines: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("dairyFree")
+  val dairyFree: kotlin.Boolean,
+
+  @field:JsonProperty("diets")
+  val diets: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("gaps")
+  val gaps: kotlin.String,
+
+  @field:JsonProperty("glutenFree")
+  val glutenFree: kotlin.Boolean,
+
+  @field:JsonProperty("instructions")
+  val instructions: kotlin.String?,
+
+  @field:JsonProperty("lowFodmap")
+  val lowFodmap: kotlin.Boolean,
+
+  @field:JsonProperty("occasions")
+  val occasions: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("sustainable")
+  val sustainable: kotlin.Boolean,
+
+  @field:JsonProperty("vegan")
+  val vegan: kotlin.Boolean,
+
+  @field:JsonProperty("vegetarian")
+  val vegetarian: kotlin.Boolean,
+
+  @field:JsonProperty("veryHealthy")
+  val veryHealthy: kotlin.Boolean,
+
+  @field:JsonProperty("veryPopular")
+  val veryPopular: kotlin.Boolean,
+
+  @field:JsonProperty("weightWatcherSmartPoints")
+  val weightWatcherSmartPoints: java.math.BigDecimal,
+
+  @field:JsonProperty("dishTypes")
+  val dishTypes: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("extendedIngredients")
+  val extendedIngredients: kotlin.collections.Set<RecipeInformationExtendedIngredientsInner>,
+
+  @field:JsonProperty("summary")
+  val summary: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String? = null,
+
+  @field:JsonProperty("preparationMinutes")
+  val preparationMinutes: kotlin.Int? = null,
+
+  @field:JsonProperty("cookingMinutes")
+  val cookingMinutes: kotlin.Int? = null,
+
+  @field:JsonProperty("license")
+  val license: kotlin.String? = null,
+
+  @field:JsonProperty("winePairing")
+  val winePairing: RecipeInformationWinePairing? = null,
+
+  @field:JsonProperty("taste")
+  val taste: TasteInformation? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInner.kt
new file mode 100644
index 0000000..c76949e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInner.kt
@@ -0,0 +1,72 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param aisle
+ * @param amount
+ * @param consistency
+ * @param id
+ * @param image
+ * @param name
+ * @param original
+ * @param originalName
+ * @param unit
+ * @param measures
+ * @param meta
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformationExtendedIngredientsInner(
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("consistency")
+  val consistency: kotlin.String,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("original")
+  val original: kotlin.String,
+
+  @field:JsonProperty("originalName")
+  val originalName: kotlin.String,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("measures")
+  val measures: RecipeInformationExtendedIngredientsInnerMeasures? = null,
+
+  @field:JsonProperty("meta")
+  val meta: kotlin.collections.List<kotlin.String>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasures.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasures.kt
new file mode 100644
index 0000000..17da883
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasures.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param metric
+ * @param us
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformationExtendedIngredientsInnerMeasures(
+
+  @field:JsonProperty("metric")
+  val metric: RecipeInformationExtendedIngredientsInnerMeasuresMetric,
+
+  @field:JsonProperty("us")
+  val us: RecipeInformationExtendedIngredientsInnerMeasuresMetric
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasuresMetric.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasuresMetric.kt
new file mode 100644
index 0000000..6c6f5c1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationExtendedIngredientsInnerMeasuresMetric.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param amount
+ * @param unitLong
+ * @param unitShort
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformationExtendedIngredientsInnerMeasuresMetric(
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unitLong")
+  val unitLong: kotlin.String,
+
+  @field:JsonProperty("unitShort")
+  val unitShort: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairing.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairing.kt
new file mode 100644
index 0000000..d58239e
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairing.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param pairedWines
+ * @param pairingText
+ * @param productMatches
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformationWinePairing(
+
+  @field:JsonProperty("pairedWines")
+  val pairedWines: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("pairingText")
+  val pairingText: kotlin.String? = null,
+
+  @field:JsonProperty("productMatches")
+  val productMatches: kotlin.collections.Set<RecipeInformationWinePairingProductMatchesInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairingProductMatchesInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairingProductMatchesInner.kt
new file mode 100644
index 0000000..bce8f3d
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/RecipeInformationWinePairingProductMatchesInner.kt
@@ -0,0 +1,64 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param description
+ * @param price
+ * @param imageUrl
+ * @param averageRating
+ * @param ratingCount
+ * @param score
+ * @param link
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class RecipeInformationWinePairingProductMatchesInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("description")
+  val description: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: kotlin.String,
+
+  @field:JsonProperty("imageUrl")
+  val imageUrl: kotlin.String,
+
+  @field:JsonProperty("averageRating")
+  val averageRating: java.math.BigDecimal,
+
+  @field:JsonProperty("ratingCount")
+  val ratingCount: kotlin.Int,
+
+  @field:JsonProperty("score")
+  val score: java.math.BigDecimal,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200Response.kt
new file mode 100644
index 0000000..b25a183
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param query
+ * @param totalResults
+ * @param limit
+ * @param offset
+ * @param searchResults
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchAllFood200Response(
+
+  @field:JsonProperty("query")
+  val query: kotlin.String,
+
+  @field:JsonProperty("totalResults")
+  val totalResults: kotlin.Int,
+
+  @field:JsonProperty("limit")
+  val limit: kotlin.Int,
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("searchResults")
+  val searchResults: kotlin.collections.Set<SearchAllFood200ResponseSearchResultsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200ResponseSearchResultsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200ResponseSearchResultsInner.kt
new file mode 100644
index 0000000..1b53165
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchAllFood200ResponseSearchResultsInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param totalResults
+ * @param results
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchAllFood200ResponseSearchResultsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("totalResults")
+  val totalResults: kotlin.Int,
+
+  @field:JsonProperty("results")
+  val results: kotlin.collections.Set<SearchResult>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200Response.kt
new file mode 100644
index 0000000..2b6467d
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param customFoods
+ * @param type
+ * @param offset
+ * @param number
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchCustomFoods200Response(
+
+  @field:JsonProperty("customFoods")
+  val customFoods: kotlin.collections.Set<SearchCustomFoods200ResponseCustomFoodsInner>,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("number")
+  val number: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200ResponseCustomFoodsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200ResponseCustomFoodsInner.kt
new file mode 100644
index 0000000..1af3af1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchCustomFoods200ResponseCustomFoodsInner.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param servings
+ * @param imageUrl
+ * @param price
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchCustomFoods200ResponseCustomFoodsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("servings")
+  val servings: java.math.BigDecimal,
+
+  @field:JsonProperty("imageUrl")
+  val imageUrl: kotlin.String,
+
+  @field:JsonProperty("price")
+  val price: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200Response.kt
new file mode 100644
index 0000000..a53d4a6
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param videos
+ * @param totalResults
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchFoodVideos200Response(
+
+  @field:JsonProperty("videos")
+  val videos: kotlin.collections.Set<SearchFoodVideos200ResponseVideosInner>,
+
+  @field:JsonProperty("totalResults")
+  val totalResults: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200ResponseVideosInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200ResponseVideosInner.kt
new file mode 100644
index 0000000..1aabf83
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchFoodVideos200ResponseVideosInner.kt
@@ -0,0 +1,56 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param length
+ * @param rating
+ * @param shortTitle
+ * @param thumbnail
+ * @param views
+ * @param youTubeId
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchFoodVideos200ResponseVideosInner(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("length")
+  val length: kotlin.Int,
+
+  @field:JsonProperty("rating")
+  val rating: java.math.BigDecimal,
+
+  @field:JsonProperty("shortTitle")
+  val shortTitle: kotlin.String,
+
+  @field:JsonProperty("thumbnail")
+  val thumbnail: kotlin.String,
+
+  @field:JsonProperty("views")
+  val views: kotlin.Int,
+
+  @field:JsonProperty("youTubeId")
+  val youTubeId: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProducts200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProducts200Response.kt
new file mode 100644
index 0000000..33833d1
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProducts200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param products
+ * @param totalProducts
+ * @param type
+ * @param offset
+ * @param number
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProducts200Response(
+
+  @field:JsonProperty("products")
+  val products: kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>,
+
+  @field:JsonProperty("totalProducts")
+  val totalProducts: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("number")
+  val number: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200Response.kt
new file mode 100644
index 0000000..5337662
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200Response.kt
@@ -0,0 +1,88 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param badges
+ * @param importantBadges
+ * @param breadcrumbs
+ * @param generatedText
+ * @param imageType
+ * @param ingredientList
+ * @param ingredients
+ * @param likes
+ * @param nutrition
+ * @param price
+ * @param servings
+ * @param spoonacularScore
+ * @param ingredientCount
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProductsByUPC200Response(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("badges")
+  val badges: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("importantBadges")
+  val importantBadges: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("breadcrumbs")
+  val breadcrumbs: kotlin.collections.List<kotlin.String>,
+
+  @field:JsonProperty("generatedText")
+  val generatedText: kotlin.String?,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("ingredientList")
+  val ingredientList: kotlin.String,
+
+  @field:JsonProperty("ingredients")
+  val ingredients: kotlin.collections.List<IngredientBasics>,
+
+  @field:JsonProperty("likes")
+  val likes: java.math.BigDecimal,
+
+  @field:JsonProperty("nutrition")
+  val nutrition: SearchGroceryProductsByUPC200ResponseNutrition,
+
+  @field:JsonProperty("price")
+  val price: java.math.BigDecimal,
+
+  @field:JsonProperty("servings")
+  val servings: SearchGroceryProductsByUPC200ResponseServings,
+
+  @field:JsonProperty("spoonacularScore")
+  val spoonacularScore: java.math.BigDecimal,
+
+  @field:JsonProperty("ingredientCount")
+  val ingredientCount: kotlin.Int? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutrition.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutrition.kt
new file mode 100644
index 0000000..4344ba3
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutrition.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param nutrients
+ * @param caloricBreakdown
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProductsByUPC200ResponseNutrition(
+
+  @field:JsonProperty("nutrients")
+  val nutrients: kotlin.collections.Set<SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner>,
+
+  @field:JsonProperty("caloricBreakdown")
+  val caloricBreakdown: SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown.kt
new file mode 100644
index 0000000..a4a2273
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param percentProtein
+ * @param percentFat
+ * @param percentCarbs
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProductsByUPC200ResponseNutritionCaloricBreakdown(
+
+  @field:JsonProperty("percentProtein")
+  val percentProtein: java.math.BigDecimal,
+
+  @field:JsonProperty("percentFat")
+  val percentFat: java.math.BigDecimal,
+
+  @field:JsonProperty("percentCarbs")
+  val percentCarbs: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner.kt
new file mode 100644
index 0000000..1775ee4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param amount
+ * @param unit
+ * @param percentOfDailyNeeds
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProductsByUPC200ResponseNutritionNutrientsInner(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("percentOfDailyNeeds")
+  val percentOfDailyNeeds: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseServings.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseServings.kt
new file mode 100644
index 0000000..1cccef4
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchGroceryProductsByUPC200ResponseServings.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param number
+ * @param propertySize
+ * @param unit
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchGroceryProductsByUPC200ResponseServings(
+
+  @field:JsonProperty("number")
+  val number: java.math.BigDecimal,
+
+  @field:JsonProperty("size")
+  val propertySize: java.math.BigDecimal,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchMenuItems200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchMenuItems200Response.kt
new file mode 100644
index 0000000..0a7f205
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchMenuItems200Response.kt
@@ -0,0 +1,48 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param menuItems
+ * @param totalMenuItems
+ * @param type
+ * @param offset
+ * @param number
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchMenuItems200Response(
+
+  @field:JsonProperty("menuItems")
+  val menuItems: kotlin.collections.Set<MenuItem>,
+
+  @field:JsonProperty("totalMenuItems")
+  val totalMenuItems: kotlin.Int,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String,
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("number")
+  val number: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200Response.kt
new file mode 100644
index 0000000..976819b
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param offset
+ * @param number
+ * @param results
+ * @param totalResults
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRecipes200Response(
+
+  @field:JsonProperty("offset")
+  val offset: kotlin.Int,
+
+  @field:JsonProperty("number")
+  val number: kotlin.Int,
+
+  @field:JsonProperty("results")
+  val results: kotlin.collections.Set<SearchRecipes200ResponseResultsInner>,
+
+  @field:JsonProperty("totalResults")
+  val totalResults: kotlin.Int
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200ResponseResultsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200ResponseResultsInner.kt
new file mode 100644
index 0000000..335baf7
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipes200ResponseResultsInner.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param title
+ * @param image
+ * @param imageType
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRecipes200ResponseResultsInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInner.kt
new file mode 100644
index 0000000..e2acb21
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInner.kt
@@ -0,0 +1,68 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param image
+ * @param imageType
+ * @param likes
+ * @param missedIngredientCount
+ * @param missedIngredients
+ * @param title
+ * @param unusedIngredients
+ * @param usedIngredientCount
+ * @param usedIngredients
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRecipesByIngredients200ResponseInner(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("likes")
+  val likes: kotlin.Int,
+
+  @field:JsonProperty("missedIngredientCount")
+  val missedIngredientCount: kotlin.Int,
+
+  @field:JsonProperty("missedIngredients")
+  val missedIngredients: kotlin.collections.Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String,
+
+  @field:JsonProperty("unusedIngredients")
+  val unusedIngredients: kotlin.collections.List<kotlin.Any>,
+
+  @field:JsonProperty("usedIngredientCount")
+  val usedIngredientCount: java.math.BigDecimal,
+
+  @field:JsonProperty("usedIngredients")
+  val usedIngredients: kotlin.collections.Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.kt
new file mode 100644
index 0000000..68b0df9
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.kt
@@ -0,0 +1,76 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param aisle
+ * @param amount
+ * @param id
+ * @param image
+ * @param name
+ * @param original
+ * @param originalName
+ * @param unit
+ * @param unitLong
+ * @param unitShort
+ * @param meta
+ * @param extendedName
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner(
+
+  @field:JsonProperty("aisle")
+  val aisle: kotlin.String,
+
+  @field:JsonProperty("amount")
+  val amount: java.math.BigDecimal,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("original")
+  val original: kotlin.String,
+
+  @field:JsonProperty("originalName")
+  val originalName: kotlin.String,
+
+  @field:JsonProperty("unit")
+  val unit: kotlin.String,
+
+  @field:JsonProperty("unitLong")
+  val unitLong: kotlin.String,
+
+  @field:JsonProperty("unitShort")
+  val unitShort: kotlin.String,
+
+  @field:JsonProperty("meta")
+  val meta: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("extendedName")
+  val extendedName: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByNutrients200ResponseInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByNutrients200ResponseInner.kt
new file mode 100644
index 0000000..603adae
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRecipesByNutrients200ResponseInner.kt
@@ -0,0 +1,60 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param calories
+ * @param carbs
+ * @param fat
+ * @param id
+ * @param image
+ * @param imageType
+ * @param protein
+ * @param title
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRecipesByNutrients200ResponseInner(
+
+  @field:JsonProperty("calories")
+  val calories: java.math.BigDecimal,
+
+  @field:JsonProperty("carbs")
+  val carbs: kotlin.String,
+
+  @field:JsonProperty("fat")
+  val fat: kotlin.String,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String,
+
+  @field:JsonProperty("imageType")
+  val imageType: kotlin.String,
+
+  @field:JsonProperty("protein")
+  val protein: kotlin.String,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200Response.kt
new file mode 100644
index 0000000..8cf10e7
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200Response.kt
@@ -0,0 +1,32 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param restaurants
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRestaurants200Response(
+
+  @field:JsonProperty("restaurants")
+  val restaurants: kotlin.collections.List<SearchRestaurants200ResponseRestaurantsInner>? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInner.kt
new file mode 100644
index 0000000..e9c74cc
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInner.kt
@@ -0,0 +1,108 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param name
+ * @param phoneNumber
+ * @param address
+ * @param type
+ * @param description
+ * @param localHours
+ * @param cuisines
+ * @param foodPhotos
+ * @param logoPhotos
+ * @param storePhotos
+ * @param dollarSigns
+ * @param pickupEnabled
+ * @param deliveryEnabled
+ * @param isOpen
+ * @param offersFirstPartyDelivery
+ * @param offersThirdPartyDelivery
+ * @param miles
+ * @param weightedRatingValue
+ * @param aggregatedRatingCount
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRestaurants200ResponseRestaurantsInner(
+
+  @field:JsonProperty("_id")
+  val id: kotlin.String? = null,
+
+  @field:JsonProperty("name")
+  val name: kotlin.String? = null,
+
+  @field:JsonProperty("phone_number")
+  val phoneNumber: kotlin.Int? = null,
+
+  @field:JsonProperty("address")
+  val address: SearchRestaurants200ResponseRestaurantsInnerAddress? = null,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String? = null,
+
+  @field:JsonProperty("description")
+  val description: kotlin.String? = null,
+
+  @field:JsonProperty("local_hours")
+  val localHours: SearchRestaurants200ResponseRestaurantsInnerLocalHours? = null,
+
+  @field:JsonProperty("cuisines")
+  val cuisines: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("food_photos")
+  val foodPhotos: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("logo_photos")
+  val logoPhotos: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("store_photos")
+  val storePhotos: kotlin.collections.List<kotlin.String>? = null,
+
+  @field:JsonProperty("dollar_signs")
+  val dollarSigns: kotlin.Int? = null,
+
+  @field:JsonProperty("pickup_enabled")
+  val pickupEnabled: kotlin.Boolean? = null,
+
+  @field:JsonProperty("delivery_enabled")
+  val deliveryEnabled: kotlin.Boolean? = null,
+
+  @field:JsonProperty("is_open")
+  val isOpen: kotlin.Boolean? = null,
+
+  @field:JsonProperty("offers_first_party_delivery")
+  val offersFirstPartyDelivery: kotlin.Boolean? = null,
+
+  @field:JsonProperty("offers_third_party_delivery")
+  val offersThirdPartyDelivery: kotlin.Boolean? = null,
+
+  @field:JsonProperty("miles")
+  val miles: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("weighted_rating_value")
+  val weightedRatingValue: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("aggregated_rating_count")
+  val aggregatedRatingCount: kotlin.Int? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerAddress.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerAddress.kt
new file mode 100644
index 0000000..48acec3
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerAddress.kt
@@ -0,0 +1,68 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param streetAddr
+ * @param city
+ * @param state
+ * @param zipcode
+ * @param country
+ * @param lat
+ * @param lon
+ * @param streetAddr2
+ * @param latitude
+ * @param longitude
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRestaurants200ResponseRestaurantsInnerAddress(
+
+  @field:JsonProperty("street_addr")
+  val streetAddr: kotlin.String? = null,
+
+  @field:JsonProperty("city")
+  val city: kotlin.String? = null,
+
+  @field:JsonProperty("state")
+  val state: kotlin.String? = null,
+
+  @field:JsonProperty("zipcode")
+  val zipcode: kotlin.String? = null,
+
+  @field:JsonProperty("country")
+  val country: kotlin.String? = null,
+
+  @field:JsonProperty("lat")
+  val lat: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("lon")
+  val lon: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("street_addr_2")
+  val streetAddr2: kotlin.String? = null,
+
+  @field:JsonProperty("latitude")
+  val latitude: java.math.BigDecimal? = null,
+
+  @field:JsonProperty("longitude")
+  val longitude: java.math.BigDecimal? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHours.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHours.kt
new file mode 100644
index 0000000..569a93c
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHours.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param operational
+ * @param delivery
+ * @param pickup
+ * @param dineIn
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRestaurants200ResponseRestaurantsInnerLocalHours(
+
+  @field:JsonProperty("operational")
+  val operational: SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational? = null,
+
+  @field:JsonProperty("delivery")
+  val delivery: SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational? = null,
+
+  @field:JsonProperty("pickup")
+  val pickup: SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational? = null,
+
+  @field:JsonProperty("dine_in")
+  val dineIn: SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational.kt
new file mode 100644
index 0000000..6510278
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational.kt
@@ -0,0 +1,56 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param monday
+ * @param tuesday
+ * @param wednesday
+ * @param thursday
+ * @param friday
+ * @param saturday
+ * @param sunday
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational(
+
+  @field:JsonProperty("Monday")
+  val monday: kotlin.String? = null,
+
+  @field:JsonProperty("Tuesday")
+  val tuesday: kotlin.String? = null,
+
+  @field:JsonProperty("Wednesday")
+  val wednesday: kotlin.String? = null,
+
+  @field:JsonProperty("Thursday")
+  val thursday: kotlin.String? = null,
+
+  @field:JsonProperty("Friday")
+  val friday: kotlin.String? = null,
+
+  @field:JsonProperty("Saturday")
+  val saturday: kotlin.String? = null,
+
+  @field:JsonProperty("Sunday")
+  val sunday: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchResult.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchResult.kt
new file mode 100644
index 0000000..b5e0a13
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchResult.kt
@@ -0,0 +1,60 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param name
+ * @param image
+ * @param link
+ * @param type
+ * @param kvtable
+ * @param content
+ * @param id
+ * @param relevance
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchResult(
+
+  @field:JsonProperty("name")
+  val name: kotlin.String,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String? = null,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String? = null,
+
+  @field:JsonProperty("type")
+  val type: kotlin.String? = null,
+
+  @field:JsonProperty("kvtable")
+  val kvtable: kotlin.String? = null,
+
+  @field:JsonProperty("content")
+  val content: kotlin.String? = null,
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int? = null,
+
+  @field:JsonProperty("relevance")
+  val relevance: java.math.BigDecimal? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchSiteContent200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchSiteContent200Response.kt
new file mode 100644
index 0000000..fc54525
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SearchSiteContent200Response.kt
@@ -0,0 +1,44 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param articles
+ * @param groceryProducts
+ * @param menuItems
+ * @param recipes
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SearchSiteContent200Response(
+
+  @field:JsonProperty("Articles")
+  val articles: kotlin.collections.List<SearchResult>,
+
+  @field:JsonProperty("Grocery Products")
+  val groceryProducts: kotlin.collections.List<SearchResult>,
+
+  @field:JsonProperty("Menu Items")
+  val menuItems: kotlin.collections.List<SearchResult>,
+
+  @field:JsonProperty("Recipes")
+  val recipes: kotlin.collections.List<SearchResult>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SummarizeRecipe200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SummarizeRecipe200Response.kt
new file mode 100644
index 0000000..9f4a872
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/SummarizeRecipe200Response.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param id
+ * @param summary
+ * @param title
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class SummarizeRecipe200Response(
+
+  @field:JsonProperty("id")
+  val id: kotlin.Int,
+
+  @field:JsonProperty("summary")
+  val summary: kotlin.String,
+
+  @field:JsonProperty("title")
+  val title: kotlin.String
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200Response.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200Response.kt
new file mode 100644
index 0000000..d2f8c75
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200Response.kt
@@ -0,0 +1,36 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param answerText
+ * @param media
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class TalkToChatbot200Response(
+
+  @field:JsonProperty("answerText")
+  val answerText: kotlin.String,
+
+  @field:JsonProperty("media")
+  val media: kotlin.collections.List<TalkToChatbot200ResponseMediaInner>
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200ResponseMediaInner.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200ResponseMediaInner.kt
new file mode 100644
index 0000000..fb9b2da
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TalkToChatbot200ResponseMediaInner.kt
@@ -0,0 +1,40 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param title
+ * @param image
+ * @param link
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class TalkToChatbot200ResponseMediaInner(
+
+  @field:JsonProperty("title")
+  val title: kotlin.String? = null,
+
+  @field:JsonProperty("image")
+  val image: kotlin.String? = null,
+
+  @field:JsonProperty("link")
+  val link: kotlin.String? = null
+
+)
diff --git a/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TasteInformation.kt b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TasteInformation.kt
new file mode 100644
index 0000000..9eb0e42
--- /dev/null
+++ b/app/api-application/src/main/kotlin/com/dietfit/service/spoonacular/model/TasteInformation.kt
@@ -0,0 +1,56 @@
+/**
+ *
+ * Please note:
+ * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
+ * Do not edit this file manually.
+ *
+ */
+
+@file:Suppress(
+  "ArrayInDataClass",
+  "EnumEntryName",
+  "RemoveRedundantQualifierName",
+  "UnusedImport"
+)
+
+package com.dietfit.service.spoonacular.model
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+/**
+ *
+ *
+ * @param sweetness
+ * @param saltiness
+ * @param sourness
+ * @param bitterness
+ * @param savoriness
+ * @param fattiness
+ * @param spiciness
+ */
+
+@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
+data class TasteInformation(
+
+  @field:JsonProperty("sweetness")
+  val sweetness: java.math.BigDecimal,
+
+  @field:JsonProperty("saltiness")
+  val saltiness: java.math.BigDecimal,
+
+  @field:JsonProperty("sourness")
+  val sourness: java.math.BigDecimal,
+
+  @field:JsonProperty("bitterness")
+  val bitterness: java.math.BigDecimal,
+
+  @field:JsonProperty("savoriness")
+  val savoriness: java.math.BigDecimal,
+
+  @field:JsonProperty("fattiness")
+  val fattiness: java.math.BigDecimal,
+
+  @field:JsonProperty("spiciness")
+  val spiciness: java.math.BigDecimal
+
+)
diff --git a/app/api-application/src/main/resources/spoonacular-openapi-3.json b/app/api-application/src/main/resources/spoonacular-openapi-3.json
new file mode 100644
index 0000000..71fa7e3
--- /dev/null
+++ b/app/api-application/src/main/resources/spoonacular-openapi-3.json
@@ -0,0 +1,19151 @@
+{
+  "openapi": "3.0.0",
+  "info": {
+    "title": "spoonacular API",
+    "description": "The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.\n\nSpecial diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.",
+    "contact": {
+      "name": "David Urbansky",
+      "email": "mail@spoonacular.com",
+      "url": "https://spoonacular.com/contact"
+    },
+    "version": "2.0.2",
+    "x-codegen-settings": {
+      "Nullify404": false,
+      "GenerateAsyncCode": true,
+      "UseMethodPrefix": true,
+      "UseModelPostfix": false,
+      "UseControllerPrefix": true,
+      "UseEnumPostfix": true,
+      "CollectParameters": false,
+      "UseConstructorsForConfig": true,
+      "UseCommonSDKLibrary": false,
+      "iOSUseAppInfoPlist": true,
+      "AndroidUseAppManifest": true,
+      "BodySerialization": 0,
+      "EnableAdditionalModelProperties": false,
+      "PreserveParameterOrder": false,
+      "AppendContentHeaders": true,
+      "iOSGenerateCoreData": false,
+      "GenerateInterfaces": false,
+      "NodeHttpClient": "NODE_REQUEST",
+      "ValidateRequiredParameters": false,
+      "JavaUsePropertiesConfig": false,
+      "Timeout": 0,
+      "StoreTimezoneInformation": false,
+      "EnablePHPComposerVersionString": false,
+      "EnableLogging": false,
+      "ArraySerialization": "Indexed",
+      "ModelSerializationScheme": "Json",
+      "UseExceptionPrefix": true,
+      "RunscopeEnabled": false,
+      "JavaHttpClient": "JAVA_OK",
+      "ParameterArrayFormat": "ParamArrayWithIndex",
+      "SecurityProtocols": [
+        "Ssl3",
+        "Tls"
+      ],
+      "GenerateTravisConfig": false,
+      "GenerateCircleConfig": false,
+      "GenerateAppveyorConfig": false,
+      "GenerateJenkinsConfig": false,
+      "EnableHttpCache": false,
+      "Retries": 0,
+      "RetryInterval": 1,
+      "GenerateAdvancedDocs": false,
+      "UnderscoreNumbers": true,
+      "UseSingletonPattern": true,
+      "DisableLinting": false,
+      "ApplyCustomizations": [],
+      "SortResources": false,
+      "AllowSkippingSSLCertVerification": false,
+      "DoNotSplitWords": [],
+      "EnableGlobalUserAgent": true,
+      "ReturnCompleteHttpResponse": false,
+      "GenerateModels": true,
+      "GenerateExceptions": true,
+      "IgnoreIfNullJson": false,
+      "DisableDocs": false,
+      "LiftParameterDescriptionFromCustomType": false,
+      "ThrowForHttpErrorStatusCodes": true,
+      "ResponseMapping": {
+        "Type": "Simple"
+      },
+      "ForceKeywordArgsInRuby": false,
+      "SymbolizeHashKeysInRuby": false
+    },
+    "x-server-configuration": {
+      "default-environment": "production",
+      "default-server": "default",
+      "environments": [
+        {
+          "name": "production",
+          "servers": [
+            {
+              "name": "default",
+              "url": "https://api.spoonacular.com"
+            }
+          ]
+        }
+      ],
+      "parameters": []
+    },
+    "license": {
+      "name": "spoonacular API Terms",
+      "url": "https://spoonacular.com/food-api/terms"
+    },
+    "termsOfService": "https://spoonacular.com/food-api/terms"
+  },
+  "servers": [
+    {
+      "url": "https://api.spoonacular.com",
+      "variables": {}
+    }
+  ],
+  "paths": {
+    "/recipes/complexSearch": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "number": {
+                      "type": "integer"
+                    },
+                    "results": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "imageType": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "image",
+                          "imageType"
+                        ]
+                      }
+                    },
+                    "totalResults": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "offset",
+                    "number",
+                    "results",
+                    "totalResults"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "offset": 0,
+                      "number": 2,
+                      "results": [
+                        {
+                          "id": 716429,
+                          "title": "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs",
+                          "calories": 584,
+                          "carbs": "84g",
+                          "fat": "20g",
+                          "image": "https://spoonacular.com/recipeImages/716429-312x231.jpg",
+                          "imageType": "jpg",
+                          "protein": "19g"
+                        },
+                        {
+                          "id": 715538,
+                          "title": "What to make for dinner tonight?? Bruschetta Style Pork & Pasta",
+                          "calories": 521,
+                          "carbs": "69g",
+                          "fat": "10g",
+                          "image": "https://spoonacular.com/recipeImages/715538-312x231.jpg",
+                          "imageType": "jpg",
+                          "protein": "35g"
+                        }
+                      ],
+                      "totalResults": 86
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "cuisine",
+            "description": "The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.",
+            "schema": {
+              "type": "string",
+              "example": "italian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "excludeCuisine",
+            "description": "The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.",
+            "schema": {
+              "type": "string",
+              "example": "greek"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "diet",
+            "description": "The diet for which the recipes must be suitable. See a full list of supported diets.",
+            "schema": {
+              "type": "string",
+              "example": "vegetarian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "intolerances",
+            "description": "A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.",
+            "schema": {
+              "type": "string",
+              "example": "gluten"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "equipment",
+            "description": "The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".",
+            "schema": {
+              "type": "string",
+              "example": "pan"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "includeIngredients",
+            "description": "A comma-separated list of ingredients that should/must be used in the recipes.",
+            "schema": {
+              "type": "string",
+              "example": "tomato,cheese"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "excludeIngredients",
+            "description": "A comma-separated list of ingredients or ingredient types that the recipes must not contain.",
+            "schema": {
+              "type": "string",
+              "example": "eggs"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "type",
+            "description": "The type of recipe. See a full list of supported meal types.",
+            "schema": {
+              "type": "string",
+              "example": "main course"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "instructionsRequired",
+            "description": "Whether the recipes must have instructions.",
+            "schema": {
+              "type": "boolean",
+              "example": true
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "fillIngredients",
+            "description": "Add information about the ingredients and whether they are used or missing in relation to the query.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "addRecipeInformation",
+            "description": "If set to true, you get more information about the recipes returned.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "addRecipeNutrition",
+            "description": "If set to true, you get nutritional information about each recipes returned.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "author",
+            "description": "The username of the recipe author.",
+            "schema": {
+              "type": "string",
+              "example": "coffeebean"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/tags"
+          },
+          {
+            "name": "recipeBoxId",
+            "description": "The id of the recipe box to which the search should be limited to.",
+            "schema": {
+              "type": "integer",
+              "example": 2468
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "titleMatch",
+            "description": "Enter text that must be found in the title of the recipes.",
+            "schema": {
+              "type": "string",
+              "example": "Crock Pot"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxReadyTime",
+            "description": "The maximum time in minutes it should take to prepare and cook the recipe.",
+            "schema": {
+              "type": "number",
+              "example": 20
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minServings",
+            "description": "The minimum amount of servings the recipe is for.",
+            "schema": {
+              "type": "number",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxServings",
+            "description": "The maximum amount of servings the recipe is for.",
+            "schema": {
+              "type": "number",
+              "example": 8
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/ignorePantry"
+          },
+          {
+            "name": "sort",
+            "description": "The strategy to sort recipes by. See a full list of supported sorting options.",
+            "schema": {
+              "type": "string",
+              "example": "calories"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sortDirection",
+            "description": "The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).",
+            "schema": {
+              "type": "string",
+              "example": "asc"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCarbs",
+            "description": "The minimum amount of carbohydrates in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCarbs",
+            "description": "The maximum amount of carbohydrates in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minProtein",
+            "description": "The minimum amount of protein in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxProtein",
+            "description": "The maximum amount of protein in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCalories",
+            "description": "The minimum amount of calories the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalories",
+            "description": "The maximum amount of calories the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 800
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFat",
+            "description": "The minimum amount of fat in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFat",
+            "description": "The maximum amount of fat in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minAlcohol",
+            "description": "The minimum amount of alcohol in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxAlcohol",
+            "description": "The maximum amount of alcohol in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCaffeine",
+            "description": "The minimum amount of caffeine in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCaffeine",
+            "description": "The maximum amount of caffeine in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCopper",
+            "description": "The minimum amount of copper in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCopper",
+            "description": "The maximum amount of copper in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCalcium",
+            "description": "The minimum amount of calcium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalcium",
+            "description": "The maximum amount of calcium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCholine",
+            "description": "The minimum amount of choline in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCholine",
+            "description": "The maximum amount of choline in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCholesterol",
+            "description": "The minimum amount of cholesterol in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCholesterol",
+            "description": "The maximum amount of cholesterol in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFluoride",
+            "description": "The minimum amount of fluoride in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFluoride",
+            "description": "The maximum amount of fluoride in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSaturatedFat",
+            "description": "The minimum amount of saturated fat in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSaturatedFat",
+            "description": "The maximum amount of saturated fat in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminA",
+            "description": "The minimum amount of Vitamin A in IU the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminA",
+            "description": "The maximum amount of Vitamin A in IU the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminC",
+            "description": "The minimum amount of Vitamin C milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminC",
+            "description": "The maximum amount of Vitamin C in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminD",
+            "description": "The minimum amount of Vitamin D in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminD",
+            "description": "The maximum amount of Vitamin D in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminE",
+            "description": "The minimum amount of Vitamin E in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminE",
+            "description": "The maximum amount of Vitamin E in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminK",
+            "description": "The minimum amount of Vitamin K in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminK",
+            "description": "The maximum amount of Vitamin K in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB1",
+            "description": "The minimum amount of Vitamin B1 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB1",
+            "description": "The maximum amount of Vitamin B1 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB2",
+            "description": "The minimum amount of Vitamin B2 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB2",
+            "description": "The maximum amount of Vitamin B2 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB5",
+            "description": "The minimum amount of Vitamin B5 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB5",
+            "description": "The maximum amount of Vitamin B5 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB3",
+            "description": "The minimum amount of Vitamin B3 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB3",
+            "description": "The maximum amount of Vitamin B3 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB6",
+            "description": "The minimum amount of Vitamin B6 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB6",
+            "description": "The maximum amount of Vitamin B6 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB12",
+            "description": "The minimum amount of Vitamin B12 in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB12",
+            "description": "The maximum amount of Vitamin B12 in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFiber",
+            "description": "The minimum amount of fiber in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFiber",
+            "description": "The maximum amount of fiber in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFolate",
+            "description": "The minimum amount of folate in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFolate",
+            "description": "The maximum amount of folate in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFolicAcid",
+            "description": "The minimum amount of folic acid in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFolicAcid",
+            "description": "The maximum amount of folic acid in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minIodine",
+            "description": "The minimum amount of iodine in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxIodine",
+            "description": "The maximum amount of iodine in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minIron",
+            "description": "The minimum amount of iron in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxIron",
+            "description": "The maximum amount of iron in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minMagnesium",
+            "description": "The minimum amount of magnesium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxMagnesium",
+            "description": "The maximum amount of magnesium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minManganese",
+            "description": "The minimum amount of manganese in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxManganese",
+            "description": "The maximum amount of manganese in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minPhosphorus",
+            "description": "The minimum amount of phosphorus in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPhosphorus",
+            "description": "The maximum amount of phosphorus in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minPotassium",
+            "description": "The minimum amount of potassium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPotassium",
+            "description": "The maximum amount of potassium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSelenium",
+            "description": "The minimum amount of selenium in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSelenium",
+            "description": "The maximum amount of selenium in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSodium",
+            "description": "The minimum amount of sodium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSodium",
+            "description": "The maximum amount of sodium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSugar",
+            "description": "The minimum amount of sugar in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSugar",
+            "description": "The maximum amount of sugar in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minZinc",
+            "description": "The minimum amount of zinc in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxZinc",
+            "description": "The maximum amount of zinc in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Recipes"
+        },
+        "summary": "Search Recipes",
+        "description": "Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.",
+        "operationId": "searchRecipes",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/findByIngredients": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "id": {
+                        "type": "integer"
+                      },
+                      "image": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "imageType": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "likes": {
+                        "type": "integer"
+                      },
+                      "missedIngredientCount": {
+                        "type": "integer"
+                      },
+                      "missedIngredients": {
+                        "type": "array",
+                        "uniqueItems": true,
+                        "minItems": 0,
+                        "items": {
+                          "type": "object",
+                          "properties": {
+                            "aisle": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "amount": {
+                              "type": "number"
+                            },
+                            "id": {
+                              "type": "integer"
+                            },
+                            "image": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "meta": {
+                              "type": "array",
+                              "items": {
+                                "type": "string"
+                              }
+                            },
+                            "name": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "extendedName": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "original": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "originalName": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 0
+                            },
+                            "unitLong": {
+                              "type": "string",
+                              "minLength": 0
+                            },
+                            "unitShort": {
+                              "type": "string",
+                              "minLength": 0
+                            }
+                          },
+                          "required": [
+                            "aisle",
+                            "amount",
+                            "id",
+                            "image",
+                            "name",
+                            "original",
+                            "originalName",
+                            "unit",
+                            "unitLong",
+                            "unitShort"
+                          ]
+                        }
+                      },
+                      "title": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "unusedIngredients": {
+                        "type": "array",
+                        "minItems": 0,
+                        "items": {
+                          "type": "object"
+                        }
+                      },
+                      "usedIngredientCount": {
+                        "type": "number"
+                      },
+                      "usedIngredients": {
+                        "type": "array",
+                        "uniqueItems": true,
+                        "minItems": 0,
+                        "items": {
+                          "type": "object",
+                          "properties": {
+                            "aisle": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "amount": {
+                              "type": "number"
+                            },
+                            "id": {
+                              "type": "integer"
+                            },
+                            "image": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "meta": {
+                              "type": "array",
+                              "items": {
+                                "type": "string"
+                              }
+                            },
+                            "name": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "extendedName": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "original": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "originalName": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 0
+                            },
+                            "unitLong": {
+                              "type": "string",
+                              "minLength": 0
+                            },
+                            "unitShort": {
+                              "type": "string",
+                              "minLength": 0
+                            }
+                          },
+                          "required": [
+                            "aisle",
+                            "amount",
+                            "id",
+                            "image",
+                            "name",
+                            "original",
+                            "originalName",
+                            "unit",
+                            "unitLong",
+                            "unitShort"
+                          ]
+                        }
+                      }
+                    },
+                    "required": [
+                      "id",
+                      "image",
+                      "imageType",
+                      "likes",
+                      "missedIngredientCount",
+                      "missedIngredients",
+                      "title",
+                      "unusedIngredients",
+                      "usedIngredientCount",
+                      "usedIngredients"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "id": 73420,
+                        "image": "https://spoonacular.com/recipeImages/73420-312x231.jpg",
+                        "imageType": "jpg",
+                        "likes": 0,
+                        "missedIngredientCount": 3,
+                        "missedIngredients": [
+                          {
+                            "aisle": "Baking",
+                            "amount": 1,
+                            "id": 18371,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/white-powder.jpg",
+                            "meta": [],
+                            "name": "baking powder",
+                            "original": "1 tsp baking powder",
+                            "originalName": "baking powder",
+                            "unit": "tsp",
+                            "unitLong": "teaspoon",
+                            "unitShort": "tsp"
+                          },
+                          {
+                            "aisle": "Spices and Seasonings",
+                            "amount": 1,
+                            "id": 2010,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/cinnamon.jpg",
+                            "meta": [],
+                            "name": "cinnamon",
+                            "original": "1 tsp cinnamon",
+                            "originalName": "cinnamon",
+                            "unit": "tsp",
+                            "unitLong": "teaspoon",
+                            "unitShort": "tsp"
+                          },
+                          {
+                            "aisle": "Milk, Eggs, Other Dairy",
+                            "amount": 1,
+                            "id": 1123,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/egg.png",
+                            "meta": [],
+                            "name": "egg",
+                            "original": "1 egg",
+                            "originalName": "egg",
+                            "unit": "",
+                            "unitLong": "",
+                            "unitShort": ""
+                          }
+                        ],
+                        "title": "Apple Or Peach Strudel",
+                        "unusedIngredients": [],
+                        "usedIngredientCount": 1,
+                        "usedIngredients": [
+                          {
+                            "aisle": "Produce",
+                            "amount": 6,
+                            "id": 9003,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/apple.jpg",
+                            "meta": [],
+                            "name": "apples",
+                            "original": "6 large baking apples",
+                            "originalName": "baking apples",
+                            "unit": "large",
+                            "unitLong": "larges",
+                            "unitShort": "large"
+                          }
+                        ]
+                      },
+                      {
+                        "id": 632660,
+                        "image": "https://spoonacular.com/recipeImages/632660-312x231.jpg",
+                        "imageType": "jpg",
+                        "likes": 3,
+                        "missedIngredientCount": 4,
+                        "missedIngredients": [
+                          {
+                            "aisle": "Milk, Eggs, Other Dairy",
+                            "amount": 1.5,
+                            "extendedName": "unsalted butter",
+                            "id": 1001,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/butter-sliced.jpg",
+                            "meta": [
+                              "unsalted",
+                              "cold"
+                            ],
+                            "name": "butter",
+                            "original": "1 1/2 sticks cold unsalted butter cold unsalted butter<",
+                            "originalName": "cold unsalted butter cold unsalted butter<",
+                            "unit": "sticks",
+                            "unitLong": "sticks",
+                            "unitShort": "sticks"
+                          },
+                          {
+                            "aisle": "Produce",
+                            "amount": 4,
+                            "id": 1079003,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/red-delicious-apples.png",
+                            "meta": [
+                              "red",
+                              " such as golden delicious, peeled, cored and cut into 1/4-inch-thick slices "
+                            ],
+                            "name": "red apples",
+                            "original": "4 larges red apples, such as Golden Delicious, peeled, cored and cut into 1/4-inch-thick slices",
+                            "originalName": "s red apples, such as Golden Delicious, peeled, cored and cut into 1/4-inch-thick slices",
+                            "unit": "large",
+                            "unitLong": "larges",
+                            "unitShort": "large"
+                          },
+                          {
+                            "aisle": "Spices and Seasonings",
+                            "amount": 2,
+                            "id": 2010,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/cinnamon.jpg",
+                            "meta": [],
+                            "name": "cinnamon",
+                            "original": "2 teaspoons cinnamon",
+                            "originalName": "cinnamon",
+                            "unit": "teaspoons",
+                            "unitLong": "teaspoons",
+                            "unitShort": "tsp"
+                          },
+                          {
+                            "aisle": "Nut butters, Jams, and Honey",
+                            "amount": 2,
+                            "id": 19719,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/apricot-jam.jpg",
+                            "meta": [
+                              "melted"
+                            ],
+                            "name": "apricot preserves",
+                            "original": "2 tablespoons apricot preserves, melted and strained",
+                            "originalName": "apricot preserves, melted and strained",
+                            "unit": "tablespoons",
+                            "unitLong": "tablespoons",
+                            "unitShort": "Tbsp"
+                          }
+                        ],
+                        "title": "Apricot Glazed Apple Tart",
+                        "unusedIngredients": [
+                          {
+                            "aisle": "Produce",
+                            "amount": 1,
+                            "id": 9003,
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/apple.jpg",
+                            "meta": [],
+                            "name": "apples",
+                            "original": "apples",
+                            "originalName": "apples",
+                            "unit": "serving",
+                            "unitLong": "serving",
+                            "unitShort": "serving"
+                          }
+                        ],
+                        "usedIngredientCount": 0,
+                        "usedIngredients": []
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/ingredients"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          },
+          {
+            "name": "ranking",
+            "description": "Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.",
+            "schema": {
+              "type": "integer",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/ignorePantry"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients"
+        },
+        "summary": "Search Recipes by Ingredients",
+        "description": "\nEver wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).\n        ",
+        "operationId": "searchRecipesByIngredients",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/findByNutrients": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "calories": {
+                        "type": "number"
+                      },
+                      "carbs": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "fat": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "id": {
+                        "type": "integer"
+                      },
+                      "image": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "imageType": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "protein": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "title": {
+                        "type": "string",
+                        "minLength": 1
+                      }
+                    },
+                    "required": [
+                      "calories",
+                      "carbs",
+                      "fat",
+                      "id",
+                      "image",
+                      "imageType",
+                      "protein",
+                      "title"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "calories": 210,
+                        "carbs": "43g",
+                        "fat": "3g",
+                        "id": 90629,
+                        "image": "https://spoonacular.com/recipeImages/90629-312x231.jpg",
+                        "imageType": "jpg",
+                        "protein": "1g",
+                        "title": "Baked Apples in White Wine"
+                      },
+                      {
+                        "calories": 226,
+                        "carbs": "33g",
+                        "fat": "10g",
+                        "id": 284420,
+                        "image": "https://spoonacular.com/recipeImages/284420-312x231.jpg",
+                        "imageType": "jpg",
+                        "protein": "2g",
+                        "title": "Chocolate Silk Pie with Marshmallow Meringue"
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "minCarbs",
+            "description": "The minimum amount of carbohydrates in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCarbs",
+            "description": "The maximum amount of carbohydrates in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minProtein",
+            "description": "The minimum amount of protein in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxProtein",
+            "description": "The maximum amount of protein in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCalories",
+            "description": "The minimum amount of calories the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalories",
+            "description": "The maximum amount of calories the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 800
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFat",
+            "description": "The minimum amount of fat in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFat",
+            "description": "The maximum amount of fat in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minAlcohol",
+            "description": "The minimum amount of alcohol in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxAlcohol",
+            "description": "The maximum amount of alcohol in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCaffeine",
+            "description": "The minimum amount of caffeine in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCaffeine",
+            "description": "The maximum amount of caffeine in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCopper",
+            "description": "The minimum amount of copper in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCopper",
+            "description": "The maximum amount of copper in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCalcium",
+            "description": "The minimum amount of calcium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalcium",
+            "description": "The maximum amount of calcium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCholine",
+            "description": "The minimum amount of choline in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCholine",
+            "description": "The maximum amount of choline in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCholesterol",
+            "description": "The minimum amount of cholesterol in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCholesterol",
+            "description": "The maximum amount of cholesterol in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFluoride",
+            "description": "The minimum amount of fluoride in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFluoride",
+            "description": "The maximum amount of fluoride in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSaturatedFat",
+            "description": "The minimum amount of saturated fat in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSaturatedFat",
+            "description": "The maximum amount of saturated fat in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminA",
+            "description": "The minimum amount of Vitamin A in IU the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminA",
+            "description": "The maximum amount of Vitamin A in IU the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminC",
+            "description": "The minimum amount of Vitamin C in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminC",
+            "description": "The maximum amount of Vitamin C in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminD",
+            "description": "The minimum amount of Vitamin D in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminD",
+            "description": "The maximum amount of Vitamin D in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminE",
+            "description": "The minimum amount of Vitamin E in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminE",
+            "description": "The maximum amount of Vitamin E in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminK",
+            "description": "The minimum amount of Vitamin K in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminK",
+            "description": "The maximum amount of Vitamin K in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB1",
+            "description": "The minimum amount of Vitamin B1 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB1",
+            "description": "The maximum amount of Vitamin B1 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB2",
+            "description": "The minimum amount of Vitamin B2 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB2",
+            "description": "The maximum amount of Vitamin B2 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB5",
+            "description": "The minimum amount of Vitamin B5 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB5",
+            "description": "The maximum amount of Vitamin B5 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB3",
+            "description": "The minimum amount of Vitamin B3 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB3",
+            "description": "The maximum amount of Vitamin B3 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB6",
+            "description": "The minimum amount of Vitamin B6 in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB6",
+            "description": "The maximum amount of Vitamin B6 in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minVitaminB12",
+            "description": "The minimum amount of Vitamin B12 in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxVitaminB12",
+            "description": "The maximum amount of Vitamin B12 in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFiber",
+            "description": "The minimum amount of fiber in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFiber",
+            "description": "The maximum amount of fiber in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFolate",
+            "description": "The minimum amount of folate in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFolate",
+            "description": "The maximum amount of folate in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFolicAcid",
+            "description": "The minimum amount of folic acid in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFolicAcid",
+            "description": "The maximum amount of folic acid in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minIodine",
+            "description": "The minimum amount of iodine in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxIodine",
+            "description": "The maximum amount of iodine in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minIron",
+            "description": "The minimum amount of iron in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxIron",
+            "description": "The maximum amount of iron in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minMagnesium",
+            "description": "The minimum amount of magnesium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxMagnesium",
+            "description": "The maximum amount of magnesium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minManganese",
+            "description": "The minimum amount of manganese in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxManganese",
+            "description": "The maximum amount of manganese in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minPhosphorus",
+            "description": "The minimum amount of phosphorus in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPhosphorus",
+            "description": "The maximum amount of phosphorus in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minPotassium",
+            "description": "The minimum amount of potassium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPotassium",
+            "description": "The maximum amount of potassium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSelenium",
+            "description": "The minimum amount of selenium in micrograms the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSelenium",
+            "description": "The maximum amount of selenium in micrograms the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSodium",
+            "description": "The minimum amount of sodium in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSodium",
+            "description": "The maximum amount of sodium in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minSugar",
+            "description": "The minimum amount of sugar in grams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxSugar",
+            "description": "The maximum amount of sugar in grams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minZinc",
+            "description": "The minimum amount of zinc in milligrams the recipe must have.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxZinc",
+            "description": "The maximum amount of zinc in milligrams the recipe can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          },
+          {
+            "name": "random",
+            "description": "If true, every request will give you a random set of recipes within the requested limits.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients"
+        },
+        "summary": "Search Recipes by Nutrients",
+        "description": "Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.",
+        "operationId": "searchRecipesByNutrients",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/information": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/RecipeInformation"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the recipe.",
+            "schema": {
+              "type": "integer",
+              "example": 716429
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/includeNutrition"
+          },
+          {
+            "name": "addWinePairing",
+            "description": "Add a wine pairing to the recipe.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "addTasteData",
+            "description": "Add taste data to the recipe.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Recipe-Information"
+        },
+        "summary": "Get Recipe Information",
+        "description": "Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.",
+        "operationId": "getRecipeInformation",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/informationBulk": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "$ref": "#/components/schemas/RecipeInformation"
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "ids",
+            "description": "A comma-separated list of recipe ids.",
+            "schema": {
+              "type": "string",
+              "example": "715538,716429"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/includeNutrition"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk"
+        },
+        "summary": "Get Recipe Information Bulk",
+        "description": "Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.",
+        "operationId": "getRecipeInformationBulk",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/similar": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "id": {
+                        "type": "integer"
+                      },
+                      "title": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "imageType": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "readyInMinutes": {
+                        "type": "integer"
+                      },
+                      "servings": {
+                        "type": "number"
+                      },
+                      "sourceUrl": {
+                        "type": "string",
+                        "minLength": 1
+                      }
+                    },
+                    "required": [
+                      "id",
+                      "title",
+                      "imageType",
+                      "readyInMinutes",
+                      "servings",
+                      "sourceUrl"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "id": 209128,
+                        "title": "Dinner Tonight: Grilled Romesco-Style Pork",
+                        "imageType": "jpg",
+                        "readyInMinutes": 45,
+                        "servings": 4,
+                        "sourceUrl": "http://www.seriouseats.com/recipes/2008/07/grilled-romesco-style-pork-salad-recipe.html"
+                      },
+                      {
+                        "id": 31868,
+                        "title": "Dinner Tonight: Chickpea Bruschetta",
+                        "imageType": "jpg",
+                        "readyInMinutes": 45,
+                        "servings": 2,
+                        "sourceUrl": "http://www.seriouseats.com/recipes/2009/06/dinner-tonight-chickpea-bruschetta-babbo-nyc-recipe.html"
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the source recipe for which similar recipes should be found.",
+            "schema": {
+              "type": "integer",
+              "example": 715538
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Similar-Recipes"
+        },
+        "summary": "Get Similar Recipes",
+        "description": "Find recipes which are similar to the given one.",
+        "operationId": "getSimilarRecipes",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/random": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "recipes": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "$ref": "#/components/schemas/RecipeInformation"
+                      }
+                    }
+                  },
+                  "required": [
+                    "recipes"
+                  ]
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/includeNutrition"
+          },
+          {
+            "name": "include-tags",
+            "description": "A comma-separated list of tags that the random recipe(s) must adhere to.",
+            "schema": {
+              "type": "string",
+              "example": "vegetarian,gluten"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "exclude-tags",
+            "description": "A comma-separated list of tags that the random recipe(s) must not adhere to.",
+            "schema": {
+              "type": "string",
+              "example": "meat,dairy"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Random-Recipes"
+        },
+        "summary": "Get Random Recipes",
+        "description": "Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.",
+        "operationId": "getRandomRecipes",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/autocomplete": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "id": {
+                        "type": "integer"
+                      },
+                      "title": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "imageType": {
+                        "type": "string",
+                        "minLength": 1
+                      }
+                    },
+                    "required": [
+                      "id",
+                      "title",
+                      "imageType"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "id": 296687,
+                        "title": "chicken",
+                        "imageType": "jpg"
+                      },
+                      {
+                        "id": 42569,
+                        "title": "chicken bbq",
+                        "imageType": "jpg"
+                      },
+                      {
+                        "id": 83890,
+                        "title": "chicken blt",
+                        "imageType": "jpg"
+                      },
+                      {
+                        "id": 737543,
+                        "title": "chicken pie",
+                        "imageType": "jpg"
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search"
+        },
+        "summary": "Autocomplete Recipe Search",
+        "description": "Autocomplete a partial input to suggest possible recipe names.",
+        "operationId": "autocompleteRecipeSearch",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/tasteWidget.json": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/TasteInformation"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 69095
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "schema": {
+              "type": "boolean",
+              "default": true,
+              "enum": [
+                false,
+                true
+              ],
+              "example": true
+            },
+            "required": false,
+            "in": "query",
+            "name": "normalize",
+            "description": "Normalize to the strongest taste."
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Taste-by-ID"
+        },
+        "summary": "Taste by ID",
+        "description": "Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.",
+        "operationId": "getRecipeTasteByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/tasteWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 69095
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "normalize",
+            "description": "Normalize to the strongest taste.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/rgb"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image"
+        },
+        "summary": "Recipe Taste by ID Image",
+        "description": "Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.",
+        "operationId": "recipeTasteByIDImage",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/equipmentWidget.json": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "equipment": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "image",
+                          "name"
+                        ],
+                        "properties": {
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "equipment"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "equipment": [
+                        {
+                          "image": "pie-pan.png",
+                          "name": "pie form"
+                        },
+                        {
+                          "image": "bowl.jpg",
+                          "name": "bowl"
+                        },
+                        {
+                          "image": "oven.jpg",
+                          "name": "oven"
+                        },
+                        {
+                          "image": "pan.png",
+                          "name": "frying pan"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1003464
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Equipment-by-ID"
+        },
+        "summary": "Equipment by ID",
+        "description": "Get a recipe's equipment list.",
+        "operationId": "getRecipeEquipmentByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/equipmentWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 44860
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Equipment-by-ID-Image"
+        },
+        "summary": "Equipment by ID Image",
+        "description": "Visualize a recipe's equipment list as an image.",
+        "operationId": "equipmentByIDImage",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/priceBreakdownWidget.json": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "ingredients": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "amount": {
+                            "type": "object",
+                            "properties": {
+                              "metric": {
+                                "type": "object",
+                                "required": [
+                                  "unit",
+                                  "value"
+                                ],
+                                "properties": {
+                                  "unit": {
+                                    "type": "string",
+                                    "minLength": 0
+                                  },
+                                  "value": {
+                                    "type": "number"
+                                  }
+                                }
+                              },
+                              "us": {
+                                "type": "object",
+                                "required": [
+                                  "unit",
+                                  "value"
+                                ],
+                                "properties": {
+                                  "unit": {
+                                    "type": "string",
+                                    "minLength": 0
+                                  },
+                                  "value": {
+                                    "type": "number"
+                                  }
+                                }
+                              }
+                            },
+                            "required": [
+                              "metric",
+                              "us"
+                            ]
+                          },
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "price": {
+                            "type": "number"
+                          }
+                        },
+                        "required": [
+                          "image",
+                          "name",
+                          "price"
+                        ]
+                      }
+                    },
+                    "totalCost": {
+                      "type": "number"
+                    },
+                    "totalCostPerServing": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "ingredients",
+                    "totalCost",
+                    "totalCostPerServing"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "ingredients": [
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 222
+                            },
+                            "us": {
+                              "unit": "cups",
+                              "value": 1.5
+                            }
+                          },
+                          "image": "blueberries.jpg",
+                          "name": "blueberries",
+                          "price": 174.43
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "",
+                              "value": 1
+                            }
+                          },
+                          "image": "egg-white.jpg",
+                          "name": "egg white",
+                          "price": 18.21
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            }
+                          },
+                          "image": "flour.png",
+                          "name": "flour",
+                          "price": 2
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 150
+                            },
+                            "us": {
+                              "unit": "cup",
+                              "value": 0.75
+                            }
+                          },
+                          "image": "sugar-in-bowl.png",
+                          "name": "granulated sugar",
+                          "price": 20.67
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "tsp",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "tsp",
+                              "value": 1
+                            }
+                          },
+                          "image": "lemon-juice.jpg",
+                          "name": "fresh lemon juice",
+                          "price": 3.39
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "pinch",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "pinch",
+                              "value": 1
+                            }
+                          },
+                          "image": "ground-nutmeg.jpg",
+                          "name": "nutmeg",
+                          "price": 7.39
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "",
+                              "value": 2
+                            }
+                          },
+                          "image": "pie-crust.jpg",
+                          "name": "pie dough round",
+                          "price": 364.29
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            }
+                          },
+                          "image": "tapioca-pearls.png",
+                          "name": "quick cooking tapioca",
+                          "price": 50.89
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 305
+                            },
+                            "us": {
+                              "unit": "cups",
+                              "value": 2.5
+                            }
+                          },
+                          "image": "rhubarb.jpg",
+                          "name": "trimmed rhubarb",
+                          "price": 185.18
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 0.5
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 0.5
+                            }
+                          },
+                          "image": "butter-sliced.jpg",
+                          "name": "unsalted butter",
+                          "price": 6
+                        }
+                      ],
+                      "totalCost": 832.45,
+                      "totalCostPerServing": 104.06
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1003464
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID"
+        },
+        "summary": "Price Breakdown by ID",
+        "description": "Get a recipe's price breakdown data.",
+        "operationId": "getRecipePriceBreakdownByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/priceBreakdownWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image"
+        },
+        "summary": "Price Breakdown by ID Image",
+        "description": "Visualize a recipe's price breakdown.",
+        "operationId": "priceBreakdownByIDImage",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/ingredientWidget.json": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "ingredients": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "amount": {
+                            "type": "object",
+                            "properties": {
+                              "metric": {
+                                "type": "object",
+                                "required": [
+                                  "unit",
+                                  "value"
+                                ],
+                                "properties": {
+                                  "unit": {
+                                    "type": "string",
+                                    "minLength": 0
+                                  },
+                                  "value": {
+                                    "type": "number"
+                                  }
+                                }
+                              },
+                              "us": {
+                                "type": "object",
+                                "required": [
+                                  "unit",
+                                  "value"
+                                ],
+                                "properties": {
+                                  "unit": {
+                                    "type": "string",
+                                    "minLength": 0
+                                  },
+                                  "value": {
+                                    "type": "number"
+                                  }
+                                }
+                              }
+                            },
+                            "required": [
+                              "metric",
+                              "us"
+                            ]
+                          },
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "image",
+                          "name"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "ingredients"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "ingredients": [
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 222
+                            },
+                            "us": {
+                              "unit": "cups",
+                              "value": 1.5
+                            }
+                          },
+                          "image": "blueberries.jpg",
+                          "name": "blueberries"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "",
+                              "value": 1
+                            }
+                          },
+                          "image": "egg-white.jpg",
+                          "name": "egg white"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            }
+                          },
+                          "image": "flour.png",
+                          "name": "flour"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 150
+                            },
+                            "us": {
+                              "unit": "cup",
+                              "value": 0.75
+                            }
+                          },
+                          "image": "sugar-in-bowl.png",
+                          "name": "granulated sugar"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "tsp",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "tsp",
+                              "value": 1
+                            }
+                          },
+                          "image": "lemon-juice.jpg",
+                          "name": "fresh lemon juice"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "pinch",
+                              "value": 1
+                            },
+                            "us": {
+                              "unit": "pinch",
+                              "value": 1
+                            }
+                          },
+                          "image": "ground-nutmeg.jpg",
+                          "name": "nutmeg"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "",
+                              "value": 2
+                            }
+                          },
+                          "image": "pie-crust.jpg",
+                          "name": "pie dough round"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 2
+                            }
+                          },
+                          "image": "tapioca-pearls.png",
+                          "name": "quick cooking tapioca"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "g",
+                              "value": 305
+                            },
+                            "us": {
+                              "unit": "cups",
+                              "value": 2.5
+                            }
+                          },
+                          "image": "rhubarb.jpg",
+                          "name": "trimmed rhubarb"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "tsps",
+                              "value": 0.333
+                            },
+                            "us": {
+                              "unit": "tsps",
+                              "value": 0.333
+                            }
+                          },
+                          "image": "salt.jpg",
+                          "name": "salt"
+                        },
+                        {
+                          "amount": {
+                            "metric": {
+                              "unit": "Tbsps",
+                              "value": 0.5
+                            },
+                            "us": {
+                              "unit": "Tbsps",
+                              "value": 0.5
+                            }
+                          },
+                          "image": "butter-sliced.jpg",
+                          "name": "unsalted butter"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1003464
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Ingredients-by-ID"
+        },
+        "summary": "Ingredients by ID",
+        "description": "Get a recipe's ingredient list.",
+        "operationId": "getRecipeIngredientsByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/ingredientWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "measure",
+            "description": "Whether the the measures should be 'us' or 'metric'.",
+            "schema": {
+              "type": "string",
+              "example": "metric",
+              "enum": [
+                "us",
+                "metric"
+              ]
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image"
+        },
+        "summary": "Ingredients by ID Image",
+        "description": "Visualize a recipe's ingredient list.",
+        "operationId": "ingredientsByIDImage",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/recipes/{id}/nutritionWidget.json": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "calories": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "carbs": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "fat": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "protein": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "bad": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "title",
+                          "amount",
+                          "indented",
+                          "percentOfDailyNeeds"
+                        ],
+                        "properties": {
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "amount": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "indented": {
+                            "type": "boolean"
+                          },
+                          "percentOfDailyNeeds": {
+                            "type": "number"
+                          }
+                        }
+                      }
+                    },
+                    "good": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "amount",
+                          "indented",
+                          "percentOfDailyNeeds",
+                          "title"
+                        ],
+                        "properties": {
+                          "amount": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "indented": {
+                            "type": "boolean"
+                          },
+                          "percentOfDailyNeeds": {
+                            "type": "number"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "calories",
+                    "carbs",
+                    "fat",
+                    "protein",
+                    "bad",
+                    "good"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "calories": "316",
+                      "carbs": "49g",
+                      "fat": "12g",
+                      "protein": "3g",
+                      "bad": [
+                        {
+                          "title": "Calories",
+                          "amount": "316",
+                          "indented": false,
+                          "percentOfDailyNeeds": 15.84
+                        },
+                        {
+                          "title": "Fat",
+                          "amount": "12g",
+                          "indented": false,
+                          "percentOfDailyNeeds": 18.51
+                        }
+                      ],
+                      "good": [
+                        {
+                          "amount": "3g",
+                          "indented": false,
+                          "percentOfDailyNeeds": 7.57,
+                          "title": "Protein"
+                        },
+                        {
+                          "amount": "19µg",
+                          "indented": false,
+                          "percentOfDailyNeeds": 18.76,
+                          "title": "Vitamin K"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1003464
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Nutrition-by-ID"
+        },
+        "summary": "Nutrition by ID",
+        "description": "Get a recipe's nutrition data.",
+        "operationId": "getRecipeNutritionWidgetByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/nutritionWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image"
+        },
+        "summary": "Recipe Nutrition by ID Image",
+        "description": "Visualize a recipe's nutritional information as an image.",
+        "operationId": "recipeNutritionByIDImage",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/nutritionLabel": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 641166
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget"
+        },
+        "summary": "Recipe Nutrition Label Widget",
+        "description": "Get a recipe's nutrition label as an HTML widget.",
+        "operationId": "recipeNutritionLabelWidget",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/nutritionLabel.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 641166
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image"
+        },
+        "summary": "Recipe Nutrition Label Image",
+        "description": "Get a recipe's nutrition label as an image.",
+        "operationId": "recipeNutritionLabelImage",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/analyzedInstructions": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "name": {
+                        "type": "string"
+                      },
+                      "steps": {
+                        "type": "array",
+                        "uniqueItems": true,
+                        "minItems": 0,
+                        "items": {
+                          "type": "object",
+                          "properties": {
+                            "number": {
+                              "type": "number"
+                            },
+                            "step": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "ingredients": {
+                              "type": "array",
+                              "uniqueItems": true,
+                              "minItems": 0,
+                              "items": {
+                                "type": "object",
+                                "properties": {
+                                  "id": {
+                                    "type": "integer"
+                                  },
+                                  "name": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  },
+                                  "localizedName": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  },
+                                  "image": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  }
+                                },
+                                "required": [
+                                  "id",
+                                  "name",
+                                  "localizedName",
+                                  "image"
+                                ]
+                              }
+                            },
+                            "equipment": {
+                              "type": "array",
+                              "uniqueItems": true,
+                              "minItems": 0,
+                              "items": {
+                                "type": "object",
+                                "properties": {
+                                  "id": {
+                                    "type": "integer"
+                                  },
+                                  "name": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  },
+                                  "localizedName": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  },
+                                  "image": {
+                                    "type": "string",
+                                    "minLength": 1
+                                  }
+                                },
+                                "required": [
+                                  "id",
+                                  "name",
+                                  "localizedName",
+                                  "image"
+                                ]
+                              }
+                            }
+                          },
+                          "required": [
+                            "number",
+                            "step"
+                          ]
+                        }
+                      }
+                    },
+                    "required": [
+                      "name"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "name": "",
+                        "steps": [
+                          {
+                            "number": 1,
+                            "step": "Put the garlic in a pan and then add the onion.",
+                            "ingredients": [
+                              {
+                                "id": 11215,
+                                "name": "garlic",
+                                "localizedName": "garlic",
+                                "image": "garlic.png"
+                              },
+                              {
+                                "id": 11282,
+                                "name": "onion",
+                                "localizedName": "onion",
+                                "image": "brown-onion.png"
+                              }
+                            ],
+                            "equipment": [
+                              {
+                                "id": 404645,
+                                "name": "frying pan",
+                                "localizedName": "frying pan",
+                                "image": "pan.png"
+                              }
+                            ]
+                          },
+                          {
+                            "number": 2,
+                            "step": "Add some salt and oregano.",
+                            "ingredients": [
+                              {
+                                "id": 2027,
+                                "name": "oregano",
+                                "localizedName": "oregano",
+                                "image": "oregano.jpg"
+                              },
+                              {
+                                "id": 2047,
+                                "name": "salt",
+                                "localizedName": "salt",
+                                "image": "salt.jpg"
+                              }
+                            ],
+                            "equipment": []
+                          }
+                        ]
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 324694
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "stepBreakdown",
+            "description": "Whether to break down the recipe steps even more.",
+            "schema": {
+              "type": "boolean",
+              "example": true
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions"
+        },
+        "summary": "Get Analyzed Recipe Instructions",
+        "description": "Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.",
+        "operationId": "getAnalyzedRecipeInstructions",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/extract": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/RecipeInformation"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "url",
+            "description": "The URL of the recipe page.",
+            "schema": {
+              "type": "string",
+              "example": "https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "forceExtraction",
+            "description": "If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.",
+            "schema": {
+              "type": "boolean",
+              "example": true
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "analyze",
+            "description": "If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/includeNutrition"
+          },
+          {
+            "$ref": "#/components/parameters/includeTaste"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website"
+        },
+        "summary": "Extract Recipe from Website",
+        "description": "This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.",
+        "operationId": "extractRecipeFromWebsite",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/ingredientWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          },
+          {
+            "schema": {
+              "type": "string",
+              "enum": [
+                "us",
+                "metric"
+              ],
+              "example": "metric"
+            },
+            "required": false,
+            "in": "query",
+            "name": "measure",
+            "description": "Whether the the measures should be 'us' or 'metric'."
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget"
+        },
+        "summary": "Ingredients by ID Widget",
+        "description": "Visualize a recipe's ingredient list.",
+        "operationId": "visualizeRecipeIngredientsByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/tasteWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 69095
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "schema": {
+              "type": "boolean",
+              "enum": [
+                true,
+                false
+              ],
+              "example": true,
+              "default": true
+            },
+            "required": false,
+            "in": "query",
+            "name": "normalize",
+            "description": "Whether to normalize to the strongest taste."
+          },
+          {
+            "$ref": "#/components/parameters/rgb"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget"
+        },
+        "summary": "Recipe Taste by ID Widget",
+        "description": "Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.",
+        "operationId": "visualizeRecipeTasteByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/equipmentWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                },
+                "examples": {}
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 44860
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget"
+        },
+        "summary": "Equipment by ID Widget",
+        "description": "Visualize a recipe's equipment list.",
+        "operationId": "visualizeRecipeEquipmentByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/priceBreakdownWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget"
+        },
+        "summary": "Price Breakdown by ID Widget",
+        "description": "Visualize a recipe's price breakdown.",
+        "operationId": "visualizeRecipePriceBreakdownByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/visualizeTaste": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "ingredientList"
+                ],
+                "properties": {
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line."
+                  },
+                  "normalize": {
+                    "type": "boolean",
+                    "description": "Normalize to the strongest taste."
+                  },
+                  "rgb": {
+                    "type": "string",
+                    "description": "Red, green, blue values for the chart color."
+                  }
+                }
+              },
+              "example": {
+                "ingredientList": "3 tomatoes, 5 oranges, 1 tsp salt"
+              }
+            }
+          },
+          "description": ""
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Taste-Widget"
+        },
+        "summary": "Recipe Taste Widget",
+        "description": "Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!",
+        "operationId": "visualizeRecipeTaste",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/visualizeNutrition": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "ingredientList",
+                  "servings"
+                ],
+                "properties": {
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line."
+                  },
+                  "servings": {
+                    "type": "number",
+                    "description": "The number of servings."
+                  },
+                  "defaultCss": {
+                    "type": "boolean",
+                    "description": "Whether the default CSS should be added to the response."
+                  },
+                  "showBacklink": {
+                    "type": "boolean",
+                    "description": "Whether to show a backlink to spoonacular. If set false, this call counts against your quota."
+                  }
+                }
+              },
+              "example": {
+                "ingredientList": "3 oz flour",
+                "servings": 2
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget"
+        },
+        "summary": "Recipe Nutrition Widget",
+        "description": "Visualize a recipe's nutritional information as HTML including CSS.",
+        "operationId": "visualizeRecipeNutrition",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/visualizePriceEstimator": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "ingredientList",
+                  "servings"
+                ],
+                "properties": {
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line."
+                  },
+                  "servings": {
+                    "type": "number",
+                    "description": "The number of servings."
+                  },
+                  "mode": {
+                    "type": "number",
+                    "description": "The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full)."
+                  },
+                  "defaultCss": {
+                    "type": "boolean",
+                    "description": "Whether the default CSS should be added to the response."
+                  },
+                  "showBacklink": {
+                    "type": "boolean",
+                    "description": "Whether to show a backlink to spoonacular. If set false, this call counts against your quota."
+                  }
+                }
+              },
+              "example": {
+                "ingredientList": "3 oz flour",
+                "servings": "2"
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Price-Breakdown-Widget"
+        },
+        "summary": "Price Breakdown Widget",
+        "description": "Visualize the price breakdown of a recipe.",
+        "operationId": "visualizePriceBreakdown",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/visualizeEquipment": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "instructions"
+                ],
+                "properties": {
+                  "instructions": {
+                    "type": "string",
+                    "description": "The recipe's instructions."
+                  },
+                  "view": {
+                    "type": "string",
+                    "enum": [
+                      "grid",
+                      "list"
+                    ],
+                    "description": "How to visualize the ingredients, either 'grid' or 'list'."
+                  },
+                  "defaultCss": {
+                    "type": "boolean",
+                    "description": "Whether the default CSS should be added to the response."
+                  },
+                  "showBacklink": {
+                    "type": "boolean",
+                    "description": "Whether to show a backlink to spoonacular. If set false, this call counts against your quota."
+                  }
+                }
+              },
+              "example": {
+                "instructions": "Preheat oven. Cut cucumber with a knife and put in a blender."
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Equipment-Widget"
+        },
+        "summary": "Equipment Widget",
+        "description": "Visualize the equipment used to make a recipe.",
+        "operationId": "visualizeEquipment",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/analyze": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "object",
+                "properties": {
+                  "title": {
+                    "type": "string"
+                  },
+                  "servings": {
+                    "type": "integer"
+                  },
+                  "ingredients": {
+                    "type": "array",
+                    "items": {
+                      "type": "string"
+                    }
+                  },
+                  "instructions": {
+                    "type": "string"
+                  }
+                }
+              },
+              "examples": {
+                "Example 1": {
+                  "value": {
+                    "title": "Spaghetti Carbonara",
+                    "servings": 2,
+                    "ingredients": [
+                      "1 lb spaghetti",
+                      "3.5 oz pancetta",
+                      "2 Tbsps olive oil",
+                      "1  egg",
+                      "0.5 cup parmesan cheese"
+                    ],
+                    "instructions": "Bring a large pot of water to a boil and season generously with salt. Add the pasta to the water once boiling and cook until al dente. Reserve 2 cups of cooking water and drain the pasta. "
+                  }
+                }
+              }
+            }
+          },
+          "description": "Example request body."
+        },
+        "parameters": [
+          {
+            "name": "language",
+            "description": "The input language, either \"en\" or \"de\".",
+            "schema": {
+              "type": "string",
+              "example": "en"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "includeNutrition",
+            "description": "Whether nutrition data should be added to correctly parsed ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "includeTaste",
+            "description": "Whether taste data should be added to correctly parsed ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Analyze-Recipe"
+        },
+        "summary": "Analyze Recipe",
+        "description": "This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.",
+        "operationId": "analyzeRecipe",
+        "deprecated": false
+      }
+    },
+    "/recipes/{id}/summary": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "id": {
+                      "type": "integer"
+                    },
+                    "summary": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "title": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "id",
+                    "summary",
+                    "title"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "id": 4632,
+                      "summary": "The recipe Soy-and-Ginger-Glazed Salmon with Udon Noodles can be made  <b>in approximately 1 hour and 35 minutes </b>. One portion of this dish contains about  <b>48g of protein </b>,  <b>17g of fat </b>, and a total of  <b>552 calories </b>. This recipe serves 4. For  <b>$5.91 per serving </b>, this recipe  <b>covers 47% </b> of your daily requirements of vitamins and minerals. It works well as a main course. 1 person has tried and liked this recipe. It is brought to you by Food and Wine. If you have fresh ginger, udon noodles, salmon fillets, and a few other ingredients on hand, you can make it. It is a good option if you're following a  <b>dairy free and pescatarian </b> diet. All things considered, we decided this recipe  <b>deserves a spoonacular score of 92% </b>. This score is great. If you like this recipe, take a look at these similar recipes: Salmon With Soy-ginger Noodles, Ginger-Soy Salmon With Soba Noodles, and Soy & ginger salmon with soba noodles.",
+                      "title": "Soy-and-Ginger-Glazed Salmon with Udon Noodles"
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 4632
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Summarize-Recipe"
+        },
+        "summary": "Summarize Recipe",
+        "description": "Automatically generate a short description that summarizes key information about the recipe.",
+        "operationId": "summarizeRecipe",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/card": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                },
+                "examples": {}
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 4632
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "mask",
+            "description": "The mask to put over the recipe image (\"ellipseMask\", \"diamondMask\", \"starMask\", \"heartMask\", \"potMask\", \"fishMask\").",
+            "schema": {
+              "type": "string",
+              "example": "ellipseMask"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "backgroundImage",
+            "description": "The background image (\"none\",\"background1\", or \"background2\").",
+            "schema": {
+              "type": "string",
+              "example": "background1"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "backgroundColor",
+            "description": "The background color for the recipe card as a hex-string.",
+            "schema": {
+              "type": "string",
+              "example": "ffffff"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "fontColor",
+            "description": "The font color for the recipe card as a hex-string.",
+            "schema": {
+              "type": "string",
+              "example": "333333"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Create-Recipe-Card"
+        },
+        "summary": "Create Recipe Card",
+        "description": "Generate a recipe card for a recipe.",
+        "operationId": "createRecipeCardGet",
+        "deprecated": false
+      }
+    },
+    "/recipes/visualizeRecipe": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "url": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "url"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "url": "https://spoonacular.com/url-to-generated-recipe-card.jpg"
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "multipart/form-data": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "title",
+                  "ingredients",
+                  "instructions",
+                  "readyInMinutes",
+                  "servings",
+                  "mask",
+                  "backgroundImage"
+                ],
+                "properties": {
+                  "title": {
+                    "type": "string",
+                    "description": "The title of the recipe."
+                  },
+                  "ingredients": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line (separate lines with \\n)."
+                  },
+                  "instructions": {
+                    "type": "string",
+                    "description": "The instructions to make the recipe. One step per line (separate lines with \\n)."
+                  },
+                  "readyInMinutes": {
+                    "type": "number",
+                    "description": "The number of minutes it takes to get the recipe on the table."
+                  },
+                  "servings": {
+                    "type": "number",
+                    "description": "The number of servings the recipe makes."
+                  },
+                  "mask": {
+                    "type": "string",
+                    "enum": [
+                      "ellipseMask",
+                      "diamondMask",
+                      "starMask",
+                      "heartMask",
+                      "potMask",
+                      "fishMask"
+                    ],
+                    "description": "The mask to put over the recipe image ('ellipseMask', 'diamondMask', 'starMask', 'heartMask', 'potMask', 'fishMask')."
+                  },
+                  "backgroundImage": {
+                    "type": "string",
+                    "enum": [
+                      "none",
+                      "background1",
+                      "background2"
+                    ],
+                    "description": "The background image ('none', 'background1', or 'background2')."
+                  },
+                  "image": {
+                    "type": "string",
+                    "format": "binary",
+                    "description": "The binary image of the recipe as jpg."
+                  },
+                  "imageUrl": {
+                    "type": "string",
+                    "description": "If you do not sent a binary image you can also pass the image URL."
+                  },
+                  "author": {
+                    "type": "string",
+                    "description": "The author of the recipe."
+                  },
+                  "backgroundColor": {
+                    "type": "string",
+                    "description": "The background color for the recipe card as a hex-string."
+                  },
+                  "fontColor": {
+                    "type": "string",
+                    "description": "The font color for the recipe card as a hex-string."
+                  },
+                  "source": {
+                    "type": "string",
+                    "description": "The source of the recipe."
+                  }
+                }
+              },
+              "example": {
+                "title": "My recipe",
+                "ingredients": "2 cups of green beans",
+                "instructions": "cook the beans",
+                "readyInMinutes": 60,
+                "servings": 2,
+                "mask": "ellipseMask",
+                "backgroundImage": "background1"
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Create-Recipe-Card"
+        },
+        "summary": "Create Recipe Card",
+        "description": "Generate a recipe card for a recipe.",
+        "operationId": "createRecipeCard",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/analyzeInstructions": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "parsedInstructions": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "name"
+                        ],
+                        "properties": {
+                          "name": {
+                            "type": "string"
+                          },
+                          "steps": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "required": [
+                                "number",
+                                "step"
+                              ],
+                              "properties": {
+                                "number": {
+                                  "type": "number"
+                                },
+                                "step": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "ingredients": {
+                                  "type": "array",
+                                  "uniqueItems": true,
+                                  "minItems": 0,
+                                  "items": {
+                                    "required": [
+                                      "id",
+                                      "name",
+                                      "localizedName",
+                                      "image"
+                                    ],
+                                    "properties": {
+                                      "id": {
+                                        "type": "integer"
+                                      },
+                                      "name": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      },
+                                      "localizedName": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      },
+                                      "image": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      }
+                                    }
+                                  }
+                                },
+                                "equipment": {
+                                  "type": "array",
+                                  "uniqueItems": true,
+                                  "minItems": 0,
+                                  "items": {
+                                    "required": [
+                                      "id",
+                                      "name",
+                                      "localizedName",
+                                      "image"
+                                    ],
+                                    "properties": {
+                                      "id": {
+                                        "type": "integer"
+                                      },
+                                      "name": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      },
+                                      "localizedName": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      },
+                                      "image": {
+                                        "type": "string",
+                                        "minLength": 1
+                                      }
+                                    }
+                                  }
+                                }
+                              }
+                            }
+                          }
+                        }
+                      }
+                    },
+                    "ingredients": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "id",
+                          "name"
+                        ],
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        }
+                      }
+                    },
+                    "equipment": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "id",
+                          "name"
+                        ],
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "parsedInstructions",
+                    "ingredients",
+                    "equipment"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "parsedInstructions": [
+                        {
+                          "name": "",
+                          "steps": [
+                            {
+                              "number": 1,
+                              "step": "Put the garlic in a pan and then add the onion.",
+                              "ingredients": [
+                                {
+                                  "id": 11215,
+                                  "name": "garlic",
+                                  "localizedName": "garlic",
+                                  "image": "garlic.png"
+                                },
+                                {
+                                  "id": 11282,
+                                  "name": "onion",
+                                  "localizedName": "onion",
+                                  "image": "brown-onion.png"
+                                }
+                              ],
+                              "equipment": [
+                                {
+                                  "id": 404645,
+                                  "name": "frying pan",
+                                  "localizedName": "frying pan",
+                                  "image": "pan.png"
+                                }
+                              ]
+                            },
+                            {
+                              "number": 2,
+                              "step": "Add some salt and oregano.",
+                              "ingredients": [
+                                {
+                                  "id": 2027,
+                                  "name": "oregano",
+                                  "localizedName": "oregano",
+                                  "image": "oregano.jpg"
+                                },
+                                {
+                                  "id": 2047,
+                                  "name": "salt",
+                                  "localizedName": "salt",
+                                  "image": "salt.jpg"
+                                }
+                              ],
+                              "equipment": []
+                            }
+                          ]
+                        }
+                      ],
+                      "ingredients": [
+                        {
+                          "id": 2027,
+                          "name": "oregano"
+                        },
+                        {
+                          "id": 11215,
+                          "name": "garlic"
+                        },
+                        {
+                          "id": 11282,
+                          "name": "onion"
+                        },
+                        {
+                          "id": 2047,
+                          "name": "salt"
+                        }
+                      ],
+                      "equipment": [
+                        {
+                          "id": 404645,
+                          "name": "frying pan"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "instructions"
+                ],
+                "properties": {
+                  "instructions": {
+                    "type": "string",
+                    "description": "The recipe's instructions."
+                  }
+                }
+              },
+              "example": {
+                "instructions": "Put the garlic in a pan and then add the onion. Add some salt and oregano."
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions"
+        },
+        "summary": "Analyze Recipe Instructions",
+        "description": "This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.",
+        "operationId": "analyzeRecipeInstructions",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/cuisine": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "cuisine": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "cuisines": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "confidence": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "cuisine",
+                    "cuisines",
+                    "confidence"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "cuisine": "Mediterranean",
+                      "cuisines": [
+                        "Mediterranean",
+                        "European",
+                        "Italian"
+                      ],
+                      "confidence": 0
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "title",
+                  "ingredientList"
+                ],
+                "properties": {
+                  "title": {
+                    "type": "string",
+                    "description": "The title of the recipe."
+                  },
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line (separate lines with \\n)."
+                  }
+                }
+              },
+              "example": {
+                "title": "Pork roast with green beans",
+                "ingredientList": "3 oz pork shoulder"
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Classify-Cuisine"
+        },
+        "summary": "Classify Cuisine",
+        "description": "Classify the recipe's cuisine.",
+        "operationId": "classifyCuisine",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/queries/analyze": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "dishes": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "image",
+                          "name"
+                        ]
+                      }
+                    },
+                    "ingredients": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "include": {
+                            "type": "boolean"
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "image",
+                          "include",
+                          "name"
+                        ]
+                      }
+                    },
+                    "cuisines": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "modifiers": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    }
+                  },
+                  "required": [
+                    "dishes",
+                    "ingredients",
+                    "cuisines",
+                    "modifiers"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "dishes": [
+                        {
+                          "image": "https://spoonacular.com/cdn/ingredients_100x100/salmon.png",
+                          "name": "salmon"
+                        }
+                      ],
+                      "ingredients": [
+                        {
+                          "image": "fusilli.jpg",
+                          "include": true,
+                          "name": "fusilli"
+                        },
+                        {
+                          "image": "nuts-mixed.jpg",
+                          "include": false,
+                          "name": "nuts mixed"
+                        }
+                      ],
+                      "cuisines": [],
+                      "modifiers": []
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "q",
+            "description": "The recipe search query.",
+            "schema": {
+              "type": "string",
+              "example": "salmon with fusilli and no nuts"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query"
+        },
+        "summary": "Analyze a Recipe Search Query",
+        "description": "Parse a recipe search query to find out its intention.",
+        "operationId": "analyzeARecipeSearchQuery",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/convert": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "sourceAmount": {
+                      "type": "number"
+                    },
+                    "sourceUnit": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "targetAmount": {
+                      "type": "number"
+                    },
+                    "targetUnit": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "answer": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "sourceAmount",
+                    "sourceUnit",
+                    "targetAmount",
+                    "targetUnit",
+                    "answer"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "sourceAmount": 2.5,
+                      "sourceUnit": "cups",
+                      "targetAmount": 312.5,
+                      "targetUnit": "grams",
+                      "answer": "2.5 cups flour translates to 312.5 grams."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "ingredientName",
+            "description": "The ingredient which you want to convert.",
+            "schema": {
+              "type": "string",
+              "example": "flour"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sourceAmount",
+            "description": "The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".",
+            "schema": {
+              "type": "number",
+              "example": 2.5
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sourceUnit",
+            "description": "The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"",
+            "schema": {
+              "type": "string",
+              "example": "cups"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "targetUnit",
+            "description": "The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"",
+            "schema": {
+              "type": "string",
+              "example": "grams"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Convert-Amounts"
+        },
+        "summary": "Convert Amounts",
+        "description": "Convert amounts like \"2 cups of flour to grams\".",
+        "operationId": "convertAmounts",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/parseIngredients": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "$ref": "#/components/schemas/IngredientInformation"
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "ingredientList",
+                  "servings"
+                ],
+                "properties": {
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line."
+                  },
+                  "servings": {
+                    "type": "number",
+                    "description": "The number of servings that you can make from the ingredients."
+                  },
+                  "includeNutrition": {
+                    "type": "boolean",
+                    "description": "Whether nutrition data should be added to correctly parsed ingredients."
+                  }
+                }
+              },
+              "example": {
+                "ingredientList": "1 cup green tea",
+                "servings": "1"
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Parse-Ingredients"
+        },
+        "summary": "Parse Ingredients",
+        "description": "Extract an ingredient from plain text.",
+        "operationId": "parseIngredients",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/{id}/nutritionWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The recipe id.",
+            "schema": {
+              "type": "integer",
+              "example": 1082038
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget"
+        },
+        "summary": "Recipe Nutrition by ID Widget",
+        "description": "Visualize a recipe's nutritional information as HTML including CSS.",
+        "operationId": "visualizeRecipeNutritionByID",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/recipes/visualizeIngredients": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "ingredientList",
+                  "servings"
+                ],
+                "properties": {
+                  "ingredientList": {
+                    "type": "string",
+                    "description": "The ingredient list of the recipe, one ingredient per line (separate lines with \\n)."
+                  },
+                  "servings": {
+                    "type": "number",
+                    "description": "The number of servings."
+                  },
+                  "measure": {
+                    "type": "string",
+                    "enum": [
+                      "us",
+                      "metric"
+                    ],
+                    "description": "The original system of measurement, either 'metric' or 'us'."
+                  },
+                  "view": {
+                    "type": "string",
+                    "enum": [
+                      "grid",
+                      "list"
+                    ],
+                    "description": "How to visualize the ingredients, either 'grid' or 'list'."
+                  },
+                  "defaultCss": {
+                    "type": "boolean",
+                    "description": "Whether the default CSS should be added to the response."
+                  },
+                  "showBacklink": {
+                    "type": "boolean",
+                    "description": "Whether to show a backlink to spoonacular. If set false, this call counts against your quota."
+                  }
+                }
+              },
+              "example": {
+                "ingredientList": "3 oz flour",
+                "servings": 2
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Ingredients-Widget"
+        },
+        "summary": "Ingredients Widget",
+        "description": "Visualize ingredients of a recipe. You can play around with that endpoint!",
+        "operationId": "visualizeIngredients",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/recipes/guessNutrition": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "calories": {
+                      "type": "object",
+                      "required": [
+                        "confidenceRange95Percent",
+                        "standardDeviation",
+                        "unit",
+                        "value"
+                      ],
+                      "properties": {
+                        "confidenceRange95Percent": {
+                          "type": "object",
+                          "required": [
+                            "max",
+                            "min"
+                          ],
+                          "properties": {
+                            "max": {
+                              "type": "number"
+                            },
+                            "min": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "standardDeviation": {
+                          "type": "number"
+                        },
+                        "unit": {
+                          "type": "string",
+                          "minLength": 1
+                        },
+                        "value": {
+                          "type": "number"
+                        }
+                      }
+                    },
+                    "carbs": {
+                      "type": "object",
+                      "required": [
+                        "confidenceRange95Percent",
+                        "standardDeviation",
+                        "unit",
+                        "value"
+                      ],
+                      "properties": {
+                        "confidenceRange95Percent": {
+                          "type": "object",
+                          "required": [
+                            "max",
+                            "min"
+                          ],
+                          "properties": {
+                            "max": {
+                              "type": "number"
+                            },
+                            "min": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "standardDeviation": {
+                          "type": "number"
+                        },
+                        "unit": {
+                          "type": "string",
+                          "minLength": 1
+                        },
+                        "value": {
+                          "type": "number"
+                        }
+                      }
+                    },
+                    "fat": {
+                      "type": "object",
+                      "required": [
+                        "confidenceRange95Percent",
+                        "standardDeviation",
+                        "unit",
+                        "value"
+                      ],
+                      "properties": {
+                        "confidenceRange95Percent": {
+                          "type": "object",
+                          "required": [
+                            "max",
+                            "min"
+                          ],
+                          "properties": {
+                            "max": {
+                              "type": "number"
+                            },
+                            "min": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "standardDeviation": {
+                          "type": "number"
+                        },
+                        "unit": {
+                          "type": "string",
+                          "minLength": 1
+                        },
+                        "value": {
+                          "type": "number"
+                        }
+                      }
+                    },
+                    "protein": {
+                      "type": "object",
+                      "required": [
+                        "confidenceRange95Percent",
+                        "standardDeviation",
+                        "unit",
+                        "value"
+                      ],
+                      "properties": {
+                        "confidenceRange95Percent": {
+                          "type": "object",
+                          "required": [
+                            "max",
+                            "min"
+                          ],
+                          "properties": {
+                            "max": {
+                              "type": "number"
+                            },
+                            "min": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "standardDeviation": {
+                          "type": "number"
+                        },
+                        "unit": {
+                          "type": "string",
+                          "minLength": 1
+                        },
+                        "value": {
+                          "type": "number"
+                        }
+                      }
+                    },
+                    "recipesUsed": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "calories",
+                    "carbs",
+                    "fat",
+                    "protein",
+                    "recipesUsed"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "calories": {
+                        "confidenceRange95Percent": {
+                          "max": 574.07,
+                          "min": 389.92
+                        },
+                        "standardDeviation": 148.55,
+                        "unit": "calories",
+                        "value": 428
+                      },
+                      "carbs": {
+                        "confidenceRange95Percent": {
+                          "max": 78.19,
+                          "min": 55.54
+                        },
+                        "standardDeviation": 18.27,
+                        "unit": "g",
+                        "value": 65
+                      },
+                      "fat": {
+                        "confidenceRange95Percent": {
+                          "max": 19.2,
+                          "min": 12.27
+                        },
+                        "standardDeviation": 5.59,
+                        "unit": "g",
+                        "value": 16
+                      },
+                      "protein": {
+                        "confidenceRange95Percent": {
+                          "max": 29.31,
+                          "min": 8.12
+                        },
+                        "standardDeviation": 17.09,
+                        "unit": "g",
+                        "value": 13
+                      },
+                      "recipesUsed": 10
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "title",
+            "description": "The title of the dish.",
+            "schema": {
+              "type": "string",
+              "example": "Spaghetti Aglio et Olio"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name"
+        },
+        "summary": "Guess Nutrition by Dish Name",
+        "description": "Estimate the macronutrients of a dish based on its title.",
+        "operationId": "guessNutritionByDishName",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/food/ingredients/{id}/information": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/IngredientInformation"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The ingredient id.",
+            "schema": {
+              "type": "integer",
+              "example": 9266
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "amount",
+            "description": "The amount of this ingredient.",
+            "schema": {
+              "type": "number",
+              "example": 150
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "unit",
+            "description": "The unit for the given amount.",
+            "schema": {
+              "type": "string",
+              "example": "grams"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Ingredient-Information"
+        },
+        "summary": "Get Ingredient Information",
+        "description": "Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.",
+        "operationId": "getIngredientInformation",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/ingredients/{id}/amount": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "amount": {
+                      "type": "number"
+                    },
+                    "unit": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "amount",
+                    "unit"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "amount": 65.32,
+                      "unit": "oz"
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the ingredient you want the amount for.",
+            "schema": {
+              "type": "integer",
+              "example": 9266
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "nutrient",
+            "description": "The target nutrient. See a list of supported nutrients.",
+            "schema": {
+              "type": "string",
+              "example": "protein"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "target",
+            "description": "The target number of the given nutrient.",
+            "schema": {
+              "type": "integer",
+              "example": 2
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "unit",
+            "description": "The target unit.",
+            "schema": {
+              "type": "string",
+              "example": "oz"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount"
+        },
+        "summary": "Compute Ingredient Amount",
+        "description": "Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?",
+        "operationId": "computeIngredientAmount",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/ingredients/glycemicLoad": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "totalGlycemicLoad": {
+                      "type": "number"
+                    },
+                    "ingredients": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "original": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "glycemicIndex": {
+                            "type": "number"
+                          },
+                          "glycemicLoad": {
+                            "type": "number"
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "original",
+                          "glycemicIndex",
+                          "glycemicLoad"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "totalGlycemicLoad",
+                    "ingredients"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "totalGlycemicLoad": 183.64,
+                      "ingredients": [
+                        {
+                          "id": 9148,
+                          "original": "1 kiwi",
+                          "glycemicIndex": 52.67,
+                          "glycemicLoad": 5.59
+                        },
+                        {
+                          "id": 20444,
+                          "original": "2 cups rice",
+                          "glycemicIndex": 61.19,
+                          "glycemicLoad": 178.05
+                        },
+                        {
+                          "id": 14412,
+                          "original": "2 glasses of water",
+                          "glycemicIndex": 0,
+                          "glycemicLoad": 0
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "ingredients": {
+                    "type": "array",
+                    "items": {
+                      "type": "string"
+                    }
+                  }
+                },
+                "required": [
+                  "ingredients"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "ingredients": [
+                      "1 kiwi",
+                      "2 cups rice",
+                      "2 glasses of water"
+                    ]
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Compute-Glycemic-Load"
+        },
+        "summary": "Compute Glycemic Load",
+        "description": "Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.",
+        "operationId": "computeGlycemicLoad",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/food/ingredients/autocomplete": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "name": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "image": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "id": {
+                        "type": "integer"
+                      },
+                      "aisle": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "possibleUnits": {
+                        "type": "array",
+                        "items": {
+                          "type": "string"
+                        }
+                      }
+                    },
+                    "required": [
+                      "name",
+                      "image"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "name": "apple",
+                        "image": "apple.jpg",
+                        "id": 9003,
+                        "aisle": "Produce",
+                        "possibleUnits": [
+                          "small",
+                          "large",
+                          "piece",
+                          "slice",
+                          "g",
+                          "extra small",
+                          "medium",
+                          "oz",
+                          "cup slice",
+                          "cup",
+                          "serving"
+                        ]
+                      },
+                      {
+                        "name": "applesauce",
+                        "image": "applesauce.png",
+                        "id": 9019,
+                        "aisle": "Canned and Jarred",
+                        "possibleUnits": [
+                          "g",
+                          "oz",
+                          "cup",
+                          "serving",
+                          "tablespoon"
+                        ]
+                      },
+                      {
+                        "name": "apple juice",
+                        "image": "apple-juice.jpg",
+                        "id": 9016,
+                        "aisle": "Beverages",
+                        "possibleUnits": [
+                          "g",
+                          "drink box",
+                          "fl oz",
+                          "oz",
+                          "teaspoon",
+                          "cup",
+                          "serving",
+                          "tablespoon"
+                        ]
+                      },
+                      {
+                        "name": "apple cider",
+                        "image": "apple-cider.jpg",
+                        "id": 1009016,
+                        "aisle": "Beverages",
+                        "possibleUnits": [
+                          "g",
+                          "drink box",
+                          "fl oz",
+                          "oz",
+                          "teaspoon",
+                          "bottle NFS",
+                          "cup",
+                          "serving",
+                          "tablespoon"
+                        ]
+                      },
+                      {
+                        "name": "apple jelly",
+                        "image": "apple-jelly.jpg",
+                        "id": 10019297,
+                        "aisle": "Nut butters, Jams, and Honey",
+                        "possibleUnits": [
+                          "g",
+                          "oz",
+                          "packet",
+                          "teaspoon",
+                          "cup",
+                          "serving",
+                          "tablespoon"
+                        ]
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          },
+          {
+            "name": "metaInformation",
+            "description": "Whether to return more meta information about the ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "intolerances",
+            "description": "A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.",
+            "schema": {
+              "type": "string",
+              "example": "egg"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search"
+        },
+        "summary": "Autocomplete Ingredient Search",
+        "description": "Autocomplete the entry of an ingredient.",
+        "operationId": "autocompleteIngredientSearch",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/ingredients/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "results": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "name",
+                          "image"
+                        ]
+                      }
+                    },
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "number": {
+                      "type": "integer"
+                    },
+                    "totalResults": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "results",
+                    "offset",
+                    "number",
+                    "totalResults"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "results": [
+                        {
+                          "id": 19400,
+                          "name": "banana chips",
+                          "image": "banana-chips.jpg"
+                        },
+                        {
+                          "id": 93779,
+                          "name": "banana liqueur",
+                          "image": "limoncello.jpg"
+                        }
+                      ],
+                      "offset": 0,
+                      "number": 2,
+                      "totalResults": 13
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "addChildren",
+            "description": "Whether to add children of found foods.",
+            "schema": {
+              "type": "boolean",
+              "example": true
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minProteinPercent",
+            "description": "The minimum percentage of protein the food must have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxProteinPercent",
+            "description": "The maximum percentage of protein the food can have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 90
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFatPercent",
+            "description": "The minimum percentage of fat the food must have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFatPercent",
+            "description": "The maximum percentage of fat the food can have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 90
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCarbsPercent",
+            "description": "The minimum percentage of carbs the food must have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCarbsPercent",
+            "description": "The maximum percentage of carbs the food can have (between 0 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 90
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "metaInformation",
+            "description": "Whether to return more meta information about the ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "intolerances",
+            "description": "A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.",
+            "schema": {
+              "type": "string",
+              "example": "egg"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sort",
+            "description": "The strategy to sort recipes by. See a full list of supported sorting options.",
+            "schema": {
+              "type": "string",
+              "example": "calories"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sortDirection",
+            "description": "The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).",
+            "schema": {
+              "type": "string",
+              "example": "asc"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          },
+          {
+            "$ref": "#/components/parameters/language"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Ingredient-Search"
+        },
+        "summary": "Ingredient Search",
+        "description": "Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).",
+        "operationId": "ingredientSearch",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/ingredients/substitutes": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "ingredient": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "substitutes": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "message": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "ingredient",
+                    "substitutes",
+                    "message"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "ingredient": "butter",
+                      "substitutes": [
+                        "1 cup = 7/8 cup shortening and 1/2 tsp salt",
+                        "1 cup = 7/8 cup vegetable oil + 1/2 tsp salt",
+                        "1/2 cup = 1/4 cup buttermilk + 1/4 cup unsweetened applesauce",
+                        "1 cup = 1 cup margarine"
+                      ],
+                      "message": "Found 4 substitutes for the ingredient."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "ingredientName",
+            "description": "The name of the ingredient you want to replace.",
+            "schema": {
+              "type": "string",
+              "example": "butter"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes"
+        },
+        "summary": "Get Ingredient Substitutes",
+        "description": "Search for substitutes for a given ingredient.",
+        "operationId": "getIngredientSubstitutes",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/ingredients/{id}/substitutes": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "ingredient": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "substitutes": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "message": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "ingredient",
+                    "substitutes",
+                    "message"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "ingredient": "butter",
+                      "substitutes": [
+                        "1 cup = 7/8 cup shortening and 1/2 tsp salt",
+                        "1 cup = 7/8 cup vegetable oil + 1/2 tsp salt",
+                        "1/2 cup = 1/4 cup buttermilk + 1/4 cup unsweetened applesauce",
+                        "1 cup = 1 cup margarine"
+                      ],
+                      "message": "Found 4 substitutes for the ingredient."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the ingredient you want substitutes for.",
+            "schema": {
+              "type": "integer",
+              "example": 1001
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID"
+        },
+        "summary": "Get Ingredient Substitutes by ID",
+        "description": "Search for substitutes for a given ingredient.",
+        "operationId": "getIngredientSubstitutesByID",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/products/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "products": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "imageType": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "imageType"
+                        ]
+                      }
+                    },
+                    "totalProducts": {
+                      "type": "integer"
+                    },
+                    "type": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "number": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "products",
+                    "totalProducts",
+                    "type",
+                    "offset",
+                    "number"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "products": [
+                        {
+                          "id": 192386,
+                          "title": "Pizza Buddy: Frozen Pizza Dough, 16 Oz",
+                          "imageType": "jpg"
+                        },
+                        {
+                          "id": 27693,
+                          "title": "Uno Pizza",
+                          "imageType": "jpg"
+                        }
+                      ],
+                      "totalProducts": 1258,
+                      "type": "product",
+                      "offset": 0,
+                      "number": 2
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "minCalories",
+            "description": "The minimum amount of calories the product must have.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalories",
+            "description": "The maximum amount of calories the product can have.",
+            "schema": {
+              "type": "number",
+              "example": 800
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCarbs",
+            "description": "The minimum amount of carbohydrates in grams the product must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCarbs",
+            "description": "The maximum amount of carbohydrates in grams the product can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minProtein",
+            "description": "The minimum amount of protein in grams the product must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxProtein",
+            "description": "The maximum amount of protein in grams the product can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFat",
+            "description": "The minimum amount of fat in grams the product must have.",
+            "schema": {
+              "type": "number",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFat",
+            "description": "The maximum amount of fat in grams the product can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "schema": {
+              "type": "boolean",
+              "example": true,
+              "enum": [
+                false,
+                true
+              ]
+            },
+            "required": false,
+            "in": "query",
+            "name": "addProductInformation",
+            "description": "If set to true, you get more information about the products returned."
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Grocery-Products"
+        },
+        "summary": "Search Grocery Products",
+        "description": "Search packaged food products, such as frozen pizza or Greek yogurt.",
+        "operationId": "searchGroceryProducts",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/upc/{upc}": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "id": {
+                      "type": "integer"
+                    },
+                    "title": {
+                      "type": "string"
+                    },
+                    "badges": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "importantBadges": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "breadcrumbs": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "generatedText": {
+                      "type": "string",
+                      "nullable": true
+                    },
+                    "imageType": {
+                      "type": "string"
+                    },
+                    "ingredientCount": {
+                      "type": "integer"
+                    },
+                    "ingredientList": {
+                      "type": "string"
+                    },
+                    "ingredients": {
+                      "type": "array",
+                      "items": {
+                        "$ref": "#/components/schemas/IngredientBasics"
+                      }
+                    },
+                    "likes": {
+                      "type": "number"
+                    },
+                    "nutrition": {
+                      "type": "object",
+                      "required": [
+                        "nutrients",
+                        "caloricBreakdown"
+                      ],
+                      "properties": {
+                        "nutrients": {
+                          "type": "array",
+                          "uniqueItems": true,
+                          "minItems": 0,
+                          "items": {
+                            "type": "object",
+                            "properties": {
+                              "name": {
+                                "type": "string",
+                                "minLength": 1
+                              },
+                              "amount": {
+                                "type": "number"
+                              },
+                              "unit": {
+                                "type": "string",
+                                "minLength": 1
+                              },
+                              "percentOfDailyNeeds": {
+                                "type": "number"
+                              }
+                            },
+                            "required": [
+                              "name",
+                              "amount",
+                              "unit",
+                              "percentOfDailyNeeds"
+                            ]
+                          }
+                        },
+                        "caloricBreakdown": {
+                          "type": "object",
+                          "required": [
+                            "percentProtein",
+                            "percentFat",
+                            "percentCarbs"
+                          ],
+                          "properties": {
+                            "percentProtein": {
+                              "type": "number"
+                            },
+                            "percentFat": {
+                              "type": "number"
+                            },
+                            "percentCarbs": {
+                              "type": "number"
+                            }
+                          }
+                        }
+                      }
+                    },
+                    "price": {
+                      "type": "number"
+                    },
+                    "servings": {
+                      "type": "object",
+                      "required": [
+                        "number",
+                        "size",
+                        "unit"
+                      ],
+                      "properties": {
+                        "number": {
+                          "type": "number"
+                        },
+                        "size": {
+                          "type": "number"
+                        },
+                        "unit": {
+                          "type": "string",
+                          "minLength": 1
+                        }
+                      }
+                    },
+                    "spoonacularScore": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "id",
+                    "title",
+                    "badges",
+                    "importantBadges",
+                    "breadcrumbs",
+                    "generatedText",
+                    "imageType",
+                    "ingredientList",
+                    "ingredients",
+                    "likes",
+                    "nutrition",
+                    "price",
+                    "servings",
+                    "spoonacularScore"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "id": 30004,
+                      "title": "Swan Flour",
+                      "badges": [
+                        "egg_free",
+                        "wheat_free",
+                        "grain_free",
+                        "peanut_free",
+                        "primal",
+                        "vegetarian",
+                        "nut_free",
+                        "vegan",
+                        "pescetarian",
+                        "dairy_free",
+                        "paleo",
+                        "gluten_free"
+                      ],
+                      "importantBadges": [
+                        "gluten_free",
+                        "paleo",
+                        "primal",
+                        "wheat_free",
+                        "grain_free"
+                      ],
+                      "breadcrumbs": [
+                        "flour"
+                      ],
+                      "generatedText": "Swan Flour: This product is an awesome fit if you are searching for a healthy flour. This product has 1 ingredient (in our experience: the fewer ingredients, the better!) This product contains no ingredients that some research suggests you should avoid. One serving of this product provides 30 calories, 0g grams of fat, 0g grams of protein, and 8g grams of carbs.",
+                      "imageType": "jpg",
+                      "ingredientCount": 1,
+                      "ingredientList": "Potato Starch",
+                      "ingredients": [
+                        {
+                          "description": null,
+                          "name": "",
+                          "safety_level": null
+                        },
+                        {
+                          "description": null,
+                          "name": "starch",
+                          "safety_level": null
+                        },
+                        {
+                          "description": null,
+                          "name": "potato starch",
+                          "safety_level": null
+                        }
+                      ],
+                      "likes": 0,
+                      "nutrition": {
+                        "nutrients": [
+                          {
+                            "name": "Fat",
+                            "amount": 0,
+                            "unit": "g",
+                            "percentOfDailyNeeds": 0
+                          },
+                          {
+                            "name": "Protein",
+                            "amount": 0,
+                            "unit": "g",
+                            "percentOfDailyNeeds": 0
+                          },
+                          {
+                            "name": "Calories",
+                            "amount": 30,
+                            "unit": "cal",
+                            "percentOfDailyNeeds": 10
+                          },
+                          {
+                            "name": "Carbohydrates",
+                            "amount": 8,
+                            "unit": "g",
+                            "percentOfDailyNeeds": 9.45
+                          }
+                        ],
+                        "caloricBreakdown": {
+                          "percentProtein": 22.22,
+                          "percentFat": 20,
+                          "percentCarbs": 57.78
+                        }
+                      },
+                      "price": 0,
+                      "servings": {
+                        "number": 34,
+                        "size": 1,
+                        "unit": "tbsp"
+                      },
+                      "spoonacularScore": 99
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "upc",
+            "description": "The product's UPC.",
+            "schema": {
+              "type": "string",
+              "example": "041631000564"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC"
+        },
+        "summary": "Search Grocery Products by UPC",
+        "description": "Get information about a packaged food using its UPC.",
+        "operationId": "searchGroceryProductsByUPC",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/customFoods/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "customFoods": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "servings": {
+                            "type": "number"
+                          },
+                          "imageUrl": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "price": {
+                            "type": "number"
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "servings",
+                          "imageUrl",
+                          "price"
+                        ]
+                      }
+                    },
+                    "type": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "number": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "customFoods",
+                    "type",
+                    "offset",
+                    "number"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "customFoods": [
+                        {
+                          "id": 15,
+                          "title": "Max Cafe Curry Bratwurst",
+                          "servings": 1,
+                          "imageUrl": "https://spoonacular.com/cdn/ingredients_100x100/bratwurst.jpg",
+                          "price": 6.9
+                        }
+                      ],
+                      "type": "customFood",
+                      "offset": 0,
+                      "number": 10
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "hash",
+            "description": "The private hash for the username.",
+            "schema": {
+              "type": "string",
+              "example": "4b5v4398573406"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Custom-Foods"
+        },
+        "summary": "Search Custom Foods",
+        "description": "Search custom foods in a user's account.",
+        "operationId": "searchCustomFoods",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/products/{id}": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/ProductInformation"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the packaged food.",
+            "schema": {
+              "type": "integer",
+              "example": 22347
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Product-Information"
+        },
+        "summary": "Get Product Information",
+        "description": "Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.",
+        "operationId": "getProductInformation",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/upc/{upc}/comparable": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "comparableProducts": {
+                      "type": "object",
+                      "required": [
+                        "calories",
+                        "likes",
+                        "price",
+                        "protein",
+                        "spoonacular_score",
+                        "sugar"
+                      ],
+                      "properties": {
+                        "calories": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        },
+                        "likes": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        },
+                        "price": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        },
+                        "protein": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        },
+                        "spoonacular_score": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        },
+                        "sugar": {
+                          "type": "array",
+                          "items": {
+                            "$ref": "#/components/schemas/ComparableProduct"
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "comparableProducts"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "comparableProducts": {
+                        "calories": [],
+                        "likes": [],
+                        "price": [],
+                        "protein": [
+                          {
+                            "difference": 3,
+                            "id": 11797,
+                            "image": "https://webknox.com/productImages/11797.jpg",
+                            "title": "Casa Visco Capers"
+                          },
+                          {
+                            "difference": 1,
+                            "id": 90962,
+                            "image": "https://webknox.com/productImages/90962.jpg",
+                            "title": "Colavita Capers"
+                          },
+                          {
+                            "difference": 1,
+                            "id": 88139,
+                            "image": "https://webknox.com/productImages/88139.jpg",
+                            "title": "Mezzetta Capers"
+                          },
+                          {
+                            "difference": 1,
+                            "id": 152832,
+                            "image": "https://webknox.com/productImages/152832.jpg",
+                            "title": "Victoria Imported Capers"
+                          }
+                        ],
+                        "spoonacular_score": [
+                          {
+                            "difference": 7,
+                            "id": 125354,
+                            "image": "https://webknox.com/productImages/125354.jpg",
+                            "title": "DeLallo Capers"
+                          },
+                          {
+                            "difference": 7,
+                            "id": 118361,
+                            "image": "https://webknox.com/productImages/118361.jpg",
+                            "title": "Haddon House Non Pareil Capers"
+                          },
+                          {
+                            "difference": 7,
+                            "id": 113686,
+                            "image": "https://webknox.com/productImages/113686.jpg",
+                            "title": "Dell Alpe Capers"
+                          },
+                          {
+                            "difference": 7,
+                            "id": 112078,
+                            "image": "https://webknox.com/productImages/112078.jpg",
+                            "title": "Paesana Imported Capers"
+                          }
+                        ],
+                        "sugar": []
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "upc",
+            "description": "The UPC of the product for which you want to find comparable products.",
+            "schema": {
+              "type": "string",
+              "example": "033698816271"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Comparable-Products"
+        },
+        "summary": "Get Comparable Products",
+        "description": "Find comparable products to the given one.",
+        "operationId": "getComparableProducts",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/suggest": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "results": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "results"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "results": [
+                        {
+                          "id": 208698,
+                          "title": "buddig premium deli chicken breast - rotisserie flavored"
+                        },
+                        {
+                          "id": 41291,
+                          "title": "tyson all natural chicken breasts tenderloins"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "The (partial) search query.",
+            "schema": {
+              "type": "string",
+              "example": "chicke"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "number",
+            "description": "The number of results to return (between 1 and 25).",
+            "schema": {
+              "type": "integer",
+              "example": 10,
+              "minimum": 1,
+              "maximum": 25
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Autocomplete-Product-Search"
+        },
+        "summary": "Autocomplete Product Search",
+        "description": "Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.",
+        "operationId": "autocompleteProductSearch",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/{id}/nutritionWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                },
+                "examples": {
+                  "example-1": {
+                    "value": "string"
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the product.",
+            "schema": {
+              "type": "integer",
+              "example": 7657
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget"
+        },
+        "summary": "Product Nutrition by ID Widget",
+        "description": "Visualize a product's nutritional information as HTML including CSS.",
+        "operationId": "visualizeProductNutritionByID",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/{id}/nutritionWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The id of the product.",
+            "schema": {
+              "type": "integer",
+              "example": 7657
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image"
+        },
+        "summary": "Product Nutrition by ID Image",
+        "description": "Visualize a product's nutritional information as an image.",
+        "operationId": "productNutritionByIDImage",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/{id}/nutritionLabel": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The product id.",
+            "schema": {
+              "type": "integer",
+              "example": 22347
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget"
+        },
+        "summary": "Product Nutrition Label Widget",
+        "description": "Get a product's nutrition label as an HTML widget.",
+        "operationId": "productNutritionLabelWidget",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/{id}/nutritionLabel.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The product id.",
+            "schema": {
+              "type": "integer",
+              "example": 22347
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image"
+        },
+        "summary": "Product Nutrition Label Image",
+        "description": "Get a product's nutrition label as an image.",
+        "operationId": "productNutritionLabelImage",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/classify": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "cleanTitle": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "image": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "category": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "breadcrumbs": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "usdaCode": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "cleanTitle",
+                    "image",
+                    "category",
+                    "breadcrumbs",
+                    "usdaCode"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "cleanTitle": "Kroger Vitamin A & D Reduced Fat 2% Milk",
+                      "image": "https://spoonacular.com/cdn/ingredients_100x100/milk.png",
+                      "category": "2 percent milk",
+                      "breadcrumbs": [
+                        "2 percent milk",
+                        "milk",
+                        "drink",
+                        "ingredient"
+                      ],
+                      "usdaCode": 1174
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "title": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "upc": {
+                    "type": "string"
+                  },
+                  "plu_code": {
+                    "type": "string"
+                  }
+                },
+                "required": [
+                  "title",
+                  "upc",
+                  "plu_code"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "title": "Kroger Vitamin A & D Reduced Fat 2% Milk",
+                    "upc": "",
+                    "plu_code": ""
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "name": "locale",
+            "description": "The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).",
+            "schema": {
+              "type": "string",
+              "example": "en_US",
+              "enum": [
+                "en_US",
+                "en_GB"
+              ]
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Classify-Grocery-Product"
+        },
+        "summary": "Classify Grocery Product",
+        "description": "This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.",
+        "operationId": "classifyGroceryProduct",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/products/classifyBatch": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "cleanTitle": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "image": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "category": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "breadcrumbs": {
+                        "type": "array",
+                        "items": {
+                          "type": "string"
+                        }
+                      },
+                      "usdaCode": {
+                        "type": "integer"
+                      }
+                    },
+                    "required": [
+                      "cleanTitle",
+                      "image",
+                      "category",
+                      "breadcrumbs",
+                      "usdaCode"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "cleanTitle": "Kroger Vitamin A & D Reduced Fat 2% Milk",
+                        "image": "https://spoonacular.com/cdn/ingredients_100x100/milk.png",
+                        "category": "2 percent milk",
+                        "breadcrumbs": [
+                          "2 percent milk",
+                          "milk",
+                          "drink",
+                          "ingredient"
+                        ],
+                        "usdaCode": 1174
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "type": "array",
+                "description": "",
+                "minItems": 0,
+                "uniqueItems": true,
+                "items": {
+                  "type": "object",
+                  "required": [
+                    "title",
+                    "upc",
+                    "plu_code"
+                  ],
+                  "properties": {
+                    "title": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "upc": {
+                      "type": "string"
+                    },
+                    "plu_code": {
+                      "type": "string"
+                    }
+                  }
+                }
+              },
+              "examples": {
+                "example-1": {
+                  "value": [
+                    {
+                      "title": "Kroger Vitamin A & D Reduced Fat 2% Milk",
+                      "upc": "",
+                      "plu_code": ""
+                    }
+                  ]
+                }
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "name": "locale",
+            "description": "The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).",
+            "schema": {
+              "type": "string",
+              "example": "en_US"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk"
+        },
+        "summary": "Classify Grocery Product Bulk",
+        "description": "Provide a set of product jsons, get back classified products.",
+        "operationId": "classifyGroceryProductBulk",
+        "deprecated": false,
+        "tags": [
+          "products"
+        ]
+      }
+    },
+    "/food/ingredients/map": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "array",
+                  "description": "",
+                  "minItems": 0,
+                  "uniqueItems": true,
+                  "items": {
+                    "type": "object",
+                    "properties": {
+                      "original": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "originalName": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "ingredientImage": {
+                        "type": "string",
+                        "minLength": 1
+                      },
+                      "meta": {
+                        "type": "array",
+                        "items": {
+                          "type": "string"
+                        }
+                      },
+                      "products": {
+                        "type": "array",
+                        "uniqueItems": true,
+                        "minItems": 0,
+                        "items": {
+                          "type": "object",
+                          "properties": {
+                            "id": {
+                              "type": "integer"
+                            },
+                            "title": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "upc": {
+                              "type": "string",
+                              "minLength": 1
+                            }
+                          },
+                          "required": [
+                            "id",
+                            "title",
+                            "upc"
+                          ]
+                        }
+                      }
+                    },
+                    "required": [
+                      "original",
+                      "originalName",
+                      "ingredientImage",
+                      "meta",
+                      "products"
+                    ]
+                  }
+                },
+                "examples": {
+                  "example-1": {
+                    "value": [
+                      {
+                        "original": "eggs",
+                        "originalName": "eggs",
+                        "ingredientImage": "egg.png",
+                        "meta": [
+                          "egg"
+                        ],
+                        "products": [
+                          {
+                            "id": 209945,
+                            "title": "Crystal Farms Eggs - Fresh Accents Peeled Hard Cooked 2 ct Packs",
+                            "upc": "075925889498"
+                          },
+                          {
+                            "id": 214723,
+                            "title": "Organic Valley Eggs - Organic Medium Brown",
+                            "upc": "093966811100"
+                          },
+                          {
+                            "id": 183228,
+                            "title": "Eggland's Best Grade A Eggs Jumbo - 12 CT",
+                            "upc": "715141328615"
+                          }
+                        ]
+                      },
+                      {
+                        "ingredientImage": "raw-bacon.png",
+                        "meta": [
+                          "bacon"
+                        ],
+                        "original": "bacon",
+                        "originalName": "bacon",
+                        "products": [
+                          {
+                            "id": 159164,
+                            "title": "Wright Bacon - Naturally Hickory Smoked",
+                            "upc": "079621461552"
+                          },
+                          {
+                            "id": 87924,
+                            "title": "Sugardale Bacon",
+                            "upc": "073890006025"
+                          },
+                          {
+                            "id": 213315,
+                            "title": "John Morrell Bacon - Applewood Smoked",
+                            "upc": "070100060877"
+                          },
+                          {
+                            "id": 94585,
+                            "title": "Hormel Black Label Bacon Thick Cut",
+                            "upc": "037600153041"
+                          }
+                        ]
+                      }
+                    ]
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "ingredients": {
+                    "type": "array",
+                    "items": {
+                      "type": "string"
+                    }
+                  },
+                  "servings": {
+                    "type": "number"
+                  }
+                },
+                "required": [
+                  "ingredients",
+                  "servings"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "ingredients": [
+                      "eggs",
+                      "bacon"
+                    ],
+                    "servings": 2
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products"
+        },
+        "summary": "Map Ingredients to Grocery Products",
+        "description": "Map a set of ingredients to products you can buy in the grocery store.",
+        "operationId": "mapIngredientsToGroceryProducts",
+        "deprecated": false,
+        "tags": [
+          "ingredients"
+        ]
+      }
+    },
+    "/food/menuItems/suggest": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "results": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "results"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "results": [
+                        {
+                          "id": 253419,
+                          "title": "pei wei asian diner thai chicken lettuce wraps"
+                        },
+                        {
+                          "id": 380722,
+                          "title": "camille's chicken caesar salad includes 2 oz. caesar dressing"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "The (partial) search query.",
+            "schema": {
+              "type": "string",
+              "example": "chicke"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "number",
+            "description": "The number of results to return (between 1 and 25).",
+            "schema": {
+              "type": "integer",
+              "example": 10,
+              "minimum": 1,
+              "maximum": 25
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search"
+        },
+        "summary": "Autocomplete Menu Item Search",
+        "description": "Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.",
+        "operationId": "autocompleteMenuItemSearch",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "menuItems": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "$ref": "#/components/schemas/MenuItem"
+                      }
+                    },
+                    "totalMenuItems": {
+                      "type": "integer"
+                    },
+                    "type": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "number": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "menuItems",
+                    "totalMenuItems",
+                    "type",
+                    "offset",
+                    "number"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "menuItems": [
+                        {
+                          "id": 419357,
+                          "title": "Burger Sliders",
+                          "restaurantChain": "Hooters",
+                          "image": "https://images.spoonacular.com/file/wximages/419357-312x231.png",
+                          "imageType": "png",
+                          "servings": {
+                            "number": 1,
+                            "size": 2,
+                            "unit": "oz"
+                          }
+                        },
+                        {
+                          "id": 424571,
+                          "title": "Bacon King Burger",
+                          "restaurantChain": "Burger King",
+                          "image": "https://images.spoonacular.com/file/wximages/424571-312x231.png",
+                          "imageType": "png",
+                          "servings": {
+                            "number": 1,
+                            "size": 2,
+                            "unit": "oz"
+                          }
+                        }
+                      ],
+                      "totalMenuItems": 6749,
+                      "type": "menuItem",
+                      "offset": 0,
+                      "number": 2
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "minCalories",
+            "description": "The minimum amount of calories the menu item must have.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCalories",
+            "description": "The maximum amount of calories the menu item can have.",
+            "schema": {
+              "type": "number",
+              "example": 800
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minCarbs",
+            "description": "The minimum amount of carbohydrates in grams the menu item must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxCarbs",
+            "description": "The maximum amount of carbohydrates in grams the menu item can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minProtein",
+            "description": "The minimum amount of protein in grams the menu item must have.",
+            "schema": {
+              "type": "number",
+              "example": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxProtein",
+            "description": "The maximum amount of protein in grams the menu item can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minFat",
+            "description": "The minimum amount of fat in grams the menu item must have.",
+            "schema": {
+              "type": "number",
+              "example": 1
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxFat",
+            "description": "The maximum amount of fat in grams the menu item can have.",
+            "schema": {
+              "type": "number",
+              "example": 100
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "schema": {
+              "type": "boolean",
+              "example": true,
+              "enum": [
+                false,
+                true
+              ]
+            },
+            "required": false,
+            "in": "query",
+            "name": "addMenuItemInformation",
+            "description": "If set to true, you get more information about the menu items returned."
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Menu-Items"
+        },
+        "summary": "Search Menu Items",
+        "description": "Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.",
+        "operationId": "searchMenuItems",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/{id}": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "$ref": "#/components/schemas/MenuItem"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The menu item id.",
+            "schema": {
+              "type": "integer",
+              "example": 424571
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Menu-Item-Information"
+        },
+        "summary": "Get Menu Item Information",
+        "description": "Use a menu item id to get all available information about a menu item, such as nutrition.",
+        "operationId": "getMenuItemInformation",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/{id}/nutritionWidget": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The menu item id.",
+            "schema": {
+              "type": "integer",
+              "example": 1003464
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-by-ID-Widget"
+        },
+        "summary": "Menu Item Nutrition by ID Widget",
+        "description": "Visualize a menu item's nutritional information as HTML including CSS.",
+        "operationId": "visualizeMenuItemNutritionByID",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/{id}/nutritionWidget.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The menu item id.",
+            "schema": {
+              "type": "integer",
+              "example": 424571
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-by-ID-Image"
+        },
+        "summary": "Menu Item Nutrition by ID Image",
+        "description": "Visualize a menu item's nutritional information as HTML including CSS.",
+        "operationId": "menuItemNutritionByIDImage",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/{id}/nutritionLabel": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "text/html": {
+                "schema": {
+                  "type": "string"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The menu item id.",
+            "schema": {
+              "type": "integer",
+              "example": 342313
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/defaultCss"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-Label-Widget"
+        },
+        "summary": "Menu Item Nutrition Label Widget",
+        "description": "Visualize a menu item's nutritional label information as HTML including CSS.",
+        "operationId": "menuItemNutritionLabelWidget",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/food/menuItems/{id}/nutritionLabel.png": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "image/png": {
+                "schema": {
+                  "type": "string",
+                  "format": "binary"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "id",
+            "description": "The menu item id.",
+            "schema": {
+              "type": "integer",
+              "example": 342313
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "showOptionalNutrients",
+            "description": "Whether to show optional nutrients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showZeroValues",
+            "description": "Whether to show zero values.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "showIngredients",
+            "description": "Whether to show a list of ingredients.",
+            "schema": {
+              "type": "boolean",
+              "example": false
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-Label-Image"
+        },
+        "summary": "Menu Item Nutrition Label Image",
+        "description": "Visualize a menu item's nutritional label information as an image.",
+        "operationId": "menuItemNutritionLabelImage",
+        "deprecated": false,
+        "tags": [
+          "menu items"
+        ]
+      }
+    },
+    "/mealplanner/generate": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "meals": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "imageType": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "readyInMinutes": {
+                            "type": "integer"
+                          },
+                          "servings": {
+                            "type": "number"
+                          },
+                          "sourceUrl": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "imageType",
+                          "readyInMinutes",
+                          "servings",
+                          "sourceUrl"
+                        ]
+                      }
+                    },
+                    "nutrients": {
+                      "type": "object",
+                      "required": [
+                        "calories",
+                        "carbohydrates",
+                        "fat",
+                        "protein"
+                      ],
+                      "properties": {
+                        "calories": {
+                          "type": "number"
+                        },
+                        "carbohydrates": {
+                          "type": "number"
+                        },
+                        "fat": {
+                          "type": "number"
+                        },
+                        "protein": {
+                          "type": "number"
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "meals",
+                    "nutrients"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "meals": [
+                        {
+                          "id": 655219,
+                          "title": "Peanut Butter And Chocolate Oatmeal",
+                          "imageType": "jpg",
+                          "readyInMinutes": 45,
+                          "servings": 1,
+                          "sourceUrl": "https://spoonacular.com/recipes/peanut-butter-and-chocolate-oatmeal-655219"
+                        },
+                        {
+                          "id": 649931,
+                          "title": "Lentil Salad With Vegetables",
+                          "imageType": "jpg",
+                          "readyInMinutes": 45,
+                          "servings": 4,
+                          "sourceUrl": "https://spoonacular.com/recipes/lentil-salad-with-vegetables-649931"
+                        },
+                        {
+                          "id": 632854,
+                          "title": "Asian Noodles",
+                          "imageType": "jpg",
+                          "readyInMinutes": 45,
+                          "servings": 4,
+                          "sourceUrl": "https://spoonacular.com/recipes/asian-noodles-632854"
+                        }
+                      ],
+                      "nutrients": {
+                        "calories": 1735.81,
+                        "carbohydrates": 235.17,
+                        "fat": 69.22,
+                        "protein": 55.43
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "timeFrame",
+            "description": "Either for one \"day\" or an entire \"week\".",
+            "schema": {
+              "type": "string",
+              "example": "day"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "targetCalories",
+            "description": "What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.",
+            "schema": {
+              "type": "number",
+              "example": 2000
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "diet",
+            "description": "Enter a diet that the meal plan has to adhere to. See a full list of supported diets.",
+            "schema": {
+              "type": "string",
+              "example": "vegetarian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "exclude",
+            "description": "A comma-separated list of allergens or ingredients that must be excluded.",
+            "schema": {
+              "type": "string",
+              "example": "shellfish, olives"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Generate-Meal-Plan"
+        },
+        "summary": "Generate Meal Plan",
+        "description": "Generate a meal plan with three meals per day (breakfast, lunch, and dinner).",
+        "operationId": "generateMealPlan",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/week/{start_date}": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "days": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "nutritionSummary": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "date": {
+                            "type": "number"
+                          },
+                          "day": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "items": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "type": "object",
+                              "properties": {
+                                "id": {
+                                  "type": "integer"
+                                },
+                                "slot": {
+                                  "type": "integer"
+                                },
+                                "position": {
+                                  "type": "integer"
+                                },
+                                "type": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "value": {
+                                  "type": "object",
+                                  "properties": {
+                                    "servings": {
+                                      "type": "number"
+                                    },
+                                    "id": {
+                                      "type": "number"
+                                    },
+                                    "title": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "imageType": {
+                                      "type": "string"
+                                    }
+                                  },
+                                  "required": [
+                                    "servings",
+                                    "id",
+                                    "title",
+                                    "imageType"
+                                  ]
+                                }
+                              },
+                              "required": [
+                                "id",
+                                "slot",
+                                "position",
+                                "type"
+                              ]
+                            }
+                          }
+                        },
+                        "required": [
+                          "date",
+                          "day"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "days"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "days": [
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 310,
+                                "unit": "cal",
+                                "percentDailyNeeds": 16
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 25,
+                                "unit": "g",
+                                "percentDailyNeeds": 38
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 20,
+                                "unit": "g",
+                                "percentDailyNeeds": 40
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 310,
+                                "unit": "cal",
+                                "percentDailyNeeds": 16
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 25,
+                                "unit": "g",
+                                "percentDailyNeeds": 38
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 20,
+                                "unit": "g",
+                                "percentDailyNeeds": 40
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "date": 1589155200,
+                          "day": "Monday",
+                          "items": [
+                            {
+                              "id": 1976489,
+                              "slot": 1,
+                              "position": 1,
+                              "type": "RECIPE",
+                              "value": {
+                                "servings": 2,
+                                "id": 1023004,
+                                "title": "Foolproof Meatloaf",
+                                "imageType": ""
+                              }
+                            },
+                            {
+                              "id": 1976490,
+                              "slot": 2,
+                              "position": 2,
+                              "type": "CUSTOM_FOOD",
+                              "value": {
+                                "servings": 1,
+                                "id": 345,
+                                "title": "Denn's Lamb Bratwurst - 1/2 Pkg",
+                                "image": "https://spoonacular.com/cdn/ingredients_100x100/bratwurst.jpg",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 200,
+                                "unit": "cal",
+                                "percentDailyNeeds": 10
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 1
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 52,
+                                "unit": "g",
+                                "percentDailyNeeds": 17
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 2,
+                                "unit": "g",
+                                "percentDailyNeeds": 4
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 200,
+                                "unit": "cal",
+                                "percentDailyNeeds": 10
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 1
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 52,
+                                "unit": "g",
+                                "percentDailyNeeds": 17
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 2,
+                                "unit": "g",
+                                "percentDailyNeeds": 4
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "date": 1589241600,
+                          "day": "Tuesday",
+                          "items": [
+                            {
+                              "id": 1976491,
+                              "slot": 1,
+                              "position": 3,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "apple and banana",
+                                "servings": 1,
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "apple",
+                                    "unit": "",
+                                    "amount": "1",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/apple.jpg"
+                                  },
+                                  {
+                                    "name": "banana",
+                                    "unit": "",
+                                    "amount": "1",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/bananas.jpg"
+                                  }
+                                ]
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 180,
+                                "unit": "cal",
+                                "percentDailyNeeds": 9
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 6,
+                                "unit": "g",
+                                "percentDailyNeeds": 9
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 22,
+                                "unit": "g",
+                                "percentDailyNeeds": 7
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 10,
+                                "unit": "g",
+                                "percentDailyNeeds": 20
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 180,
+                                "unit": "cal",
+                                "percentDailyNeeds": 9
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 6,
+                                "unit": "g",
+                                "percentDailyNeeds": 9
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 22,
+                                "unit": "g",
+                                "percentDailyNeeds": 7
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 10,
+                                "unit": "g",
+                                "percentDailyNeeds": 20
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 0,
+                                "unit": "cal",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 0,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              }
+                            ]
+                          },
+                          "date": 1589328000,
+                          "day": "Wednesday",
+                          "items": [
+                            {
+                              "id": 1976492,
+                              "slot": 1,
+                              "position": 4,
+                              "type": "MENU_ITEM",
+                              "value": {
+                                "servings": 1,
+                                "id": 378557,
+                                "title": "BBQ Steak Pizza, 9",
+                                "image": "https://images.spoonacular.com/file/wximages/378557-312x231.png",
+                                "imageType": "png"
+                              }
+                            }
+                          ]
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "start_date",
+            "description": "The start date of the meal planned week in the format yyyy-mm-dd.",
+            "schema": {
+              "type": "string",
+              "example": "2020-06-01"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week"
+        },
+        "summary": "Get Meal Plan Week",
+        "description": "Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.",
+        "operationId": "getMealPlanWeek",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/day/{date}": {
+      "delete": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "date",
+            "description": "The date in the format yyyy-mm-dd.",
+            "schema": {
+              "type": "string",
+              "example": "2020-06-01"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day"
+        },
+        "summary": "Clear Meal Plan Day",
+        "description": "Delete all planned items from the user's meal plan for a specific day.",
+        "operationId": "clearMealPlanDay",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/items": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object"
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "date": 1589500800,
+                      "slot": 1,
+                      "position": 0,
+                      "type": "INGREDIENTS",
+                      "value": {
+                        "ingredients": [
+                          {
+                            "name": "1 banana"
+                          }
+                        ]
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "date": {
+                    "type": "number"
+                  },
+                  "slot": {
+                    "type": "integer"
+                  },
+                  "position": {
+                    "type": "integer"
+                  },
+                  "type": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "value": {
+                    "type": "object",
+                    "required": [
+                      "ingredients"
+                    ],
+                    "properties": {
+                      "ingredients": {
+                        "type": "array",
+                        "uniqueItems": true,
+                        "minItems": 0,
+                        "items": {
+                          "type": "object",
+                          "properties": {
+                            "name": {
+                              "type": "string",
+                              "minLength": 1
+                            }
+                          },
+                          "required": [
+                            "name"
+                          ]
+                        }
+                      }
+                    }
+                  }
+                },
+                "required": [
+                  "date",
+                  "slot",
+                  "position",
+                  "type",
+                  "value"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "date": 1589500800,
+                    "slot": 1,
+                    "position": 0,
+                    "type": "INGREDIENTS",
+                    "value": {
+                      "ingredients": [
+                        {
+                          "name": "1 banana"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Add-to-Meal-Plan"
+        },
+        "summary": "Add to Meal Plan",
+        "description": "Add an item to the user's meal plan.",
+        "operationId": "addToMealPlan",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/items/{id}": {
+      "delete": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "id",
+            "description": "The shopping list item id.",
+            "schema": {
+              "type": "integer",
+              "example": 15678
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan"
+        },
+        "summary": "Delete from Meal Plan",
+        "description": "Delete an item from the user's meal plan.",
+        "operationId": "deleteFromMealPlan",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/templates": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "templates": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "name"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "templates"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "templates": [
+                        {
+                          "id": 37,
+                          "name": "Busy Work Week"
+                        },
+                        {
+                          "id": 480,
+                          "name": "Keto Meal Plan"
+                        },
+                        {
+                          "id": 120,
+                          "name": "Not-So-Strict Paleo Meal Plan"
+                        },
+                        {
+                          "id": 451,
+                          "name": "Week 1 Meal Plan"
+                        },
+                        {
+                          "id": 581,
+                          "name": "Whole30 Meal Plan"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates"
+        },
+        "summary": "Get Meal Plan Templates",
+        "description": "Get meal plan templates from user or public ones.",
+        "operationId": "getMealPlanTemplates",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      },
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "items": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 1,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "day": {
+                            "type": "integer"
+                          },
+                          "slot": {
+                            "type": "integer"
+                          },
+                          "position": {
+                            "type": "integer"
+                          },
+                          "type": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "value": {
+                            "type": "object",
+                            "properties": {
+                              "id": {
+                                "type": "integer"
+                              },
+                              "servings": {
+                                "type": "number"
+                              },
+                              "title": {
+                                "type": "string",
+                                "minLength": 1
+                              },
+                              "imageType": {
+                                "type": "string",
+                                "minLength": 1
+                              }
+                            }
+                          }
+                        },
+                        "required": [
+                          "day",
+                          "slot",
+                          "position",
+                          "type"
+                        ]
+                      }
+                    },
+                    "publishAsPublic": {
+                      "type": "boolean"
+                    }
+                  },
+                  "required": [
+                    "name",
+                    "items",
+                    "publishAsPublic"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "name": "My new meal plan template",
+                      "items": [
+                        {
+                          "day": 1,
+                          "slot": 1,
+                          "position": 0,
+                          "type": "RECIPE",
+                          "value": {
+                            "id": 296213,
+                            "servings": 2,
+                            "title": "Spinach Salad with Roasted Vegetables and Spiced Chickpea",
+                            "imageType": "jpg"
+                          }
+                        },
+                        {
+                          "day": 2,
+                          "slot": 1,
+                          "position": 0,
+                          "type": "PRODUCT",
+                          "value": {
+                            "id": 183433,
+                            "servings": 1,
+                            "title": "Ahold Lasagna with Meat Sauce",
+                            "imageType": "jpg"
+                          }
+                        },
+                        {
+                          "day": 3,
+                          "slot": 1,
+                          "position": 0,
+                          "type": "MENU_ITEM",
+                          "value": {
+                            "id": 378557,
+                            "servings": 1,
+                            "title": "Pizza 73 BBQ Steak Pizza, 9",
+                            "imageType": "png"
+                          }
+                        },
+                        {
+                          "day": 4,
+                          "slot": 1,
+                          "position": 0,
+                          "type": "CUSTOM_FOOD",
+                          "value": {
+                            "id": 348,
+                            "servings": 1,
+                            "title": "Aldi Spicy Cashews - 30g",
+                            "image": "https://spoonacular.com/cdn/ingredients_100x100/cashews.jpg"
+                          }
+                        },
+                        {
+                          "day": 5,
+                          "slot": 1,
+                          "position": 0,
+                          "type": "INGREDIENTS",
+                          "value": {
+                            "ingredients": [
+                              {
+                                "name": "1 banana"
+                              },
+                              {
+                                "name": "coffee",
+                                "unit": "cup",
+                                "amount": "1",
+                                "image": "https://spoonacular.com/cdn/ingredients_100x100/brewed-coffee.jpg"
+                              }
+                            ]
+                          }
+                        }
+                      ],
+                      "publishAsPublic": false
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "hash",
+            "description": "The private hash for the username.",
+            "schema": {
+              "type": "string",
+              "example": "4b5v4398573406"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Add-Meal-Plan-Template"
+        },
+        "summary": "Add Meal Plan Template",
+        "description": "Add a meal plan template for a user.",
+        "operationId": "addMealPlanTemplate",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/templates/{id}": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "id": {
+                      "type": "integer"
+                    },
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "days": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "nutritionSummary": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "type": "object",
+                            "properties": {
+                              "nutrients": {
+                                "type": "array",
+                                "uniqueItems": true,
+                                "minItems": 0,
+                                "items": {
+                                  "type": "object",
+                                  "properties": {
+                                    "name": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "amount": {
+                                      "type": "number"
+                                    },
+                                    "unit": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "percentDailyNeeds": {
+                                      "type": "number"
+                                    }
+                                  },
+                                  "required": [
+                                    "name",
+                                    "amount",
+                                    "unit",
+                                    "percentDailyNeeds"
+                                  ]
+                                }
+                              }
+                            },
+                            "required": [
+                              "nutrients"
+                            ]
+                          },
+                          "day": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "items": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "type": "object",
+                              "properties": {
+                                "id": {
+                                  "type": "integer"
+                                },
+                                "slot": {
+                                  "type": "integer"
+                                },
+                                "position": {
+                                  "type": "integer"
+                                },
+                                "type": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "value": {
+                                  "type": "object",
+                                  "properties": {
+                                    "id": {
+                                      "type": "number"
+                                    },
+                                    "title": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    },
+                                    "imageType": {
+                                      "type": "string",
+                                      "minLength": 1
+                                    }
+                                  },
+                                  "required": [
+                                    "id",
+                                    "title",
+                                    "imageType"
+                                  ]
+                                }
+                              },
+                              "required": [
+                                "id",
+                                "slot",
+                                "position",
+                                "type"
+                              ]
+                            }
+                          }
+                        },
+                        "required": [
+                          "day"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "id",
+                    "name",
+                    "days"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "id": 128,
+                      "name": "1500 Calorie Meal Plan",
+                      "days": [
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1293,
+                                "unit": "cal",
+                                "percentDailyNeeds": 65
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 65,
+                                "unit": "g",
+                                "percentDailyNeeds": 100
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 102,
+                                "unit": "g",
+                                "percentDailyNeeds": 34
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 83,
+                                "unit": "g",
+                                "percentDailyNeeds": 166
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 132,
+                                "unit": "cal",
+                                "percentDailyNeeds": 7
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 3,
+                                "unit": "g",
+                                "percentDailyNeeds": 4
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 25,
+                                "unit": "g",
+                                "percentDailyNeeds": 8
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 3,
+                                "unit": "g",
+                                "percentDailyNeeds": 5
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 455,
+                                "unit": "cal",
+                                "percentDailyNeeds": 23
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 34,
+                                "unit": "g",
+                                "percentDailyNeeds": 52
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 35,
+                                "unit": "g",
+                                "percentDailyNeeds": 70
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 706,
+                                "unit": "cal",
+                                "percentDailyNeeds": 35
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 29,
+                                "unit": "g",
+                                "percentDailyNeeds": 45
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 76,
+                                "unit": "g",
+                                "percentDailyNeeds": 25
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 46,
+                                "unit": "g",
+                                "percentDailyNeeds": 91
+                              }
+                            ]
+                          },
+                          "day": "1",
+                          "items": [
+                            {
+                              "id": 2403,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 630657,
+                                "title": "Double Chocolate Protein Cookies",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2404,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 785,
+                                "name": "",
+                                "title": "orange",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "orange",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/orange.jpg",
+                                    "amount": 1,
+                                    "unit": ""
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2405,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 296213,
+                                "title": "Spinach Salad with Roasted Vegetables and Spiced Chickpea",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2406,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 237677,
+                                "title": "Chicken Parmesan with Spaghetti",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2407,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 787,
+                                "title": "broccoli",
+                                "name": "",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "broccoli",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/broccoli.jpg",
+                                    "amount": 1,
+                                    "unit": "cup"
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2408,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 146191,
+                                "title": "Lindt Dark Chocolate",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1386,
+                                "unit": "cal",
+                                "percentDailyNeeds": 69
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 66,
+                                "unit": "g",
+                                "percentDailyNeeds": 102
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 162,
+                                "unit": "g",
+                                "percentDailyNeeds": 54
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 48,
+                                "unit": "g",
+                                "percentDailyNeeds": 96
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 239,
+                                "unit": "cal",
+                                "percentDailyNeeds": 12
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 11,
+                                "unit": "g",
+                                "percentDailyNeeds": 17
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 34,
+                                "unit": "g",
+                                "percentDailyNeeds": 11
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 5,
+                                "unit": "g",
+                                "percentDailyNeeds": 9
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 732,
+                                "unit": "cal",
+                                "percentDailyNeeds": 37
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 33,
+                                "unit": "g",
+                                "percentDailyNeeds": 51
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 91,
+                                "unit": "g",
+                                "percentDailyNeeds": 30
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 22,
+                                "unit": "g",
+                                "percentDailyNeeds": 44
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 414,
+                                "unit": "cal",
+                                "percentDailyNeeds": 21
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 22,
+                                "unit": "g",
+                                "percentDailyNeeds": 33
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 37,
+                                "unit": "g",
+                                "percentDailyNeeds": 12
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 21,
+                                "unit": "g",
+                                "percentDailyNeeds": 43
+                              }
+                            ]
+                          },
+                          "day": "2",
+                          "items": [
+                            {
+                              "id": 2409,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 101999,
+                                "title": "Greek Gods Yogurt",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2410,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 457,
+                                "name": "",
+                                "title": "berries",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "berries",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/berries-mixed.jpg",
+                                    "amount": 1,
+                                    "unit": "cup"
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2411,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 516377,
+                                "title": "Southwest Quinoa Salad",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2412,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 247683,
+                                "title": "Pesto Caprese Omelette",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2413,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 484337,
+                                "title": "One Ingredient Banana Ice Cream",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1589,
+                                "unit": "cal",
+                                "percentDailyNeeds": 79
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 77,
+                                "unit": "g",
+                                "percentDailyNeeds": 118
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 158,
+                                "unit": "g",
+                                "percentDailyNeeds": 53
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 84,
+                                "unit": "g",
+                                "percentDailyNeeds": 168
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 472,
+                                "unit": "cal",
+                                "percentDailyNeeds": 24
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 14,
+                                "unit": "g",
+                                "percentDailyNeeds": 21
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 62,
+                                "unit": "g",
+                                "percentDailyNeeds": 21
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 27,
+                                "unit": "g",
+                                "percentDailyNeeds": 54
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 568,
+                                "unit": "cal",
+                                "percentDailyNeeds": 28
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 45,
+                                "unit": "g",
+                                "percentDailyNeeds": 69
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 31,
+                                "unit": "g",
+                                "percentDailyNeeds": 10
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 18,
+                                "unit": "g",
+                                "percentDailyNeeds": 36
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 549,
+                                "unit": "cal",
+                                "percentDailyNeeds": 27
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 18,
+                                "unit": "g",
+                                "percentDailyNeeds": 27
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 65,
+                                "unit": "g",
+                                "percentDailyNeeds": 22
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 39,
+                                "unit": "g",
+                                "percentDailyNeeds": 78
+                              }
+                            ]
+                          },
+                          "day": "3",
+                          "items": [
+                            {
+                              "id": 2414,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 157259,
+                                "title": "Cocoa Protein Pancakes",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2415,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 878,
+                                "name": "",
+                                "title": "orange",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "orange",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/orange.jpg",
+                                    "amount": 1,
+                                    "unit": ""
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2416,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 535856,
+                                "title": "BLT Chopped Salad",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2417,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 71144,
+                                "title": "Kind Plus Fruit & Nut Bar - Almond Walnut Macadamia with Peanuts Plus Protein",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2418,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 519197,
+                                "title": "Zesty Sriracha Shrimp and Quinoa",
+                                "imageType": "png"
+                              }
+                            },
+                            {
+                              "id": 2419,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 163427,
+                                "title": "Green Giant Valley Fresh Steamers - Select Sugar Snap Peas",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2420,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 146191,
+                                "title": "Lindt Dark Chocolate",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1343,
+                                "unit": "cal",
+                                "percentDailyNeeds": 67
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 70,
+                                "unit": "g",
+                                "percentDailyNeeds": 108
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 123,
+                                "unit": "g",
+                                "percentDailyNeeds": 41
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 61,
+                                "unit": "g",
+                                "percentDailyNeeds": 122
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 239,
+                                "unit": "cal",
+                                "percentDailyNeeds": 12
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 11,
+                                "unit": "g",
+                                "percentDailyNeeds": 17
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 34,
+                                "unit": "g",
+                                "percentDailyNeeds": 11
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 5,
+                                "unit": "g",
+                                "percentDailyNeeds": 9
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 406,
+                                "unit": "cal",
+                                "percentDailyNeeds": 20
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 17,
+                                "unit": "g",
+                                "percentDailyNeeds": 26
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 56,
+                                "unit": "g",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 10,
+                                "unit": "g",
+                                "percentDailyNeeds": 21
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 698,
+                                "unit": "cal",
+                                "percentDailyNeeds": 35
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 43,
+                                "unit": "g",
+                                "percentDailyNeeds": 66
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 34,
+                                "unit": "g",
+                                "percentDailyNeeds": 11
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 46,
+                                "unit": "g",
+                                "percentDailyNeeds": 92
+                              }
+                            ]
+                          },
+                          "day": "4",
+                          "items": [
+                            {
+                              "id": 2421,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 101999,
+                                "title": "Greek Gods Yogurt",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2422,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "berries",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "berries",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/berries-mixed.jpg",
+                                    "amount": 1,
+                                    "unit": "cup"
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2423,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 535563,
+                                "title": "Black Bean Quinoa Salad",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2424,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 622598,
+                                "title": "Pittata - Pizza Frittata",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2425,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 484337,
+                                "title": "One Ingredient Banana Ice Cream",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1247,
+                                "unit": "cal",
+                                "percentDailyNeeds": 62
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 61,
+                                "unit": "g",
+                                "percentDailyNeeds": 95
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 103,
+                                "unit": "g",
+                                "percentDailyNeeds": 34
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 78,
+                                "unit": "g",
+                                "percentDailyNeeds": 156
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 295,
+                                "unit": "cal",
+                                "percentDailyNeeds": 15
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 12,
+                                "unit": "g",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 42,
+                                "unit": "g",
+                                "percentDailyNeeds": 14
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 11,
+                                "unit": "g",
+                                "percentDailyNeeds": 23
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 455,
+                                "unit": "cal",
+                                "percentDailyNeeds": 23
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 34,
+                                "unit": "g",
+                                "percentDailyNeeds": 52
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 1,
+                                "unit": "g",
+                                "percentDailyNeeds": 0
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 35,
+                                "unit": "g",
+                                "percentDailyNeeds": 70
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 497,
+                                "unit": "cal",
+                                "percentDailyNeeds": 25
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 15,
+                                "unit": "g",
+                                "percentDailyNeeds": 24
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 60,
+                                "unit": "g",
+                                "percentDailyNeeds": 20
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 32,
+                                "unit": "g",
+                                "percentDailyNeeds": 63
+                              }
+                            ]
+                          },
+                          "day": "5",
+                          "items": [
+                            {
+                              "id": 2426,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 71144,
+                                "title": "Kind Plus Fruit & Nut Bar - Almond Walnut Macadamia with Peanuts Plus Protein",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2427,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "banana",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "banana",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/bananas.jpg",
+                                    "amount": 1,
+                                    "unit": ""
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2428,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 296213,
+                                "title": "Spinach Salad with Roasted Vegetables and Spiced Chickpea",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2429,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 497301,
+                                "title": "Shrimp Scampi",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2430,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 581021,
+                                "title": "Black Bean Brownies: Fudgy Fun",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1683,
+                                "unit": "cal",
+                                "percentDailyNeeds": 84
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 68,
+                                "unit": "g",
+                                "percentDailyNeeds": 105
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 139,
+                                "unit": "g",
+                                "percentDailyNeeds": 46
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 106,
+                                "unit": "g",
+                                "percentDailyNeeds": 212
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 490,
+                                "unit": "cal",
+                                "percentDailyNeeds": 24
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 15,
+                                "unit": "g",
+                                "percentDailyNeeds": 23
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 65,
+                                "unit": "g",
+                                "percentDailyNeeds": 22
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 26,
+                                "unit": "g",
+                                "percentDailyNeeds": 53
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 378,
+                                "unit": "cal",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 33,
+                                "unit": "g",
+                                "percentDailyNeeds": 51
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 16,
+                                "unit": "g",
+                                "percentDailyNeeds": 5
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 8,
+                                "unit": "g",
+                                "percentDailyNeeds": 16
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 816,
+                                "unit": "cal",
+                                "percentDailyNeeds": 41
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 21,
+                                "unit": "g",
+                                "percentDailyNeeds": 32
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 58,
+                                "unit": "g",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 72,
+                                "unit": "g",
+                                "percentDailyNeeds": 144
+                              }
+                            ]
+                          },
+                          "day": "6",
+                          "items": [
+                            {
+                              "id": 2431,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 157259,
+                                "title": "Cocoa Protein Pancakes",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2432,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "berries",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "berries",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/berries-mixed.jpg",
+                                    "amount": 1,
+                                    "unit": "cup"
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2433,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 535856,
+                                "title": "BLT Chopped Salad",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2434,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 149425,
+                                "title": "Herb and Cheddar Cordon Bleu",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2435,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "sprouts",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "brussels sprouts",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/brussels-sprouts.jpg",
+                                    "amount": 1,
+                                    "unit": "cup"
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2436,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "wine",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "wine",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/white-wine.jpg",
+                                    "amount": 5,
+                                    "unit": "ounces"
+                                  }
+                                ]
+                              }
+                            }
+                          ]
+                        },
+                        {
+                          "nutritionSummary": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 1442,
+                                "unit": "cal",
+                                "percentDailyNeeds": 72
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 69,
+                                "unit": "g",
+                                "percentDailyNeeds": 106
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 147,
+                                "unit": "g",
+                                "percentDailyNeeds": 49
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 73,
+                                "unit": "g",
+                                "percentDailyNeeds": 147
+                              }
+                            ]
+                          },
+                          "nutritionSummaryBreakfast": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 444,
+                                "unit": "cal",
+                                "percentDailyNeeds": 22
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 12,
+                                "unit": "g",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 51,
+                                "unit": "g",
+                                "percentDailyNeeds": 17
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 38,
+                                "unit": "g",
+                                "percentDailyNeeds": 76
+                              }
+                            ]
+                          },
+                          "nutritionSummaryLunch": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 406,
+                                "unit": "cal",
+                                "percentDailyNeeds": 20
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 17,
+                                "unit": "g",
+                                "percentDailyNeeds": 26
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 56,
+                                "unit": "g",
+                                "percentDailyNeeds": 19
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 10,
+                                "unit": "g",
+                                "percentDailyNeeds": 21
+                              }
+                            ]
+                          },
+                          "nutritionSummaryDinner": {
+                            "nutrients": [
+                              {
+                                "name": "Calories",
+                                "amount": 593,
+                                "unit": "cal",
+                                "percentDailyNeeds": 30
+                              },
+                              {
+                                "name": "Fat",
+                                "amount": 40,
+                                "unit": "g",
+                                "percentDailyNeeds": 62
+                              },
+                              {
+                                "name": "Carbohydrates",
+                                "amount": 41,
+                                "unit": "g",
+                                "percentDailyNeeds": 14
+                              },
+                              {
+                                "name": "Protein",
+                                "amount": 25,
+                                "unit": "g",
+                                "percentDailyNeeds": 50
+                              }
+                            ]
+                          },
+                          "day": "7",
+                          "items": [
+                            {
+                              "id": 2437,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 619085,
+                                "title": "Protein Packed Healthy French Toast with Chocolate and Peanut Butter {Super Simple, Whole Wheat}",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2438,
+                              "slot": 1,
+                              "position": 0,
+                              "type": "INGREDIENTS",
+                              "value": {
+                                "id": 877,
+                                "name": "",
+                                "title": "orange",
+                                "servings": "1",
+                                "imageType": "jpg",
+                                "ingredients": [
+                                  {
+                                    "name": "orange",
+                                    "image": "https://spoonacular.com/cdn/ingredients_100x100/orange.jpg",
+                                    "amount": 1,
+                                    "unit": ""
+                                  }
+                                ]
+                              }
+                            },
+                            {
+                              "id": 2439,
+                              "slot": 2,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 535563,
+                                "title": "Black Bean Quinoa Salad",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2440,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "RECIPE",
+                              "value": {
+                                "id": 590570,
+                                "title": "Asian Beef Lettuce Wraps",
+                                "imageType": "jpg"
+                              }
+                            },
+                            {
+                              "id": 2441,
+                              "slot": 3,
+                              "position": 0,
+                              "type": "PRODUCT",
+                              "value": {
+                                "id": 146191,
+                                "title": "Lindt Dark Chocolate",
+                                "imageType": "jpg"
+                              }
+                            }
+                          ]
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "id",
+            "description": "The shopping list item id.",
+            "schema": {
+              "type": "integer",
+              "example": 15678
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template"
+        },
+        "summary": "Get Meal Plan Template",
+        "description": "Get information about a meal plan template.",
+        "operationId": "getMealPlanTemplate",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      },
+      "delete": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "id",
+            "description": "The shopping list item id.",
+            "schema": {
+              "type": "integer",
+              "example": 15678
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "hash",
+            "description": "The private hash for the username.",
+            "schema": {
+              "type": "string",
+              "example": "4b5v4398573406"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Delete-Meal-Plan-Template"
+        },
+        "summary": "Delete Meal Plan Template",
+        "description": "Delete a meal plan template for a user.",
+        "operationId": "deleteMealPlanTemplate",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/shopping-list": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "aisles": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "aisle": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "items": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "type": "object",
+                              "properties": {
+                                "id": {
+                                  "type": "integer"
+                                },
+                                "name": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "measures": {
+                                  "type": "object",
+                                  "properties": {
+                                    "original": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "metric": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "us": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    }
+                                  },
+                                  "required": [
+                                    "original",
+                                    "metric",
+                                    "us"
+                                  ]
+                                },
+                                "pantryItem": {
+                                  "type": "boolean"
+                                },
+                                "aisle": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "cost": {
+                                  "type": "number"
+                                },
+                                "ingredientId": {
+                                  "type": "integer"
+                                }
+                              },
+                              "required": [
+                                "id",
+                                "name",
+                                "pantryItem",
+                                "aisle",
+                                "cost",
+                                "ingredientId"
+                              ]
+                            }
+                          }
+                        },
+                        "required": [
+                          "aisle"
+                        ]
+                      }
+                    },
+                    "cost": {
+                      "type": "number"
+                    },
+                    "startDate": {
+                      "type": "number"
+                    },
+                    "endDate": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "aisles",
+                    "cost",
+                    "startDate",
+                    "endDate"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "aisles": [
+                        {
+                          "aisle": "Baking",
+                          "items": [
+                            {
+                              "id": 115388,
+                              "name": "baking powder",
+                              "measures": {
+                                "original": {
+                                  "amount": 1,
+                                  "unit": "package"
+                                },
+                                "metric": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                },
+                                "us": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                }
+                              },
+                              "pantryItem": false,
+                              "aisle": "Baking",
+                              "cost": 0.71,
+                              "ingredientId": 18369
+                            }
+                          ]
+                        }
+                      ],
+                      "cost": 1.43,
+                      "startDate": 1588291200,
+                      "endDate": 1588896000
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Get-Shopping-List"
+        },
+        "summary": "Get Shopping List",
+        "description": "Get the current shopping list for the given user.",
+        "operationId": "getShoppingList",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/shopping-list/{start_date}/{end_date}": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "aisles": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "aisle": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "items": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "type": "object",
+                              "properties": {
+                                "id": {
+                                  "type": "integer"
+                                },
+                                "name": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "measures": {
+                                  "type": "object",
+                                  "properties": {
+                                    "original": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "metric": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "us": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    }
+                                  },
+                                  "required": [
+                                    "original",
+                                    "metric",
+                                    "us"
+                                  ]
+                                },
+                                "pantryItem": {
+                                  "type": "boolean"
+                                },
+                                "aisle": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "cost": {
+                                  "type": "number"
+                                },
+                                "ingredientId": {
+                                  "type": "integer"
+                                }
+                              },
+                              "required": [
+                                "id",
+                                "name",
+                                "pantryItem",
+                                "aisle",
+                                "cost",
+                                "ingredientId"
+                              ]
+                            }
+                          }
+                        },
+                        "required": [
+                          "aisle"
+                        ]
+                      }
+                    },
+                    "cost": {
+                      "type": "number"
+                    },
+                    "startDate": {
+                      "type": "number"
+                    },
+                    "endDate": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "aisles",
+                    "cost",
+                    "startDate",
+                    "endDate"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "aisles": [
+                        {
+                          "aisle": "Baking",
+                          "items": [
+                            {
+                              "id": 115388,
+                              "name": "baking powder",
+                              "measures": {
+                                "original": {
+                                  "amount": 1,
+                                  "unit": "package"
+                                },
+                                "metric": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                },
+                                "us": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                }
+                              },
+                              "pantryItem": false,
+                              "aisle": "Baking",
+                              "cost": 0.71,
+                              "ingredientId": 18369
+                            }
+                          ]
+                        }
+                      ],
+                      "cost": 0.71,
+                      "startDate": 1588291200,
+                      "endDate": 1588896000
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "start_date",
+            "description": "The start date in the format yyyy-mm-dd.",
+            "schema": {
+              "type": "string",
+              "example": "2020-06-01"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "end_date",
+            "description": "The end date in the format yyyy-mm-dd.",
+            "schema": {
+              "type": "string",
+              "example": "2020-06-07"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Generate-Shopping-List"
+        },
+        "summary": "Generate Shopping List",
+        "description": "Generate the shopping list for a user from the meal planner in a given time frame.",
+        "operationId": "generateShoppingList",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/users/connect": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "username": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "hash": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "username",
+                    "hash"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "username": "api_123_user",
+                      "hash": "q572587bq2405724q05"
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "username": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "firstName": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "lastName": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "email": {
+                    "type": "string",
+                    "minLength": 1
+                  }
+                },
+                "required": [
+                  "username",
+                  "firstName",
+                  "lastName",
+                  "email"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "username": "your user's name",
+                    "firstName": "your user's first name",
+                    "lastName": "your user's last name",
+                    "email": "your user's email"
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Connect-User"
+        },
+        "summary": "Connect User",
+        "description": "In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.",
+        "operationId": "connectUser",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/shopping-list/items": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "aisles": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "aisle": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "items": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "type": "object",
+                              "properties": {
+                                "id": {
+                                  "type": "integer"
+                                },
+                                "name": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "measures": {
+                                  "type": "object",
+                                  "properties": {
+                                    "original": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "metric": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    },
+                                    "us": {
+                                      "type": "object",
+                                      "required": [
+                                        "amount",
+                                        "unit"
+                                      ],
+                                      "properties": {
+                                        "amount": {
+                                          "type": "number"
+                                        },
+                                        "unit": {
+                                          "type": "string",
+                                          "minLength": 1
+                                        }
+                                      }
+                                    }
+                                  },
+                                  "required": [
+                                    "original",
+                                    "metric",
+                                    "us"
+                                  ]
+                                },
+                                "pantryItem": {
+                                  "type": "boolean"
+                                },
+                                "aisle": {
+                                  "type": "string",
+                                  "minLength": 1
+                                },
+                                "cost": {
+                                  "type": "number"
+                                },
+                                "ingredientId": {
+                                  "type": "integer"
+                                }
+                              },
+                              "required": [
+                                "id",
+                                "name",
+                                "pantryItem",
+                                "aisle",
+                                "cost",
+                                "ingredientId"
+                              ]
+                            }
+                          }
+                        },
+                        "required": [
+                          "aisle"
+                        ]
+                      }
+                    },
+                    "cost": {
+                      "type": "number"
+                    },
+                    "startDate": {
+                      "type": "number"
+                    },
+                    "endDate": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "aisles",
+                    "cost",
+                    "startDate",
+                    "endDate"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "aisles": [
+                        {
+                          "aisle": "Baking",
+                          "items": [
+                            {
+                              "id": 115388,
+                              "name": "baking powder",
+                              "measures": {
+                                "original": {
+                                  "amount": 1,
+                                  "unit": "package"
+                                },
+                                "metric": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                },
+                                "us": {
+                                  "amount": 1,
+                                  "unit": "pkg"
+                                }
+                              },
+                              "pantryItem": false,
+                              "aisle": "Baking",
+                              "cost": 0.71,
+                              "ingredientId": 18369
+                            }
+                          ]
+                        }
+                      ],
+                      "cost": 0.71,
+                      "startDate": 1588291200,
+                      "endDate": 1588896000
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/json": {
+              "schema": {
+                "description": "",
+                "type": "object",
+                "properties": {
+                  "item": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "aisle": {
+                    "type": "string",
+                    "minLength": 1
+                  },
+                  "parse": {
+                    "type": "boolean"
+                  }
+                },
+                "required": [
+                  "item",
+                  "aisle",
+                  "parse"
+                ]
+              },
+              "examples": {
+                "example-1": {
+                  "value": {
+                    "item": "1 package baking powder",
+                    "aisle": "Baking",
+                    "parse": true
+                  }
+                }
+              }
+            }
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Add-to-Shopping-List"
+        },
+        "summary": "Add to Shopping List",
+        "description": "Add an item to the current shopping list of a user.",
+        "operationId": "addToShoppingList",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/mealplanner/{username}/shopping-list/items/{id}": {
+      "delete": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object"
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "username",
+            "description": "The username.",
+            "schema": {
+              "type": "string",
+              "example": "dsky"
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "name": "id",
+            "description": "The shopping list item id.",
+            "schema": {
+              "type": "integer",
+              "example": 15678
+            },
+            "required": true,
+            "style": "simple",
+            "explode": false,
+            "in": "path"
+          },
+          {
+            "$ref": "#/components/parameters/hash"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Delete-from-Shopping-List"
+        },
+        "summary": "Delete from Shopping List",
+        "description": "Delete an item from the current shopping list of the user.",
+        "operationId": "deleteFromShoppingList",
+        "deprecated": false,
+        "tags": [
+          "meal planning"
+        ]
+      }
+    },
+    "/food/restaurants/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "type": "object",
+                  "properties": {
+                    "restaurants": {
+                      "type": "array",
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "_id": {
+                            "type": "string"
+                          },
+                          "name": {
+                            "type": "string"
+                          },
+                          "phone_number": {
+                            "type": "integer"
+                          },
+                          "address": {
+                            "type": "object",
+                            "properties": {
+                              "street_addr": {
+                                "type": "string"
+                              },
+                              "city": {
+                                "type": "string"
+                              },
+                              "state": {
+                                "type": "string"
+                              },
+                              "zipcode": {
+                                "type": "string"
+                              },
+                              "country": {
+                                "type": "string"
+                              },
+                              "lat": {
+                                "type": "number"
+                              },
+                              "lon": {
+                                "type": "number"
+                              },
+                              "street_addr_2": {
+                                "type": "string"
+                              },
+                              "latitude": {
+                                "type": "number"
+                              },
+                              "longitude": {
+                                "type": "number"
+                              }
+                            }
+                          },
+                          "type": {
+                            "type": "string"
+                          },
+                          "description": {
+                            "type": "string"
+                          },
+                          "local_hours": {
+                            "type": "object",
+                            "properties": {
+                              "operational": {
+                                "type": "object",
+                                "properties": {
+                                  "Monday": {
+                                    "type": "string"
+                                  },
+                                  "Tuesday": {
+                                    "type": "string"
+                                  },
+                                  "Wednesday": {
+                                    "type": "string"
+                                  },
+                                  "Thursday": {
+                                    "type": "string"
+                                  },
+                                  "Friday": {
+                                    "type": "string"
+                                  },
+                                  "Saturday": {
+                                    "type": "string"
+                                  },
+                                  "Sunday": {
+                                    "type": "string"
+                                  }
+                                }
+                              },
+                              "delivery": {
+                                "type": "object",
+                                "properties": {
+                                  "Monday": {
+                                    "type": "string"
+                                  },
+                                  "Tuesday": {
+                                    "type": "string"
+                                  },
+                                  "Wednesday": {
+                                    "type": "string"
+                                  },
+                                  "Thursday": {
+                                    "type": "string"
+                                  },
+                                  "Friday": {
+                                    "type": "string"
+                                  },
+                                  "Saturday": {
+                                    "type": "string"
+                                  },
+                                  "Sunday": {
+                                    "type": "string"
+                                  }
+                                }
+                              },
+                              "pickup": {
+                                "type": "object",
+                                "properties": {
+                                  "Monday": {
+                                    "type": "string"
+                                  },
+                                  "Tuesday": {
+                                    "type": "string"
+                                  },
+                                  "Wednesday": {
+                                    "type": "string"
+                                  },
+                                  "Thursday": {
+                                    "type": "string"
+                                  },
+                                  "Friday": {
+                                    "type": "string"
+                                  },
+                                  "Saturday": {
+                                    "type": "string"
+                                  },
+                                  "Sunday": {
+                                    "type": "string"
+                                  }
+                                }
+                              },
+                              "dine_in": {
+                                "type": "object",
+                                "properties": {
+                                  "Monday": {
+                                    "type": "string"
+                                  },
+                                  "Tuesday": {
+                                    "type": "string"
+                                  },
+                                  "Wednesday": {
+                                    "type": "string"
+                                  },
+                                  "Thursday": {
+                                    "type": "string"
+                                  },
+                                  "Friday": {
+                                    "type": "string"
+                                  },
+                                  "Saturday": {
+                                    "type": "string"
+                                  },
+                                  "Sunday": {
+                                    "type": "string"
+                                  }
+                                }
+                              }
+                            }
+                          },
+                          "cuisines": {
+                            "type": "array",
+                            "items": {
+                              "type": "string"
+                            }
+                          },
+                          "food_photos": {
+                            "type": "array",
+                            "items": {
+                              "type": "string"
+                            }
+                          },
+                          "logo_photos": {
+                            "type": "array",
+                            "items": {
+                              "type": "string"
+                            }
+                          },
+                          "store_photos": {
+                            "type": "array",
+                            "items": {
+                              "type": "string"
+                            }
+                          },
+                          "dollar_signs": {
+                            "type": "integer"
+                          },
+                          "pickup_enabled": {
+                            "type": "boolean"
+                          },
+                          "delivery_enabled": {
+                            "type": "boolean"
+                          },
+                          "is_open": {
+                            "type": "boolean"
+                          },
+                          "offers_first_party_delivery": {
+                            "type": "boolean"
+                          },
+                          "offers_third_party_delivery": {
+                            "type": "boolean"
+                          },
+                          "miles": {
+                            "type": "number"
+                          },
+                          "weighted_rating_value": {
+                            "type": "number"
+                          },
+                          "aggregated_rating_count": {
+                            "type": "integer"
+                          }
+                        }
+                      }
+                    }
+                  }
+                },
+                "examples": {
+                  "Example 1": {
+                    "value": {
+                      "restaurants": [
+                        {
+                          "_id": "a8b49c84-a92d-4f06-802e-467af49feaf0",
+                          "name": "South Beach Cafe",
+                          "phone_number": 14159741115,
+                          "address": {
+                            "street_addr": "800 The Embarcadero",
+                            "city": "San Francisco",
+                            "state": "CA",
+                            "zipcode": "94107",
+                            "country": "US",
+                            "lat": 37.78129959,
+                            "lon": -122.38869477,
+                            "street_addr_2": "",
+                            "latitude": 37.78129959,
+                            "longitude": -122.38869477
+                          },
+                          "type": "restaurant",
+                          "description": "Italian, Pizza",
+                          "local_hours": {
+                            "operational": {
+                              "Monday": "07:00AM - 09:00PM",
+                              "Tuesday": "07:00AM - 09:00PM",
+                              "Wednesday": "07:00AM - 09:00PM",
+                              "Thursday": "07:00AM - 09:00PM",
+                              "Friday": "07:00AM - 09:00PM",
+                              "Saturday": "08:00AM - 09:00PM",
+                              "Sunday": "08:00AM - 09:00PM"
+                            },
+                            "delivery": {
+                              "Monday": "07:00AM - 09:00PM",
+                              "Tuesday": "07:00AM - 09:00PM",
+                              "Wednesday": "07:00AM - 09:00PM",
+                              "Thursday": "07:00AM - 09:00PM",
+                              "Friday": "07:00AM - 09:00PM",
+                              "Saturday": "08:00AM - 09:00PM",
+                              "Sunday": "08:00AM - 09:00PM"
+                            },
+                            "pickup": {
+                              "Monday": "07:00AM - 09:00PM",
+                              "Tuesday": "07:00AM - 09:00PM",
+                              "Wednesday": "07:00AM - 09:00PM",
+                              "Thursday": "07:00AM - 09:00PM",
+                              "Friday": "07:00AM - 09:00PM",
+                              "Saturday": "08:00AM - 09:00PM",
+                              "Sunday": "08:00AM - 09:00PM"
+                            },
+                            "dine_in": {
+                              "Monday": "07:00AM - 09:00PM",
+                              "Tuesday": "07:00AM - 09:00PM",
+                              "Wednesday": "07:00AM - 09:00PM",
+                              "Thursday": "07:00AM - 09:00PM",
+                              "Friday": "07:00AM - 09:00PM",
+                              "Saturday": "08:00AM - 09:00PM",
+                              "Sunday": "08:00AM - 09:00PM"
+                            }
+                          },
+                          "cuisines": [
+                            "Breakfast",
+                            "Dinner",
+                            "Italian",
+                            "Lunch",
+                            "Pickup",
+                            "Pizza",
+                            "Salads",
+                            "Sandwich",
+                            "Sandwiches",
+                            "Takeout"
+                          ],
+                          "food_photos": [
+                            "https://cdn-img.mealme.ai/f3d0e396f1b552927092bafa65ef2cc4e8b57c22/68747470733a2f2f6d656469612d63646e2e677275626875622e636f6d2f696d6167652f75706c6f61642f62657462706b3570747a37756a306279616b6a672e6a7067"
+                          ],
+                          "logo_photos": [
+                            "https://cdn-img.mealme.ai/25b450d4e72eea47dccd744c326e49e23343bd0d/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f677275626875622f696d6167652f75706c6f61642f76313531383830323236382f63686a6a356173716f6766696e726f7671376f732e706e67"
+                          ],
+                          "store_photos": [],
+                          "dollar_signs": 2,
+                          "pickup_enabled": true,
+                          "delivery_enabled": true,
+                          "is_open": false,
+                          "offers_first_party_delivery": false,
+                          "offers_third_party_delivery": true,
+                          "miles": 0.2508434381960197,
+                          "weighted_rating_value": 4.725654450261779,
+                          "aggregated_rating_count": 191
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "The search query.",
+            "schema": {
+              "type": "string",
+              "example": "beach cafe"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "lat",
+            "description": "The latitude of the user's location.",
+            "schema": {
+              "type": "number",
+              "example": 37.7786357
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "lng",
+            "description": "The longitude of the user's location.\".",
+            "schema": {
+              "type": "number",
+              "example": -122.3918135
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "distance",
+            "description": "The distance around the location in miles.",
+            "schema": {
+              "type": "number",
+              "example": 2
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "budget",
+            "description": "The user's budget for a meal in USD.",
+            "schema": {
+              "type": "number",
+              "example": 20
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "cuisine",
+            "description": "The cuisine of the restaurant.",
+            "schema": {
+              "type": "string",
+              "example": "italian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "min-rating",
+            "description": "The minimum rating of the restaurant between 0 and 5.",
+            "schema": {
+              "type": "number",
+              "example": 4.4
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "is-open",
+            "description": "Whether the restaurant must be open at the time of search.",
+            "schema": {
+              "type": "boolean",
+              "example": true
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "sort",
+            "description": "How to sort the results, one of the following 'cheapest', 'fastest', 'rating', 'distance' or the default 'relevance'.",
+            "schema": {
+              "type": "string",
+              "example": "distance"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "page",
+            "description": "The page number of results.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Restaurants"
+        },
+        "summary": "Search Restaurants",
+        "description": "Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.",
+        "operationId": "searchRestaurants",
+        "deprecated": false
+      }
+    },
+    "/food/wine/dishes": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "pairings": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "text": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "pairings",
+                    "text"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "pairings": [
+                        "stew",
+                        "steak",
+                        "chili",
+                        "burger"
+                      ],
+                      "text": "Malbec is a dry red wine which is bold and full bodied. It goes especially well with round steak, tri tip steak, steak, boneless pork chops, and pizza burger."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "wine",
+            "description": "The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".",
+            "schema": {
+              "type": "string",
+              "example": "malbec"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Dish-Pairing-for-Wine"
+        },
+        "summary": "Dish Pairing for Wine",
+        "description": "Find a dish that goes well with a given wine.",
+        "operationId": "getDishPairingForWine",
+        "deprecated": false,
+        "tags": [
+          "wine"
+        ]
+      }
+    },
+    "/food/wine/pairing": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "pairedWines": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    },
+                    "pairingText": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "productMatches": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "averageRating": {
+                            "type": "number"
+                          },
+                          "description": {
+                            "type": "string"
+                          },
+                          "imageUrl": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "link": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "price": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "ratingCount": {
+                            "type": "integer"
+                          },
+                          "score": {
+                            "type": "number"
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "averageRating",
+                          "imageUrl",
+                          "link",
+                          "price",
+                          "ratingCount",
+                          "score"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "pairedWines",
+                    "pairingText",
+                    "productMatches"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "pairedWines": [
+                        "merlot",
+                        "cabernet sauvignon",
+                        "pinot noir"
+                      ],
+                      "pairingText": "Merlot, Cabernet Sauvignon, and Pinot Noir are my top picks for Steak. After all, beef and red wine are a classic combination. Generally, leaner steaks go well with light or medium-bodied reds, such as pinot noir or merlot, while fattier steaks can handle a bold red, such as cabernet sauvingnon. The Sterling Vineyards Merlot with a 5 out of 5 star rating seems like a good match. It costs about 29 dollars per bottle.",
+                      "productMatches": [
+                        {
+                          "id": 428278,
+                          "title": "Sterling Vineyards Merlot",
+                          "averageRating": 1,
+                          "description": null,
+                          "imageUrl": "https://spoonacular.com/productImages/428278-312x231.jpg",
+                          "link": "https://www.amazon.com/2014-Sterling-Vineyards-Valley-Merlot/dp/B071FP8NPG?tag=spoonacular-20",
+                          "price": "$28.99",
+                          "ratingCount": 1,
+                          "score": 0.75
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "food",
+            "description": "The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").",
+            "schema": {
+              "type": "string",
+              "example": "steak"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPrice",
+            "description": "The maximum price for the specific wine recommendation in USD.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Wine-Pairing"
+        },
+        "summary": "Wine Pairing",
+        "description": "Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").",
+        "operationId": "getWinePairing",
+        "deprecated": false,
+        "tags": [
+          "wine"
+        ]
+      }
+    },
+    "/food/wine/description": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "wineDescription": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "wineDescription"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "wineDescription": "Merlot is a dry red wine which is smooth and medium bodied."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "wine",
+            "description": "The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".",
+            "schema": {
+              "type": "string",
+              "example": "merlot"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Wine-Description"
+        },
+        "summary": "Wine Description",
+        "description": "Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".",
+        "operationId": "getWineDescription",
+        "deprecated": false,
+        "tags": [
+          "wine"
+        ]
+      }
+    },
+    "/food/wine/recommendation": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "recommendedWines": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "averageRating": {
+                            "type": "number"
+                          },
+                          "description": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "imageUrl": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "link": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "price": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "ratingCount": {
+                            "type": "integer"
+                          },
+                          "score": {
+                            "type": "number"
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "averageRating",
+                          "description",
+                          "imageUrl",
+                          "link",
+                          "price",
+                          "ratingCount",
+                          "score"
+                        ]
+                      }
+                    },
+                    "totalFound": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "recommendedWines",
+                    "totalFound"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "recommendedWines": [
+                        {
+                          "id": 447938,
+                          "title": "Rombauer Merlot",
+                          "averageRating": 0.96,
+                          "description": "Enticing and lively red color; beautifully aromatic with black cherry and ripe plum. On the palate a purity of blackcurrant, cedar and mint flavors blend together seamlessly. Soft and supple, this wine has a medium-bodied mouth-feel with plush tannins that integrate with the generous finish.Our favorite pairings for this wine include chicken parmesan, cedar-planked salmon over wild rice, and mushroom pizza.",
+                          "imageUrl": "https://spoonacular.com/productImages/447938-312x231.jpg",
+                          "link": "https://click.linksynergy.com/deeplink?id=*QCiIS6t4gA&mid=2025&murl=https%3A%2F%2Fwww.wine.com%2Fproduct%2Frombauer-merlot-2008%2F116883",
+                          "price": "$25.59",
+                          "ratingCount": 5,
+                          "score": 0.8975
+                        },
+                        {
+                          "id": 430475,
+                          "title": "NV The Big Kahuna Merlot",
+                          "averageRating": 0.9,
+                          "description": "A ripe and rounded Merlot with notes of plum, blackberry, and hint of spice.",
+                          "imageUrl": "https://spoonacular.com/productImages/430475-312x231.jpg",
+                          "link": "https://www.amazon.com/Big-Kahuna-Merlot-Red-Wine/dp/B01F5XPTUW?tag=spoonacular-20",
+                          "price": "$6.99",
+                          "ratingCount": 4,
+                          "score": 0.823076923076923
+                        }
+                      ],
+                      "totalFound": 21
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "wine",
+            "description": "The type of wine to get a specific product recommendation for.",
+            "schema": {
+              "type": "string",
+              "example": "merlot"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxPrice",
+            "description": "The maximum price for the specific wine recommendation in USD.",
+            "schema": {
+              "type": "number",
+              "example": 50
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minRating",
+            "description": "The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.",
+            "schema": {
+              "type": "number",
+              "example": 0.7
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "number",
+            "description": "The number of wine recommendations expected (between 1 and 100).",
+            "schema": {
+              "type": "number",
+              "example": 3,
+              "minimum": 1,
+              "maximum": 100,
+              "default": 10
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Wine-Recommendation"
+        },
+        "summary": "Wine Recommendation",
+        "description": "Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".",
+        "operationId": "getWineRecommendation",
+        "deprecated": false,
+        "tags": [
+          "wine"
+        ]
+      }
+    },
+    "/food/images/classify": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "category": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "probability": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "category",
+                    "probability"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "category": "burger",
+                      "probability": 0.91354
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "imageUrl",
+            "description": "The URL of the image to be classified.",
+            "schema": {
+              "type": "string",
+              "example": "https://spoonacular.com/recipeImages/635350-240x150.jpg"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Image-Classification-by-URL"
+        },
+        "summary": "Image Classification by URL",
+        "description": "Classify a food image.",
+        "operationId": "imageClassificationByURL",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/images/analyze": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "nutrition": {
+                      "type": "object",
+                      "required": [
+                        "recipesUsed",
+                        "calories",
+                        "fat",
+                        "protein",
+                        "carbs"
+                      ],
+                      "properties": {
+                        "recipesUsed": {
+                          "type": "integer"
+                        },
+                        "calories": {
+                          "type": "object",
+                          "required": [
+                            "value",
+                            "unit",
+                            "confidenceRange95Percent",
+                            "standardDeviation"
+                          ],
+                          "properties": {
+                            "value": {
+                              "type": "number"
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "confidenceRange95Percent": {
+                              "type": "object",
+                              "required": [
+                                "min",
+                                "max"
+                              ],
+                              "properties": {
+                                "min": {
+                                  "type": "number"
+                                },
+                                "max": {
+                                  "type": "number"
+                                }
+                              }
+                            },
+                            "standardDeviation": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "fat": {
+                          "type": "object",
+                          "required": [
+                            "value",
+                            "unit",
+                            "confidenceRange95Percent",
+                            "standardDeviation"
+                          ],
+                          "properties": {
+                            "value": {
+                              "type": "number"
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "confidenceRange95Percent": {
+                              "type": "object",
+                              "required": [
+                                "min",
+                                "max"
+                              ],
+                              "properties": {
+                                "min": {
+                                  "type": "number"
+                                },
+                                "max": {
+                                  "type": "number"
+                                }
+                              }
+                            },
+                            "standardDeviation": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "protein": {
+                          "type": "object",
+                          "required": [
+                            "value",
+                            "unit",
+                            "confidenceRange95Percent",
+                            "standardDeviation"
+                          ],
+                          "properties": {
+                            "value": {
+                              "type": "number"
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "confidenceRange95Percent": {
+                              "type": "object",
+                              "required": [
+                                "min",
+                                "max"
+                              ],
+                              "properties": {
+                                "min": {
+                                  "type": "number"
+                                },
+                                "max": {
+                                  "type": "number"
+                                }
+                              }
+                            },
+                            "standardDeviation": {
+                              "type": "number"
+                            }
+                          }
+                        },
+                        "carbs": {
+                          "type": "object",
+                          "required": [
+                            "value",
+                            "unit",
+                            "confidenceRange95Percent",
+                            "standardDeviation"
+                          ],
+                          "properties": {
+                            "value": {
+                              "type": "number"
+                            },
+                            "unit": {
+                              "type": "string",
+                              "minLength": 1
+                            },
+                            "confidenceRange95Percent": {
+                              "type": "object",
+                              "required": [
+                                "min",
+                                "max"
+                              ],
+                              "properties": {
+                                "min": {
+                                  "type": "number"
+                                },
+                                "max": {
+                                  "type": "number"
+                                }
+                              }
+                            },
+                            "standardDeviation": {
+                              "type": "number"
+                            }
+                          }
+                        }
+                      }
+                    },
+                    "category": {
+                      "type": "object",
+                      "required": [
+                        "name",
+                        "probability"
+                      ],
+                      "properties": {
+                        "name": {
+                          "type": "string",
+                          "minLength": 1
+                        },
+                        "probability": {
+                          "type": "number"
+                        }
+                      }
+                    },
+                    "recipes": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "id": {
+                            "type": "integer"
+                          },
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "imageType": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "url": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "id",
+                          "title",
+                          "imageType",
+                          "url"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "nutrition",
+                    "category",
+                    "recipes"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "nutrition": {
+                        "recipesUsed": 25,
+                        "calories": {
+                          "value": 508,
+                          "unit": "calories",
+                          "confidenceRange95Percent": {
+                            "min": 428.97,
+                            "max": 571.98
+                          },
+                          "standardDeviation": 182.4
+                        },
+                        "fat": {
+                          "value": 21,
+                          "unit": "g",
+                          "confidenceRange95Percent": {
+                            "min": 21.29,
+                            "max": 32.95
+                          },
+                          "standardDeviation": 14.88
+                        },
+                        "protein": {
+                          "value": 29,
+                          "unit": "g",
+                          "confidenceRange95Percent": {
+                            "min": 22.58,
+                            "max": 33.7
+                          },
+                          "standardDeviation": 14.19
+                        },
+                        "carbs": {
+                          "value": 40,
+                          "unit": "g",
+                          "confidenceRange95Percent": {
+                            "min": 29.74,
+                            "max": 44.96
+                          },
+                          "standardDeviation": 19.42
+                        }
+                      },
+                      "category": {
+                        "name": "burger",
+                        "probability": 0.9998999999999999
+                      },
+                      "recipes": [
+                        {
+                          "id": 477749,
+                          "title": "Burger Club: Award-Winning Logan County Burger Patty Melt",
+                          "imageType": "jpg",
+                          "url": "http://www.barbarabakes.com/2010/05/burger-club-award-winning-logan-county/"
+                        },
+                        {
+                          "id": 493632,
+                          "title": "New York Burger Week: Pretzel Burger with Beer Cheese",
+                          "imageType": "jpg",
+                          "url": "http://www.foodrepublic.com/2013/09/23/new-york-burger-week-pretzel-burger-beer-cheese"
+                        },
+                        {
+                          "id": 23359,
+                          "title": "Beef Burger Recipe (elvis Burger With Salad & Gherkin)",
+                          "imageType": "jpg",
+                          "url": "http://www.jamieoliver.com/recipes/beef-recipes/elvis-burger-with-pickled-gherkin"
+                        },
+                        {
+                          "id": 149115,
+                          "title": "Surf N' Turf Burger (Grilled Burger with Lobster and Bacon)",
+                          "imageType": "jpg",
+                          "url": "http://www.seriouseats.com/recipes/2013/06/lobster-bacon-burger-recipe.html"
+                        },
+                        {
+                          "id": 861442,
+                          "title": "Istanbul-Style Wet Burger (Islak Burger)",
+                          "imageType": "jpg",
+                          "url": "http://www.epicurious.com/recipes/food/views/istanbul-style-wet-burger-islak-burger?mbid=nl_02272017_Daily_CTN_PM+(1)"
+                        },
+                        {
+                          "id": 600423,
+                          "title": "Rajma Burger (Red Kidney Beans Burger)",
+                          "imageType": "jpg",
+                          "url": "http://www.spiceupthecurry.com/rajma-burger-red-kidney-beans-burger/"
+                        },
+                        {
+                          "id": 493634,
+                          "title": "Chicago Burger Week: The Chicago Deep Dish Pizza Burger",
+                          "imageType": "jpg",
+                          "url": "http://www.foodrepublic.com/2013/09/30/chicago-burger-week-chicago-deep-dish-pizza-burger"
+                        },
+                        {
+                          "id": 487346,
+                          "title": "aloo tikki burger , north indian style aloo tikki burger",
+                          "imageType": "jpg",
+                          "url": "http://www.vegrecipesofindia.com/aloo-tikki-burger/"
+                        },
+                        {
+                          "id": 607330,
+                          "title": "Aloo Tikki Burger | How to make aloo tikki burger at home",
+                          "imageType": "jpg",
+                          "url": "http://www.spiceupthecurry.com/aloo-tikki-burger-recipe/"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "imageUrl",
+            "description": "The URL of the image to be analyzed.",
+            "schema": {
+              "type": "string",
+              "example": "https://spoonacular.com/recipeImages/635350-240x150.jpg"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Image-Analysis-by-URL"
+        },
+        "summary": "Image Analysis by URL",
+        "description": "Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.",
+        "operationId": "imageAnalysisByURL",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/recipes/quickAnswer": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "answer": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "image": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "answer",
+                    "image"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "answer": "There are 16.74 mg of Vitamin C in 2 apples. This covers about 20% of your daily needs of Vitamin C.",
+                      "image": "https://spoonacular.com/cdn/ingredients_100x100/apple.jpg"
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "q",
+            "description": "The nutrition related question.",
+            "schema": {
+              "type": "string",
+              "example": "How much vitamin c is in 2 apples?"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Quick-Answer"
+        },
+        "summary": "Quick Answer",
+        "description": "Answer a nutrition related natural language question.",
+        "operationId": "quickAnswer",
+        "deprecated": false,
+        "tags": [
+          "recipes"
+        ]
+      }
+    },
+    "/food/detect": {
+      "post": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "annotations": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "required": [
+                          "annotation",
+                          "image",
+                          "tag"
+                        ],
+                        "properties": {
+                          "annotation": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "image": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "tag": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "annotations"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "annotations": [
+                        {
+                          "annotation": "cheeseburger",
+                          "image": "https://spoonacular.com/menuItemImages/cheeseburger.jpg",
+                          "tag": "dish"
+                        },
+                        {
+                          "annotation": "mushrooms",
+                          "image": "https://spoonacular.com/cdn/ingredients_100x100/mushrooms.png",
+                          "tag": "ingredient"
+                        },
+                        {
+                          "annotation": "pepperoni",
+                          "image": "https://spoonacular.com/cdn/ingredients_100x100/pepperoni.png",
+                          "tag": "ingredient"
+                        },
+                        {
+                          "annotation": "tomatoes",
+                          "image": "https://spoonacular.com/cdn/ingredients_100x100/tomato.png",
+                          "tag": "ingredient"
+                        },
+                        {
+                          "annotation": "cheddar",
+                          "image": "https://spoonacular.com/cdn/ingredients_100x100/cheddar-cheese.png",
+                          "tag": "ingredient"
+                        },
+                        {
+                          "annotation": "tacos",
+                          "image": "https://spoonacular.com/menuItemImages/taco-isolated.jpg",
+                          "tag": "dish"
+                        },
+                        {
+                          "annotation": "pizza",
+                          "image": "https://spoonacular.com/menuItemImages/cheese-pizza.png",
+                          "tag": "dish"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "requestBody": {
+          "required": true,
+          "content": {
+            "application/x-www-form-urlencoded": {
+              "schema": {
+                "type": "object",
+                "required": [
+                  "text"
+                ],
+                "properties": {
+                  "text": {
+                    "type": "string"
+                  }
+                }
+              },
+              "example": {
+                "text": "I like to eat delicious tacos. The only thing better is a cheeseburger with cheddar. But then again, pizza with pepperoni, mushrooms, and tomatoes is so good too!"
+              }
+            }
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Detect-Food-in-Text"
+        },
+        "summary": "Detect Food in Text",
+        "description": "Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.",
+        "operationId": "detectFoodInText",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/site/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "Articles": {
+                      "type": "array",
+                      "items": {
+                        "$ref": "#/components/schemas/SearchResult"
+                      }
+                    },
+                    "Grocery Products": {
+                      "type": "array",
+                      "items": {
+                        "$ref": "#/components/schemas/SearchResult"
+                      }
+                    },
+                    "Menu Items": {
+                      "type": "array",
+                      "items": {
+                        "$ref": "#/components/schemas/SearchResult"
+                      }
+                    },
+                    "Recipes": {
+                      "type": "array",
+                      "items": {
+                        "$ref": "#/components/schemas/SearchResult"
+                      }
+                    }
+                  },
+                  "required": [
+                    "Articles",
+                    "Grocery Products",
+                    "Menu Items",
+                    "Recipes"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "Articles": [
+                        {
+                          "dataPoints": [],
+                          "image": "https://spoonacular.com/application/frontend/images/academy/vietnamese-cuisine.jpg",
+                          "link": "https://spoonacular.com/academy/vietnamese",
+                          "name": "Traditional Vietnamese Recipes"
+                        },
+                        {
+                          "dataPoints": [],
+                          "image": "https://spoonacular.com/application/frontend/images/academy/thai-cuisine.jpg",
+                          "link": "https://spoonacular.com/academy/thai",
+                          "name": "Authentic Thai Recipes"
+                        },
+                        {
+                          "dataPoints": [],
+                          "image": "https://spoonacular.com/application/frontend/images/academy/korean-food.jpg",
+                          "link": "https://spoonacular.com/academy/korean",
+                          "name": "Typical Korean Recipes"
+                        }
+                      ],
+                      "Grocery Products": [
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Calories",
+                              "value": "30 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "2g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "0.0g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "6g Carbs"
+                            }
+                          ],
+                          "image": "https://spoonacular.com/productImages/218909-312x231.jpg",
+                          "link": "https://spoonacular.com/products/vine-ripe-tomato-paste-218909",
+                          "name": "Vine-ripe Tomato Paste"
+                        },
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Calories",
+                              "value": "30 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "2g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "0.0g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "6g Carbs"
+                            }
+                          ],
+                          "image": "https://spoonacular.com/productImages/178883-312x231.jpg",
+                          "link": "https://spoonacular.com/products/contadina-tomato-paste-178883",
+                          "name": "Contadina Tomato Paste"
+                        },
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Calories",
+                              "value": "30 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "2g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "0.0g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "6g Carbs"
+                            }
+                          ],
+                          "image": "https://spoonacular.com/productImages/137031-312x231.jpg",
+                          "link": "https://spoonacular.com/products/cento-tomato-paste-137031",
+                          "name": "Cento Tomato Paste"
+                        }
+                      ],
+                      "Menu Items": [
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Calories",
+                              "value": "230 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "1g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "15g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "23g Carbs"
+                            }
+                          ],
+                          "image": "https://spoonacular.com/menuItemImages/stir-fry.jpg",
+                          "link": "https://spoonacular.com/menu-items/thai-express-stir-fry-chilli-paste-401670",
+                          "name": "Thai Express Stir-Fry, Chilli Paste"
+                        }
+                      ],
+                      "Recipes": [
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Cost",
+                              "value": "$10.51 per serving"
+                            },
+                            {
+                              "key": "Calories",
+                              "value": "400 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "9g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "32g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "26g Carbs"
+                            }
+                          ],
+                          "image": "https://webknox.com/recipeImages/224844-556x370.jpg",
+                          "link": "https://spoonacular.com/recipes/chermoula-paste-224844",
+                          "name": "Chermoula Paste"
+                        },
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Cost",
+                              "value": "$8.37 per serving"
+                            },
+                            {
+                              "key": "Calories",
+                              "value": "3560 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "119g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "319g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "54g Carbs"
+                            }
+                          ],
+                          "image": "https://webknox.com/recipeImages/146847-556x370.jpg",
+                          "link": "https://spoonacular.com/recipes/lulu-paste-146847",
+                          "name": "Lulu Paste"
+                        },
+                        {
+                          "dataPoints": [
+                            {
+                              "key": "Cost",
+                              "value": "$6.68 per serving"
+                            },
+                            {
+                              "key": "Calories",
+                              "value": "990 Calories"
+                            },
+                            {
+                              "key": "Protein",
+                              "value": "53g Protein"
+                            },
+                            {
+                              "key": "Fat",
+                              "value": "86g Total Fat"
+                            },
+                            {
+                              "key": "Carbs",
+                              "value": "0.82g Carbs"
+                            }
+                          ],
+                          "image": "https://webknox.com/recipeImages/84670-556x370.jpg",
+                          "link": "https://spoonacular.com/recipes/steak-paste-84670",
+                          "name": "Steak Paste"
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.",
+            "schema": {
+              "type": "string",
+              "example": "past"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Site-Content"
+        },
+        "summary": "Search Site Content",
+        "description": "Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.",
+        "operationId": "searchSiteContent",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "query": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "totalResults": {
+                      "type": "integer"
+                    },
+                    "limit": {
+                      "type": "integer"
+                    },
+                    "offset": {
+                      "type": "integer"
+                    },
+                    "searchResults": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "name": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "totalResults": {
+                            "type": "integer"
+                          },
+                          "results": {
+                            "type": "array",
+                            "uniqueItems": true,
+                            "minItems": 0,
+                            "items": {
+                              "$ref": "#/components/schemas/SearchResult"
+                            }
+                          }
+                        },
+                        "required": [
+                          "name",
+                          "totalResults"
+                        ]
+                      }
+                    }
+                  },
+                  "required": [
+                    "query",
+                    "totalResults",
+                    "limit",
+                    "offset",
+                    "searchResults"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "query": "apple",
+                      "totalResults": 5826,
+                      "limit": 2,
+                      "offset": 0,
+                      "searchResults": [
+                        {
+                          "name": "Recipes",
+                          "totalResults": 167,
+                          "results": [
+                            {
+                              "id": "632485",
+                              "name": "Apple Cake",
+                              "image": "https://spoonacular.com/recipeImages/632485-312x231.jpg",
+                              "link": "https://spoonacular.com/recipes/apple-cake-632485",
+                              "type": "HTML",
+                              "relevance": 10000,
+                              "content": "Apple Cake might be just the dessert you are searching for..."
+                            },
+                            {
+                              "id": "632522",
+                              "name": "Apple Crumble",
+                              "image": "https://spoonacular.com/recipeImages/632522-312x231.jpg",
+                              "link": "https://spoonacular.com/recipes/apple-crumble-632522",
+                              "type": "HTML",
+                              "relevance": 9999,
+                              "content": "Apple Crumble might be just the dessert you are searching for..."
+                            }
+                          ]
+                        },
+                        {
+                          "name": "Products",
+                          "totalResults": 3219,
+                          "results": [
+                            {
+                              "id": "5487",
+                              "name": "Pleasant Valley Apple Wine",
+                              "content": null,
+                              "image": "https://spoonacular.com/productImages/469604-312x231.jpg",
+                              "link": "https://spoonacular.com/products/pleasant-valley-apple-wine-469604",
+                              "type": "HTML",
+                              "relevance": 10000
+                            },
+                            {
+                              "id": "428573",
+                              "name": "NV Georgetown Vineyards Apple Wine",
+                              "content": null,
+                              "image": "https://spoonacular.com/productImages/428573-312x231.jpg",
+                              "link": "https://spoonacular.com/products/nv-georgetown-vineyards-apple-wine-428573",
+                              "type": "HTML",
+                              "relevance": 9999
+                            }
+                          ]
+                        },
+                        {
+                          "name": "Menu Items",
+                          "totalResults": 2410,
+                          "results": [
+                            {
+                              "id": "334550",
+                              "name": "Old Chicago Applewood Spiced BBQ Chicken Pizza, Chicago Thick, 12 Inch (Slice)",
+                              "image": null,
+                              "link": "https://spoonacular.com/menu-items/old-chicago-applewood-spiced-bbq-chicken-pizza-chicago-thick-12-inch--334550",
+                              "type": "HTML",
+                              "content": null,
+                              "relevance": 10000
+                            },
+                            {
+                              "id": "422013",
+                              "name": "Huddle House Apple Cobbler a la mode",
+                              "image": null,
+                              "link": "https://spoonacular.com/menu-items/huddle-house-apple-cobbler-a-la-mode-422013",
+                              "type": "HTML",
+                              "content": null,
+                              "relevance": 9999
+                            }
+                          ]
+                        },
+                        {
+                          "name": "Articles",
+                          "totalResults": 28,
+                          "results": [
+                            {
+                              "id": "578",
+                              "name": "Apples",
+                              "image": "https://spoonacular.com/cdn/ingredients_100x100/braeburn-apples.jpg",
+                              "link": "https://spoonacular.com/academy/apples",
+                              "type": "HTML",
+                              "content": null,
+                              "relevance": 90.46
+                            },
+                            {
+                              "id": "252",
+                              "name": "Vinegar",
+                              "image": "https://spoonacular.com/cdn/ingredients_100x100/red-wine-vinegar.jpg",
+                              "link": "https://spoonacular.com/academy/vinegar",
+                              "type": "HTML",
+                              "content": null,
+                              "relevance": 23.8
+                            }
+                          ]
+                        },
+                        {
+                          "name": "Videos",
+                          "totalResults": 2,
+                          "results": [
+                            {
+                              "id": "G0HENy59YkE",
+                              "name": "Pineapple Bundt Cake",
+                              "image": "https://i.ytimg.com/vi/G0HENy59YkE/hqdefault.jpg",
+                              "link": "https://www.youtube.com/watch?v=G0HENy59YkE",
+                              "type": "YOUTUBE_VIDEO",
+                              "relevance": 10000,
+                              "content": "FULL RECIPE HERE: https://tatyanaseverydayfood.com/recipe-items/pineapple-bundt-cake/..."
+                            },
+                            {
+                              "id": "xEENgO5Z5To",
+                              "name": "Pineapple Shrimp Tacos",
+                              "image": "https://i.ytimg.com/vi/xEENgO5Z5To/mqdefault.jpg",
+                              "link": null,
+                              "type": "YOUTUBE_VIDEO",
+                              "relevance": 9999,
+                              "content": "RECIPE: Below in description.\nThese Pineapple Shrimp Tacos cook in 5 minutes and assembly is a breeze..."
+                            }
+                          ]
+                        },
+                        {
+                          "name": "Simple Foods",
+                          "totalResults": 2,
+                          "results": [
+                            {
+                              "id": "78541",
+                              "name": "apple",
+                              "image": "apple.jpg",
+                              "type": "HTML",
+                              "content": null,
+                              "link": null,
+                              "relevance": 10000
+                            },
+                            {
+                              "id": "8782",
+                              "name": "applesauce",
+                              "image": "applesauce.png",
+                              "type": "HTML",
+                              "content": null,
+                              "link": null,
+                              "relevance": 9999
+                            }
+                          ]
+                        }
+                      ]
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "The search query.",
+            "schema": {
+              "type": "string",
+              "example": "apple"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-All-Food"
+        },
+        "summary": "Search All Food",
+        "description": "Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.",
+        "operationId": "searchAllFood",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/videos/search": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "videos": {
+                      "type": "array",
+                      "uniqueItems": true,
+                      "minItems": 0,
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "title": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "length": {
+                            "type": "integer"
+                          },
+                          "rating": {
+                            "type": "number"
+                          },
+                          "shortTitle": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "thumbnail": {
+                            "type": "string",
+                            "minLength": 1
+                          },
+                          "views": {
+                            "type": "integer"
+                          },
+                          "youTubeId": {
+                            "type": "string",
+                            "minLength": 1
+                          }
+                        },
+                        "required": [
+                          "title",
+                          "length",
+                          "rating",
+                          "shortTitle",
+                          "thumbnail",
+                          "views",
+                          "youTubeId"
+                        ]
+                      }
+                    },
+                    "totalResults": {
+                      "type": "integer"
+                    }
+                  },
+                  "required": [
+                    "videos",
+                    "totalResults"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "videos": [
+                        {
+                          "title": "8 One-Pot Pastas",
+                          "length": 370,
+                          "rating": 0.985984219269103,
+                          "shortTitle": "8 One-Pot Pastas",
+                          "thumbnail": "https://i.ytimg.com/vi/YTZGPCCB2FU/mqdefault.jpg",
+                          "views": 550467,
+                          "youTubeId": "YTZGPCCB2FU"
+                        },
+                        {
+                          "title": "Macaroni salad - pasta salad recipes - healthy recipe channel - quick tasty recipe - cooking channel",
+                          "length": 333,
+                          "rating": 1,
+                          "shortTitle": "Macaroni salad",
+                          "thumbnail": "https://i.ytimg.com/vi/81bn4p8H3Kg/mqdefault.jpg",
+                          "views": 307,
+                          "youTubeId": "81bn4p8H3Kg"
+                        }
+                      ],
+                      "totalResults": 172
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "$ref": "#/components/parameters/query"
+          },
+          {
+            "name": "type",
+            "description": "The type of the recipes. See a full list of supported meal types.",
+            "schema": {
+              "type": "string",
+              "example": "main course"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "cuisine",
+            "description": "The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.",
+            "schema": {
+              "type": "string",
+              "example": "italian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "diet",
+            "description": "The diet for which the recipes must be suitable. See a full list of supported diets.",
+            "schema": {
+              "type": "string",
+              "example": "vegetarian"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "includeIngredients",
+            "description": "A comma-separated list of ingredients that the recipes should contain.",
+            "schema": {
+              "type": "string",
+              "example": "tomato,cheese"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "excludeIngredients",
+            "description": "A comma-separated list of ingredients or ingredient types that the recipes must not contain.",
+            "schema": {
+              "type": "string",
+              "example": "eggs"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "minLength",
+            "description": "Minimum video length in seconds.",
+            "schema": {
+              "type": "number",
+              "example": 0
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "maxLength",
+            "description": "Maximum video length in seconds.",
+            "schema": {
+              "type": "number",
+              "example": 999
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "$ref": "#/components/parameters/offset"
+          },
+          {
+            "$ref": "#/components/parameters/number"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Search-Food-Videos"
+        },
+        "summary": "Search Food Videos",
+        "description": "Find recipe and other food related videos.",
+        "operationId": "searchFoodVideos",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/jokes/random": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "text": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "text"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "text": "Any salad can be a Caesar salad if you stab it enough."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Random-Food-Joke"
+        },
+        "summary": "Random Food Joke",
+        "description": "Get a random joke that is related to food. Caution: this is an endpoint for adults!",
+        "operationId": "getARandomFoodJoke",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/trivia/random": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "text": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "text"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "text": "The red food-coloring carmine used in Skittles and other candies is made from boiled cochineal bugs, a type of beetle."
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Random-Food-Trivia"
+        },
+        "summary": "Random Food Trivia",
+        "description": "Returns random food trivia.",
+        "operationId": "getRandomFoodTrivia",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/converse": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "answerText": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "media": {
+                      "type": "array",
+                      "items": {
+                        "type": "object",
+                        "properties": {
+                          "title": {
+                            "type": "string"
+                          },
+                          "image": {
+                            "type": "string"
+                          },
+                          "link": {
+                            "type": "string"
+                          }
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "answerText",
+                    "media"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "answerText": "Baby, if you were a fruit you'd be a fineapple.",
+                      "media": []
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "text",
+            "description": "The request / question / answer from the user to the chatbot.",
+            "schema": {
+              "type": "string",
+              "example": "donut recipes"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "contextId",
+            "description": "An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.",
+            "schema": {
+              "type": "string",
+              "example": "342938"
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Talk-to-Chatbot"
+        },
+        "summary": "Talk to Chatbot",
+        "description": "This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.",
+        "operationId": "talkToChatbot",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    },
+    "/food/converse/suggest": {
+      "get": {
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {},
+            "content": {
+              "application/json": {
+                "schema": {
+                  "description": "",
+                  "type": "object",
+                  "properties": {
+                    "suggests": {
+                      "type": "object",
+                      "properties": {
+                        "_": {
+                          "type": "array",
+                          "uniqueItems": true,
+                          "minItems": 0,
+                          "items": {
+                            "required": [
+                              "name"
+                            ],
+                            "properties": {
+                              "name": {
+                                "type": "string",
+                                "minLength": 1
+                              }
+                            }
+                          }
+                        }
+                      },
+                      "required": [
+                        "_"
+                      ]
+                    },
+                    "words": {
+                      "type": "array",
+                      "items": {
+                        "type": "string"
+                      }
+                    }
+                  },
+                  "required": [
+                    "suggests",
+                    "words"
+                  ]
+                },
+                "examples": {
+                  "example-1": {
+                    "value": {
+                      "suggests": {
+                        "_": [
+                          {
+                            "name": "Tell me something funny"
+                          },
+                          {
+                            "name": "Tell me a food fact"
+                          },
+                          {
+                            "name": "Tell me a joke"
+                          },
+                          {
+                            "name": "Tell me food trivia"
+                          },
+                          {
+                            "name": "Tell me a fact about food"
+                          }
+                        ]
+                      },
+                      "words": []
+                    }
+                  }
+                }
+              }
+            }
+          },
+          "401": {
+            "description": "Unauthorized"
+          },
+          "403": {
+            "description": "Forbidden"
+          },
+          "404": {
+            "description": "Not Found"
+          }
+        },
+        "parameters": [
+          {
+            "name": "query",
+            "description": "A (partial) query from the user. The endpoint will return if it matches topics it can talk about.",
+            "schema": {
+              "type": "string",
+              "example": "tell"
+            },
+            "required": true,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          },
+          {
+            "name": "number",
+            "description": "The number of suggestions to return (between 1 and 25).",
+            "schema": {
+              "type": "number",
+              "example": 5
+            },
+            "required": false,
+            "style": "form",
+            "explode": false,
+            "in": "query"
+          }
+        ],
+        "externalDocs": {
+          "description": "Read entire docs",
+          "url": "https://spoonacular.com/food-api/docs#Conversation-Suggests"
+        },
+        "summary": "Conversation Suggests",
+        "description": "This endpoint returns suggestions for things the user can say or ask the chatbot.",
+        "operationId": "getConversationSuggests",
+        "deprecated": false,
+        "tags": [
+          "misc"
+        ]
+      }
+    }
+  },
+  "components": {
+    "schemas": {
+      "SearchResult": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "image": {
+            "type": "string"
+          },
+          "link": {
+            "type": "string",
+            "nullable": true
+          },
+          "name": {
+            "type": "string"
+          },
+          "type": {
+            "type": "string"
+          },
+          "kvtable": {
+            "type": "string"
+          },
+          "content": {
+            "type": "string",
+            "nullable": true
+          },
+          "id": {
+            "type": "integer"
+          },
+          "relevance": {
+            "type": "number"
+          }
+        },
+        "required": [
+          "name"
+        ]
+      },
+      "ProductInformation": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "id": {
+            "type": "integer"
+          },
+          "title": {
+            "type": "string",
+            "minLength": 1
+          },
+          "upc": {
+            "type": "string",
+            "nullable": true
+          },
+          "usdaCode": {
+            "type": "string",
+            "nullable": true
+          },
+          "breadcrumbs": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "imageType": {
+            "type": "string",
+            "minLength": 1
+          },
+          "badges": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "importantBadges": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "ingredientCount": {
+            "type": "integer"
+          },
+          "generatedText": {
+            "type": "string",
+            "nullable": true
+          },
+          "ingredientList": {
+            "type": "string",
+            "minLength": 1
+          },
+          "ingredients": {
+            "type": "array",
+            "uniqueItems": false,
+            "minItems": 0,
+            "items": {
+              "$ref": "#/components/schemas/IngredientBasics"
+            }
+          },
+          "likes": {
+            "type": "number"
+          },
+          "aisle": {
+            "type": "string",
+            "nullable": true
+          },
+          "credits": {
+            "type": "object",
+            "properties": {
+              "text": { "type": "string" },
+              "link": { "type": "string" },
+              "image": { "type": "string" },
+              "imageLink": { "type": "string" }
+            }
+          },
+          "nutrition": {
+            "type": "object",
+            "required": [
+              "nutrients",
+              "caloricBreakdown"
+            ],
+            "properties": {
+              "nutrients": {
+                "type": "array",
+                "uniqueItems": true,
+                "minItems": 0,
+                "items": {
+                  "type": "object",
+                  "properties": {
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "amount": {
+                      "type": "number"
+                    },
+                    "unit": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "percentOfDailyNeeds": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "name",
+                    "amount",
+                    "unit",
+                    "percentOfDailyNeeds"
+                  ]
+                }
+              },
+              "caloricBreakdown": {
+                "type": "object",
+                "required": [
+                  "percentProtein",
+                  "percentFat",
+                  "percentCarbs"
+                ],
+                "properties": {
+                  "percentProtein": {
+                    "type": "number"
+                  },
+                  "percentFat": {
+                    "type": "number"
+                  },
+                  "percentCarbs": {
+                    "type": "number"
+                  }
+                }
+              }
+            }
+          },
+          "price": {
+            "type": "number"
+          },
+          "servings": {
+            "type": "object",
+            "required": [
+              "number",
+              "size",
+              "unit"
+            ],
+            "properties": {
+              "number": {
+                "type": "number"
+              },
+              "size": {
+                "type": "number"
+              },
+              "unit": {
+                "type": "string",
+                "minLength": 1
+              }
+            }
+          },
+          "spoonacularScore": {
+            "type": "number"
+          }
+        },
+        "required": [
+          "id",
+          "title",
+          "breadcrumbs",
+          "imageType",
+          "badges",
+          "importantBadges",
+          "ingredientCount",
+          "ingredientList",
+          "ingredients",
+          "likes",
+          "aisle",
+          "nutrition",
+          "price",
+          "servings",
+          "spoonacularScore"
+        ],
+        "example": {
+          "breadcrumbs": [
+            "bars"
+          ],
+          "category": "bars",
+          "usdaCode": null,
+          "id": 22347,
+          "title": "SNICKERS Minis Size Chocolate Candy Bars Variety Mix 10.5-oz. Bag",
+          "price": 324,
+          "likes": 0,
+          "badges": [
+            "msg_free",
+            "no_artificial_colors",
+            "no_artificial_flavors",
+            "no_artificial_ingredients",
+            "gluten_free"
+          ],
+          "importantBadges": [
+            "no_artificial_flavors",
+            "no_artificial_colors",
+            "no_artificial_ingredients",
+            "gluten_free",
+            "msg_free"
+          ],
+          "nutrition": {
+            "nutrients": [
+              {
+                "name": "Alcohol",
+                "amount": 0,
+                "unit": "g",
+                "percentOfDailyNeeds": 100
+              },
+              {
+                "name": "Caffeine",
+                "amount": 0,
+                "unit": "mg",
+                "percentOfDailyNeeds": 0
+              },
+              {
+                "name": "Net Carbohydrates",
+                "amount": 24,
+                "unit": "g",
+                "percentOfDailyNeeds": 8.73
+              }
+            ],
+            "caloricBreakdown": {
+              "percentProtein": 4.44,
+              "percentFat": 40,
+              "percentCarbs": 55.56
+            },
+            "calories": 180,
+            "fat": "8g",
+            "protein": "2g",
+            "carbs": "25g"
+          },
+          "servings": {
+            "number": 1,
+            "size": 4,
+            "unit": "pieces",
+            "raw": "4.0 pieces (38 g)"
+          },
+          "spoonacularScore": 0,
+          "aisle": null,
+          "description": "SnickersÂ® brand almond bar.What&#39;s inside... per minis piece.Calories 45, 2% DV.Total fat 2g, 3% DV.Sat fat 1g, 5% DV.Sugars 5g.Sodium 20mg, 1% DV.GDA&#39;s are based on a 2,000 calorie diet.To learn more visit www.marshealthyliving.com.*No DV defined.SnickersÂ® brand.What&#39;s inside... per minis piece.Calories 45, 2% DV.Total fat 2g, 3% DV.Sat fat 1g, 5% DV.Sugars 5g.Sodium 20mg, 1% DV.GDA&#39;s are based on a 2,000 calorie diet.To learn more visit www.marshealthyliving.com.*No DV defined.SnickersÂ® brand peanut butter squared bars.What&#39;s inside... per minis piece.Calories 50, 3% DV.Total fat 2.5g, 4% DV.Sat fat 1g, 5% DV.Sugars 4g.Sodium 30mg, 1% DV.GDA&#39;s are based on a 2,000 calorie diet.To learn more visit www.marshealthyliving.com.*No DV defined.snickers.com.Please save the unused product and wrapper.Mars Real ChocolateÂ®.We value your questions or comments. Call 1-800-551-0702 or visit us at www.snickers.com.Visit us at www.snickers.com.Â®/TM trademarks.Â©Mars, Incorporated.",
+          "image": "https://img.spoonacular.com/products/22347-312x231.jpeg",
+          "imageType": "jpeg",
+          "images": [
+            "https://img.spoonacular.com/products/22347-90x90.jpeg",
+            "https://img.spoonacular.com/products/22347-312x231.jpeg",
+            "https://img.spoonacular.com/products/22347-636x393.jpeg"
+          ],
+          "generatedText": null,
+          "upc": "040000421610",
+          "brand": "Snickers",
+          "ingredients": [
+            {
+              "name": "artificial flavor.snickersâ® brand",
+              "safety_level": null,
+              "description": null
+            },
+            {
+              "name": "cocoa butter",
+              "safety_level": "high",
+              "description": null
+            },
+            {
+              "name": "soy lecithin",
+              "safety_level": "high",
+              "description": "Soy lecithin is <a href=\"http://farrp.unl.edu/resources/gi-fas/opinion-and-summaries/soy-lecithin\">not a concern</a> for most people allergic to soy."
+            }
+          ],
+          "ingredientCount": 32,
+          "ingredientList": "Snickers Brand Almond Bar: Milk Chocolate (Sugar, Cocoa Butter, Chocolate, Skim Milk, Lactose, Milkfat, Soy Lecithin, Artificial Flavor), Corn Syrup, Almonds, Sugar, Milkfat, Skim Milk, Less than 2% - Lactose, Salt, Hydrogenated Palm Kernel Oil and/or Palm Oil, Egg Whites, Chocolate, Artificial Flavor. Snickers Brand: Milk Chocolate (Sugar, Cocoa Butter, Chocolate, Skim Milk, Lactose, Milkfat, Soy Lecithin, Artificial Flavor), Peanuts, Corn Syrup, Sugar, Milkfat, Skim Milk, Partially Hydrogenated Soybean Oil, Lactose, Salt, Egg Whites, Chocolate, Artificial Flavor. Snickers Brand Peanut Butter Squared Bars: Milk Chocolate (Sugar, Cocoa Butter, Chocolate, Skim Milk, Lactose, Milkfat, Soy Lecithin, Artificial Flavor), Peanut Butter (Peanuts, Partially Hydrogenated Soybean Oil), Peanuts, Sugar, Corn Syrup, Vegetable Oil (Hydrogenated Palm Kernel Oil, Palm Oil, Rapeseed Oil and Cottonseed Oil and/or Partially Hydrogenated Palm Kernel Oil), Lactose, Corn Syrup Solids, Invert Sugar, Less than 2% - Glycerin, Dextrose, Skim Milk, Salt, Calcium Carbonate, Partially Hydrogenated Soybean Oil, Egg Whites, Artificial Flavor, TBHQ to Maintain Freshness",
+          "credits": {
+            "text": "openfoodfacts.org under (ODbL) v1.0",
+            "link": "https://opendatacommons.org/licenses/odbl/1-0/",
+            "image": "openfoodfacts.org under CC BY-SA 3.0 DEED",
+            "imageLink": "https://creativecommons.org/licenses/by-sa/3.0/deed.en"
+          }
+        }
+      },
+      "ComparableProduct": {
+        "type": "object",
+        "properties": {
+          "difference": {
+            "type": "number"
+          },
+          "id": {
+            "type": "integer"
+          },
+          "image": {
+            "type": "string",
+            "minLength": 1
+          },
+          "title": {
+            "type": "string",
+            "minLength": 1
+          }
+        },
+        "required": [
+          "difference",
+          "id",
+          "image",
+          "title"
+        ]
+      },
+      "MenuItem": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "id": {
+            "type": "integer"
+          },
+          "title": {
+            "type": "string",
+            "minLength": 1
+          },
+          "restaurantChain": {
+            "type": "string",
+            "minLength": 1
+          },
+          "nutrition": {
+            "type": "object",
+            "required": [
+              "nutrients",
+              "caloricBreakdown"
+            ],
+            "properties": {
+              "nutrients": {
+                "type": "array",
+                "uniqueItems": true,
+                "minItems": 0,
+                "items": {
+                  "type": "object",
+                  "properties": {
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "amount": {
+                      "type": "number"
+                    },
+                    "unit": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "percentOfDailyNeeds": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "name",
+                    "amount",
+                    "unit",
+                    "percentOfDailyNeeds"
+                  ]
+                }
+              },
+              "caloricBreakdown": {
+                "type": "object",
+                "required": [
+                  "percentProtein",
+                  "percentFat",
+                  "percentCarbs"
+                ],
+                "properties": {
+                  "percentProtein": {
+                    "type": "number"
+                  },
+                  "percentFat": {
+                    "type": "number"
+                  },
+                  "percentCarbs": {
+                    "type": "number"
+                  }
+                }
+              }
+            }
+          },
+          "badges": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "breadcrumbs": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "generatedText": {
+            "type": "string",
+            "nullable": true
+          },
+          "imageType": {
+            "type": "string",
+            "minLength": 1
+          },
+          "likes": {
+            "type": "integer"
+          },
+          "servings": {
+            "type": "object",
+            "required": [
+              "number",
+              "size",
+              "unit"
+            ],
+            "properties": {
+              "number": {
+                "type": "number"
+              },
+              "size": {
+                "type": "number",
+                "nullable": true
+              },
+              "unit": {
+                "type": "string",
+                "nullable": true,
+                "minLength": 1
+              }
+            }
+          },
+          "price": {
+            "type": "number",
+            "nullable": true
+          },
+          "spoonacularScore": {
+            "type": "number",
+            "nullable": true
+          }
+        },
+        "required": [
+          "id",
+          "title",
+          "restaurantChain",
+          "price",
+          "spoonacularScore"
+        ],
+        "example": {
+          "id": 424571,
+          "title": "Bacon King Burger",
+          "restaurantChain": "Burger King",
+          "nutrition": {
+            "nutrients": [
+              {
+                "name": "Fat",
+                "amount": 69,
+                "unit": "g",
+                "percentOfDailyNeeds": 30
+              },
+              {
+                "name": "Protein",
+                "amount": 57,
+                "unit": "g",
+                "percentOfDailyNeeds": 35
+              },
+              {
+                "name": "Calories",
+                "amount": 1040,
+                "unit": "cal",
+                "percentOfDailyNeeds": 50
+              },
+              {
+                "name": "Carbohydrates",
+                "amount": 48,
+                "unit": "g",
+                "percentOfDailyNeeds": 35
+              }
+            ],
+            "caloricBreakdown": {
+              "percentProtein": 35,
+              "percentFat": 30,
+              "percentCarbs": 35
+            }
+          },
+          "badges": [],
+          "breadcrumbs": [
+            "burger",
+            "main course",
+            "food product category"
+          ],
+          "generatedText": "",
+          "imageType": "png",
+          "likes": 0,
+          "servings": {
+            "number": 1,
+            "size": 2,
+            "unit": "oz"
+          },
+          "price": 2.35,
+          "spoonacularScore": 12.5
+        }
+      },
+      "IngredientBasics": {
+        "type": "object",
+        "properties": {
+          "description": {
+            "type": "string",
+            "nullable": true
+          },
+          "name": {
+            "type": "string"
+          },
+          "safety_level": {
+            "type": "string",
+            "nullable": true
+          }
+        },
+        "required": [
+          "name",
+          "description",
+          "safety_level"
+        ]
+      },
+      "IngredientInformation": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "id": {
+            "type": "integer"
+          },
+          "original": {
+            "type": "string",
+            "minLength": 1
+          },
+          "originalName": {
+            "type": "string",
+            "minLength": 1
+          },
+          "name": {
+            "type": "string",
+            "minLength": 1
+          },
+          "amount": {
+            "type": "number"
+          },
+          "unit": {
+            "type": "string"
+          },
+          "unitShort": {
+            "type": "string"
+          },
+          "unitLong": {
+            "type": "string"
+          },
+          "possibleUnits": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "estimatedCost": {
+            "type": "object",
+            "required": [
+              "value",
+              "unit"
+            ],
+            "properties": {
+              "value": {
+                "type": "number"
+              },
+              "unit": {
+                "type": "string",
+                "minLength": 1
+              }
+            }
+          },
+          "consistency": {
+            "type": "string",
+            "minLength": 1
+          },
+          "shoppingListUnits": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "aisle": {
+            "type": "string",
+            "minLength": 1
+          },
+          "image": {
+            "type": "string",
+            "minLength": 1
+          },
+          "meta": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "nutrition": {
+            "type": "object",
+            "required": [
+              "nutrients",
+              "properties",
+              "caloricBreakdown",
+              "weightPerServing"
+            ],
+            "properties": {
+              "nutrients": {
+                "type": "array",
+                "uniqueItems": true,
+                "minItems": 0,
+                "items": {
+                  "type": "object",
+                  "properties": {
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "amount": {
+                      "type": "number"
+                    },
+                    "unit": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "percentOfDailyNeeds": {
+                      "type": "number"
+                    }
+                  },
+                  "required": [
+                    "name",
+                    "amount",
+                    "unit",
+                    "percentOfDailyNeeds"
+                  ]
+                }
+              },
+              "properties": {
+                "type": "array",
+                "uniqueItems": true,
+                "minItems": 0,
+                "items": {
+                  "type": "object",
+                  "properties": {
+                    "name": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "amount": {
+                      "type": "number"
+                    },
+                    "unit": {
+                      "type": "string"
+                    }
+                  },
+                  "required": [
+                    "name",
+                    "amount",
+                    "unit"
+                  ]
+                }
+              },
+              "caloricBreakdown": {
+                "type": "object",
+                "required": [
+                  "percentProtein",
+                  "percentFat",
+                  "percentCarbs"
+                ],
+                "properties": {
+                  "percentProtein": {
+                    "type": "number"
+                  },
+                  "percentFat": {
+                    "type": "number"
+                  },
+                  "percentCarbs": {
+                    "type": "number"
+                  }
+                }
+              },
+              "weightPerServing": {
+                "type": "object",
+                "required": [
+                  "amount",
+                  "unit"
+                ],
+                "properties": {
+                  "amount": {
+                    "type": "number"
+                  },
+                  "unit": {
+                    "type": "string",
+                    "minLength": 1
+                  }
+                }
+              }
+            }
+          },
+          "categoryPath": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          }
+        },
+        "required": [
+          "id",
+          "original",
+          "originalName",
+          "name",
+          "amount",
+          "unit",
+          "unitShort",
+          "unitLong",
+          "possibleUnits",
+          "estimatedCost",
+          "consistency",
+          "aisle",
+          "image",
+          "meta"
+        ],
+        "example": {
+          "id": 9266,
+          "original": "pineapples",
+          "originalName": "pineapples",
+          "name": "pineapples",
+          "amount": 1,
+          "unit": "",
+          "unitShort": "",
+          "unitLong": "",
+          "possibleUnits": [
+            "piece",
+            "slice",
+            "fruit",
+            "g",
+            "oz",
+            "cup",
+            "serving"
+          ],
+          "estimatedCost": {
+            "value": 299,
+            "unit": "US Cents"
+          },
+          "consistency": "solid",
+          "shoppingListUnits": [
+            "pieces"
+          ],
+          "aisle": "Produce",
+          "image": "pineapple.jpg",
+          "meta": [],
+          "nutrition": {
+            "nutrients": [
+              {
+                "name": "Calories",
+                "amount": 452.5,
+                "unit": "cal",
+                "percentOfDailyNeeds": 22.63
+              },
+              {
+                "name": "Fat",
+                "amount": 1.09,
+                "unit": "g",
+                "percentOfDailyNeeds": 1.67
+              },
+              {
+                "name": "Saturated Fat",
+                "amount": 0.08,
+                "unit": "g",
+                "percentOfDailyNeeds": 0.51
+              },
+              {
+                "name": "Carbohydrates",
+                "amount": 118.74,
+                "unit": "g",
+                "percentOfDailyNeeds": 39.58
+              },
+              {
+                "name": "Net Carbohydrates",
+                "amount": 106.07,
+                "unit": "g",
+                "percentOfDailyNeeds": 38.57
+              },
+              {
+                "name": "Sugar",
+                "amount": 89.14,
+                "unit": "g",
+                "percentOfDailyNeeds": 99.05
+              },
+              {
+                "name": "Cholesterol",
+                "amount": 0,
+                "unit": "mg",
+                "percentOfDailyNeeds": 0
+              },
+              {
+                "name": "Sodium",
+                "amount": 9.05,
+                "unit": "mg",
+                "percentOfDailyNeeds": 0.39
+              },
+              {
+                "name": "Protein",
+                "amount": 4.89,
+                "unit": "g",
+                "percentOfDailyNeeds": 9.77
+              },
+              {
+                "name": "Vitamin C",
+                "amount": 432.59,
+                "unit": "mg",
+                "percentOfDailyNeeds": 524.35
+              },
+              {
+                "name": "Manganese",
+                "amount": 8.39,
+                "unit": "mg",
+                "percentOfDailyNeeds": 419.47
+              },
+              {
+                "name": "Fiber",
+                "amount": 12.67,
+                "unit": "g",
+                "percentOfDailyNeeds": 50.68
+              },
+              {
+                "name": "Vitamin B6",
+                "amount": 1.01,
+                "unit": "mg",
+                "percentOfDailyNeeds": 50.68
+              },
+              {
+                "name": "Copper",
+                "amount": 1,
+                "unit": "mg",
+                "percentOfDailyNeeds": 49.78
+              },
+              {
+                "name": "Vitamin B1",
+                "amount": 0.72,
+                "unit": "mg",
+                "percentOfDailyNeeds": 47.66
+              },
+              {
+                "name": "Folate",
+                "amount": 162.9,
+                "unit": "µg",
+                "percentOfDailyNeeds": 40.73
+              },
+              {
+                "name": "Potassium",
+                "amount": 986.45,
+                "unit": "mg",
+                "percentOfDailyNeeds": 28.18
+              },
+              {
+                "name": "Magnesium",
+                "amount": 108.6,
+                "unit": "mg",
+                "percentOfDailyNeeds": 27.15
+              },
+              {
+                "name": "Vitamin B3",
+                "amount": 4.53,
+                "unit": "mg",
+                "percentOfDailyNeeds": 22.63
+              },
+              {
+                "name": "Vitamin B5",
+                "amount": 1.93,
+                "unit": "mg",
+                "percentOfDailyNeeds": 19.28
+              },
+              {
+                "name": "Vitamin B2",
+                "amount": 0.29,
+                "unit": "mg",
+                "percentOfDailyNeeds": 17.04
+              },
+              {
+                "name": "Iron",
+                "amount": 2.62,
+                "unit": "mg",
+                "percentOfDailyNeeds": 14.58
+              },
+              {
+                "name": "Calcium",
+                "amount": 117.65,
+                "unit": "mg",
+                "percentOfDailyNeeds": 11.77
+              },
+              {
+                "name": "Vitamin A",
+                "amount": 524.9,
+                "unit": "IU",
+                "percentOfDailyNeeds": 10.5
+              },
+              {
+                "name": "Zinc",
+                "amount": 1.09,
+                "unit": "mg",
+                "percentOfDailyNeeds": 7.24
+              },
+              {
+                "name": "Phosphorus",
+                "amount": 72.4,
+                "unit": "mg",
+                "percentOfDailyNeeds": 7.24
+              },
+              {
+                "name": "Vitamin K",
+                "amount": 6.34,
+                "unit": "µg",
+                "percentOfDailyNeeds": 6.03
+              },
+              {
+                "name": "Selenium",
+                "amount": 0.91,
+                "unit": "µg",
+                "percentOfDailyNeeds": 1.29
+              },
+              {
+                "name": "Vitamin E",
+                "amount": 0.18,
+                "unit": "mg",
+                "percentOfDailyNeeds": 1.21
+              }
+            ],
+            "properties": [
+              {
+                "name": "Glycemic Index",
+                "amount": 58.67,
+                "unit": ""
+              },
+              {
+                "name": "Glycemic Load",
+                "amount": 62.23,
+                "unit": ""
+              }
+            ],
+            "caloricBreakdown": {
+              "percentProtein": 3.88,
+              "percentFat": 1.94,
+              "percentCarbs": 94.18
+            },
+            "weightPerServing": {
+              "amount": 905,
+              "unit": "g"
+            }
+          },
+          "categoryPath": [
+            "tropical fruit",
+            "fruit"
+          ]
+        }
+      },
+      "TasteInformation": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "sweetness": {
+            "type": "number"
+          },
+          "saltiness": {
+            "type": "number"
+          },
+          "sourness": {
+            "type": "number"
+          },
+          "bitterness": {
+            "type": "number"
+          },
+          "savoriness": {
+            "type": "number"
+          },
+          "fattiness": {
+            "type": "number"
+          },
+          "spiciness": {
+            "type": "number"
+          }
+        },
+        "required": [
+          "sweetness",
+          "saltiness",
+          "sourness",
+          "bitterness",
+          "savoriness",
+          "fattiness",
+          "spiciness"
+        ],
+        "example": {
+          "sweetness": 28.79,
+          "saltiness": 26.74,
+          "sourness": 6.22,
+          "bitterness": 12.38,
+          "savoriness": 11.8,
+          "fattiness": 100,
+          "spiciness": 0
+        }
+      },
+      "RecipeInformation": {
+        "description": "",
+        "type": "object",
+        "properties": {
+          "id": {
+            "type": "integer"
+          },
+          "title": {
+            "type": "string",
+            "minLength": 1
+          },
+          "image": {
+            "type": "string",
+            "nullable": true
+          },
+          "imageType": {
+            "type": "string",
+            "minLength": 1
+          },
+          "servings": {
+            "type": "number"
+          },
+          "readyInMinutes": {
+            "type": "integer"
+          },
+          "preparationMinutes": {
+            "type": "integer",
+            "nullable": true
+          },
+          "cookingMinutes": {
+            "type": "integer",
+            "nullable": true
+          },
+          "license": {
+            "type": "string",
+            "minLength": 1
+          },
+          "sourceName": {
+            "type": "string",
+            "minLength": 1
+          },
+          "sourceUrl": {
+            "type": "string",
+            "minLength": 1
+          },
+          "spoonacularSourceUrl": {
+            "type": "string"
+          },
+          "aggregateLikes": {
+            "type": "integer"
+          },
+          "healthScore": {
+            "type": "number"
+          },
+          "spoonacularScore": {
+            "type": "number"
+          },
+          "pricePerServing": {
+            "type": "number"
+          },
+          "analyzedInstructions": {
+            "type": "array",
+            "items": {
+              "type": "object"
+            }
+          },
+          "cheap": {
+            "type": "boolean"
+          },
+          "creditsText": {
+            "type": "string",
+            "minLength": 1
+          },
+          "cuisines": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "dairyFree": {
+            "type": "boolean"
+          },
+          "diets": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "gaps": {
+            "type": "string",
+            "minLength": 1
+          },
+          "glutenFree": {
+            "type": "boolean"
+          },
+          "instructions": {
+            "type": "string",
+            "nullable": true
+          },
+          "lowFodmap": {
+            "type": "boolean"
+          },
+          "occasions": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "sustainable": {
+            "type": "boolean"
+          },
+          "vegan": {
+            "type": "boolean"
+          },
+          "vegetarian": {
+            "type": "boolean"
+          },
+          "veryHealthy": {
+            "type": "boolean"
+          },
+          "veryPopular": {
+            "type": "boolean"
+          },
+          "weightWatcherSmartPoints": {
+            "type": "number"
+          },
+          "dishTypes": {
+            "type": "array",
+            "items": {
+              "type": "string"
+            }
+          },
+          "extendedIngredients": {
+            "type": "array",
+            "uniqueItems": true,
+            "minItems": 0,
+            "items": {
+              "type": "object",
+              "properties": {
+                "aisle": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "amount": {
+                  "type": "number"
+                },
+                "consistency": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "id": {
+                  "type": "integer"
+                },
+                "image": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "measures": {
+                  "type": "object",
+                  "properties": {
+                    "metric": {
+                      "type": "object",
+                      "required": [
+                        "amount",
+                        "unitLong",
+                        "unitShort"
+                      ],
+                      "properties": {
+                        "amount": {
+                          "type": "number"
+                        },
+                        "unitLong": {
+                          "type": "string",
+                          "minLength": 0
+                        },
+                        "unitShort": {
+                          "type": "string",
+                          "minLength": 0
+                        }
+                      }
+                    },
+                    "us": {
+                      "type": "object",
+                      "required": [
+                        "amount",
+                        "unitLong",
+                        "unitShort"
+                      ],
+                      "properties": {
+                        "amount": {
+                          "type": "number"
+                        },
+                        "unitLong": {
+                          "type": "string",
+                          "minLength": 0
+                        },
+                        "unitShort": {
+                          "type": "string",
+                          "minLength": 0
+                        }
+                      }
+                    }
+                  },
+                  "required": [
+                    "metric",
+                    "us"
+                  ]
+                },
+                "meta": {
+                  "type": "array",
+                  "items": {
+                    "type": "string"
+                  }
+                },
+                "name": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "original": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "originalName": {
+                  "type": "string",
+                  "minLength": 1
+                },
+                "unit": {
+                  "type": "string",
+                  "minLength": 0
+                }
+              },
+              "required": [
+                "aisle",
+                "amount",
+                "consistency",
+                "id",
+                "image",
+                "name",
+                "original",
+                "originalName",
+                "unit"
+              ]
+            }
+          },
+          "summary": {
+            "type": "string",
+            "minLength": 1
+          },
+          "winePairing": {
+            "type": "object",
+            "properties": {
+              "pairedWines": {
+                "type": "array",
+                "items": {
+                  "type": "string"
+                }
+              },
+              "pairingText": {
+                "type": "string",
+                "minLength": 1
+              },
+              "productMatches": {
+                "type": "array",
+                "uniqueItems": true,
+                "minItems": 0,
+                "items": {
+                  "type": "object",
+                  "properties": {
+                    "id": {
+                      "type": "integer"
+                    },
+                    "title": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "description": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "price": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "imageUrl": {
+                      "type": "string",
+                      "minLength": 1
+                    },
+                    "averageRating": {
+                      "type": "number"
+                    },
+                    "ratingCount": {
+                      "type": "integer"
+                    },
+                    "score": {
+                      "type": "number"
+                    },
+                    "link": {
+                      "type": "string",
+                      "minLength": 1
+                    }
+                  },
+                  "required": [
+                    "id",
+                    "title",
+                    "description",
+                    "price",
+                    "imageUrl",
+                    "averageRating",
+                    "ratingCount",
+                    "score",
+                    "link"
+                  ]
+                }
+              }
+            }
+          },
+          "taste": {
+            "$ref": "#/components/schemas/TasteInformation"
+          }
+        },
+        "required": [
+          "id",
+          "title",
+          "image",
+          "servings",
+          "readyInMinutes",
+          "sourceName",
+          "sourceUrl",
+          "spoonacularSourceUrl",
+          "aggregateLikes",
+          "healthScore",
+          "spoonacularScore",
+          "pricePerServing",
+          "analyzedInstructions",
+          "cheap",
+          "creditsText",
+          "cuisines",
+          "dairyFree",
+          "diets",
+          "gaps",
+          "glutenFree",
+          "instructions",
+          "lowFodmap",
+          "occasions",
+          "sustainable",
+          "vegan",
+          "vegetarian",
+          "veryHealthy",
+          "veryPopular",
+          "weightWatcherSmartPoints",
+          "dishTypes",
+          "extendedIngredients",
+          "summary"
+        ],
+        "example": {
+          "id": 716429,
+          "title": "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs",
+          "image": "https://spoonacular.com/recipeImages/716429-556x370.jpg",
+          "imageType": "jpg",
+          "servings": 2,
+          "readyInMinutes": 45,
+          "license": "CC BY-SA 3.0",
+          "sourceName": "Full Belly Sisters",
+          "sourceUrl": "http://fullbellysisters.blogspot.com/2012/06/pasta-with-garlic-scallions-cauliflower.html",
+          "spoonacularSourceUrl": "https://spoonacular.com/pasta-with-garlic-scallions-cauliflower-breadcrumbs-716429",
+          "aggregateLikes": 209,
+          "healthScore": 19,
+          "spoonacularScore": 83,
+          "pricePerServing": 163.15,
+          "analyzedInstructions": [],
+          "cheap": false,
+          "creditsText": "Full Belly Sisters",
+          "cuisines": [],
+          "dairyFree": false,
+          "diets": [],
+          "gaps": "no",
+          "glutenFree": false,
+          "instructions": "",
+          "lowFodmap": false,
+          "occasions": [],
+          "sustainable": false,
+          "vegan": false,
+          "vegetarian": false,
+          "veryHealthy": false,
+          "veryPopular": false,
+          "weightWatcherSmartPoints": 17,
+          "dishTypes": [
+            "lunch",
+            "main course",
+            "main dish",
+            "dinner"
+          ],
+          "extendedIngredients": [
+            {
+              "aisle": "Milk, Eggs, Other Dairy",
+              "amount": 1,
+              "consistency": "solid",
+              "id": 1001,
+              "image": "butter-sliced.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 1,
+                  "unitLong": "Tbsp",
+                  "unitShort": "Tbsp"
+                },
+                "us": {
+                  "amount": 1,
+                  "unitLong": "Tbsp",
+                  "unitShort": "Tbsp"
+                }
+              },
+              "meta": [],
+              "name": "butter",
+              "original": "1 tbsp butter",
+              "originalName": "butter",
+              "unit": "tbsp"
+            },
+            {
+              "aisle": "Produce",
+              "amount": 2,
+              "consistency": "solid",
+              "id": 10011135,
+              "image": "cauliflower.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 473.176,
+                  "unitLong": "milliliters",
+                  "unitShort": "ml"
+                },
+                "us": {
+                  "amount": 2,
+                  "unitLong": "cups",
+                  "unitShort": "cups"
+                }
+              },
+              "meta": [
+                "frozen",
+                "thawed",
+                "cut into bite-sized pieces"
+              ],
+              "name": "cauliflower florets",
+              "original": "about 2 cups frozen cauliflower florets, thawed, cut into bite-sized pieces",
+              "originalName": "about frozen cauliflower florets, thawed, cut into bite-sized pieces",
+              "unit": "cups"
+            },
+            {
+              "aisle": "Cheese",
+              "amount": 2,
+              "consistency": "solid",
+              "id": 1041009,
+              "image": "cheddar-cheese.png",
+              "measures": {
+                "metric": {
+                  "amount": 2,
+                  "unitLong": "Tbsps",
+                  "unitShort": "Tbsps"
+                },
+                "us": {
+                  "amount": 2,
+                  "unitLong": "Tbsps",
+                  "unitShort": "Tbsps"
+                }
+              },
+              "meta": [
+                "grated",
+                "(I used romano)"
+              ],
+              "name": "cheese",
+              "original": "2 tbsp grated cheese (I used romano)",
+              "originalName": "grated cheese (I used romano)",
+              "unit": "tbsp"
+            },
+            {
+              "aisle": "Oil, Vinegar, Salad Dressing",
+              "amount": 1,
+              "consistency": "liquid",
+              "id": 1034053,
+              "image": "olive-oil.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 1,
+                  "unitLong": "Tbsp",
+                  "unitShort": "Tbsp"
+                },
+                "us": {
+                  "amount": 1,
+                  "unitLong": "Tbsp",
+                  "unitShort": "Tbsp"
+                }
+              },
+              "meta": [],
+              "name": "extra virgin olive oil",
+              "original": "1-2 tbsp extra virgin olive oil",
+              "originalName": "extra virgin olive oil",
+              "unit": "tbsp"
+            },
+            {
+              "aisle": "Produce",
+              "amount": 5,
+              "consistency": "solid",
+              "id": 11215,
+              "image": "garlic.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 5,
+                  "unitLong": "cloves",
+                  "unitShort": "cloves"
+                },
+                "us": {
+                  "amount": 5,
+                  "unitLong": "cloves",
+                  "unitShort": "cloves"
+                }
+              },
+              "meta": [],
+              "name": "garlic",
+              "original": "5-6 cloves garlic",
+              "originalName": "garlic",
+              "unit": "cloves"
+            },
+            {
+              "aisle": "Pasta and Rice",
+              "amount": 6,
+              "consistency": "solid",
+              "id": 20420,
+              "image": "fusilli.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 170.097,
+                  "unitLong": "grams",
+                  "unitShort": "g"
+                },
+                "us": {
+                  "amount": 6,
+                  "unitLong": "ounces",
+                  "unitShort": "oz"
+                }
+              },
+              "meta": [
+                "(I used linguine)"
+              ],
+              "name": "pasta",
+              "original": "6-8 ounces pasta (I used linguine)",
+              "originalName": "pasta (I used linguine)",
+              "unit": "ounces"
+            },
+            {
+              "aisle": "Spices and Seasonings",
+              "amount": 2,
+              "consistency": "solid",
+              "id": 1032009,
+              "image": "red-pepper-flakes.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 2,
+                  "unitLong": "pinches",
+                  "unitShort": "pinches"
+                },
+                "us": {
+                  "amount": 2,
+                  "unitLong": "pinches",
+                  "unitShort": "pinches"
+                }
+              },
+              "meta": [
+                "red"
+              ],
+              "name": "red pepper flakes",
+              "original": "couple of pinches red pepper flakes, optional",
+              "originalName": "couple of red pepper flakes, optional",
+              "unit": "pinches"
+            },
+            {
+              "aisle": "Spices and Seasonings",
+              "amount": 2,
+              "consistency": "solid",
+              "id": 1102047,
+              "image": "salt-and-pepper.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 2,
+                  "unitLong": "servings",
+                  "unitShort": "servings"
+                },
+                "us": {
+                  "amount": 2,
+                  "unitLong": "servings",
+                  "unitShort": "servings"
+                }
+              },
+              "meta": [
+                "to taste"
+              ],
+              "name": "salt and pepper",
+              "original": "salt and pepper, to taste",
+              "originalName": "salt and pepper, to taste",
+              "unit": "servings"
+            },
+            {
+              "aisle": "Produce",
+              "amount": 3,
+              "consistency": "solid",
+              "id": 11291,
+              "image": "spring-onions.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 3,
+                  "unitLong": "",
+                  "unitShort": ""
+                },
+                "us": {
+                  "amount": 3,
+                  "unitLong": "",
+                  "unitShort": ""
+                }
+              },
+              "meta": [
+                "white",
+                "green",
+                "separated",
+                "chopped"
+              ],
+              "name": "scallions",
+              "original": "3 scallions, chopped, white and green parts separated",
+              "originalName": "scallions, chopped, white and green parts separated",
+              "unit": ""
+            },
+            {
+              "aisle": "Alcoholic Beverages",
+              "amount": 2,
+              "consistency": "liquid",
+              "id": 14106,
+              "image": "white-wine.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 2,
+                  "unitLong": "Tbsps",
+                  "unitShort": "Tbsps"
+                },
+                "us": {
+                  "amount": 2,
+                  "unitLong": "Tbsps",
+                  "unitShort": "Tbsps"
+                }
+              },
+              "meta": [
+                "white"
+              ],
+              "name": "white wine",
+              "original": "2-3 tbsp white wine",
+              "originalName": "white wine",
+              "unit": "tbsp"
+            },
+            {
+              "aisle": "Pasta and Rice",
+              "amount": 0.25,
+              "consistency": "solid",
+              "id": 99025,
+              "image": "breadcrumbs.jpg",
+              "measures": {
+                "metric": {
+                  "amount": 59.147,
+                  "unitLong": "milliliters",
+                  "unitShort": "ml"
+                },
+                "us": {
+                  "amount": 0.25,
+                  "unitLong": "cups",
+                  "unitShort": "cups"
+                }
+              },
+              "meta": [
+                "whole wheat",
+                "(I used panko)"
+              ],
+              "name": "whole wheat bread crumbs",
+              "original": "1/4 cup whole wheat bread crumbs (I used panko)",
+              "originalName": "whole wheat bread crumbs (I used panko)",
+              "unit": "cup"
+            }
+          ],
+          "summary": "Pasta with Garlic, Scallions, Cauliflower & Breadcrumbs might be a good recipe to expand your main course repertoire. One portion of this dish contains approximately &lt;b&gt;19g of protein &lt;/b&gt;,  &lt;b&gt;20g of fat &lt;/b&gt;, and a total of  &lt;b&gt;584 calories &lt;/b&gt;. For  &lt;b&gt;$1.63 per serving &lt;/b&gt;, this recipe  &lt;b&gt;covers 23% &lt;/b&gt; of your daily requirements of vitamins and minerals. This recipe serves 2. It is brought to you by fullbellysisters.blogspot.com. 209 people were glad they tried this recipe. A mixture of scallions, salt and pepper, white wine, and a handful of other ingredients are all it takes to make this recipe so scrumptious. From preparation to the plate, this recipe takes approximately  &lt;b&gt;45 minutes &lt;/b&gt;. All things considered, we decided this recipe  &lt;b&gt;deserves a spoonacular score of 83% &lt;/b&gt;. This score is awesome. If you like this recipe, take a look at these similar recipes: &lt;a href=\"https://spoonacular.com/recipes/cauliflower-gratin-with-garlic-breadcrumbs-318375\">Cauliflower Gratin with Garlic Breadcrumbs&lt;/a&gt;, &lt; href=\"https://spoonacular.com/recipes/pasta-with-cauliflower-sausage-breadcrumbs-30437\">Pasta With Cauliflower, Sausage, & Breadcrumbs&lt;/a&gt;, and &lt;a href=\"https://spoonacular.com/recipes/pasta-with-roasted-cauliflower-parsley-and-breadcrumbs-30738\">Pasta With Roasted Cauliflower, Parsley, And Breadcrumbs&lt;/a&gt;.",
+          "winePairing": {
+            "pairedWines": [
+              "chardonnay",
+              "gruener veltliner",
+              "sauvignon blanc"
+            ],
+            "pairingText": "Chardonnay, Gruener Veltliner, and Sauvignon Blanc are great choices for Pasta. Sauvignon Blanc and Gruner Veltliner both have herby notes that complement salads with enough acid to match tart vinaigrettes, while a Chardonnay can be a good pick for creamy salad dressings. The Buddha Kat Winery Chardonnay with a 4 out of 5 star rating seems like a good match. It costs about 25 dollars per bottle.",
+            "productMatches": [
+              {
+                "id": 469199,
+                "title": "Buddha Kat Winery Chardonnay",
+                "description": "We barrel ferment our Chardonnay and age it in a mix of Oak and Stainless. Giving this light bodied wine modest oak character, a delicate floral aroma, and a warming finish.",
+                "price": "$25.0",
+                "imageUrl": "https://spoonacular.com/productImages/469199-312x231.jpg",
+                "averageRating": 0.8,
+                "ratingCount": 1,
+                "score": 0.55,
+                "link": "https://www.amazon.com/2015-Buddha-Kat-Winery-Chardonnay/dp/B00OSAVVM4?tag=spoonacular-20"
+              }
+            ]
+          }
+        }
+      }
+    },
+    "securitySchemes": {
+      "apiKeyScheme": {
+        "type": "apiKey",
+        "name": "x-api-key",
+        "in": "header"
+      }
+    },
+    "parameters": {
+      "ingredients": {
+        "name": "ingredients",
+        "in": "query",
+        "required": true,
+        "schema": {
+          "type": "string",
+          "example": "carrots,tomatoes"
+        },
+        "description": "A comma-separated list of ingredients that the recipes should contain."
+      },
+      "number": {
+        "name": "number",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "integer",
+          "minimum": 1,
+          "maximum": 100,
+          "default": 10,
+          "example": 10
+        },
+        "description": "The maximum number of items to return (between 1 and 100). Defaults to 10."
+      },
+      "ignorePantry": {
+        "name": "ignorePantry",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "boolean",
+          "default": false,
+          "example": false
+        },
+        "description": "Whether to ignore typical pantry items, such as water, salt, flour, etc."
+      },
+      "query": {
+        "name": "query",
+        "in": "query",
+        "required": true,
+        "schema": {
+          "type": "string",
+          "example": "burger"
+        },
+        "description": "The (natural language) search query."
+      },
+      "offset": {
+        "name": "offset",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "integer",
+          "minimum": 0,
+          "maximum": 900
+        },
+        "description": "The number of results to skip (between 0 and 900)."
+      },
+      "includeNutrition": {
+        "name": "includeNutrition",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "boolean",
+          "default": false
+        },
+        "description": "Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings."
+      },
+      "tags": {
+        "name": "tags",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "string"
+        },
+        "description": "The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have."
+      },
+      "id": {
+        "name": "id",
+        "in": "path",
+        "required": true,
+        "schema": {
+          "type": "integer",
+          "example": 1
+        },
+        "description": "The item's id."
+      },
+      "includeTaste": {
+        "name": "includeTaste",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "boolean",
+          "example": false,
+          "default": false
+        },
+        "description": "Whether taste data should be added to correctly parsed ingredients."
+      },
+      "defaultCss": {
+        "name": "defaultCss",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "boolean",
+          "default": true,
+          "example": false
+        },
+        "description": "Whether the default CSS should be added to the response."
+      },
+      "language": {
+        "name": "language",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "string",
+          "enum": [
+            "en",
+            "de"
+          ],
+          "example": "en"
+        },
+        "description": "The language of the input. Either 'en' or 'de'."
+      },
+      "username": {
+        "name": "username",
+        "in": "path",
+        "required": true,
+        "schema": {
+          "type": "string",
+          "example": "dsky"
+        },
+        "description": "The username."
+      },
+      "hash": {
+        "name": "hash",
+        "in": "query",
+        "required": true,
+        "schema": {
+          "type": "string"
+        },
+        "description": "The private hash for the username."
+      },
+      "rgb": {
+        "name": "rgb",
+        "in": "query",
+        "required": false,
+        "schema": {
+          "type": "string",
+          "example": "75,192,192"
+        },
+        "description": "Red, green, blue values for the chart color."
+      }
+    }
+  },
+  "externalDocs": {
+    "description": "The official documentation.",
+    "url": "https://spoonacular.com/food-api/docs"
+  },
+  "security": [
+    {
+      "apiKeyScheme": []
+    }
+  ],
+  "tags": [
+    {
+      "name": "ingredients"
+    },
+    {
+      "name": "meal planning"
+    },
+    {
+      "name": "menu items"
+    },
+    {
+      "name": "misc"
+    },
+    {
+      "name": "products"
+    },
+    {
+      "name": "recipes"
+    },
+    {
+      "name": "wine"
+    }
+  ]
+}
diff --git a/app/api-application/src/main/resources/templates/kotlin-retrofit2/api.mustache b/app/api-application/src/main/resources/templates/kotlin-retrofit2/api.mustache
new file mode 100644
index 0000000..aba8932
--- /dev/null
+++ b/app/api-application/src/main/resources/templates/kotlin-retrofit2/api.mustache
@@ -0,0 +1,143 @@
+package {{apiPackage}}
+
+import com.dietfit.exception.ClientException
+
+import retrofit2.http.Body
+import retrofit2.http.DELETE
+import retrofit2.http.Field
+import retrofit2.http.FieldMap
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.GET
+import retrofit2.http.HEAD
+import retrofit2.http.Header
+import retrofit2.http.HeaderMap
+import retrofit2.http.Headers
+import retrofit2.http.HTTP
+import retrofit2.http.Multipart
+import retrofit2.http.OPTIONS
+import retrofit2.http.Part
+import retrofit2.http.PartMap
+import retrofit2.http.PATCH
+import retrofit2.http.Path
+import retrofit2.http.POST
+import retrofit2.http.PUT
+import retrofit2.http.Query
+import retrofit2.http.QueryMap
+import retrofit2.http.QueryName
+import retrofit2.http.Streaming
+import retrofit2.http.Tag
+import retrofit2.http.Url
+
+import arrow.core.Either
+import retrofit2.Response
+import okhttp3.RequestBody
+import okhttp3.ResponseBody
+import okhttp3.MultipartBody
+
+import com.fasterxml.jackson.annotation.JsonProperty
+
+{{#imports}}import {{import}}
+{{/imports}}
+
+{{#operations}}
+{{#x-kotlin-import-models}}
+import {{{modelPackage}}}.*
+
+{{/x-kotlin-import-models}}
+{{#x-kotlin-multipart-import}}
+{{^isMultipart}}
+import okhttp3.MultipartBody
+
+{{/isMultipart}}
+{{/x-kotlin-multipart-import}}
+{{#nonPublicApi}}internal {{/nonPublicApi}}{{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}interface {{classname}} {
+    {{#operation}}
+    {{#allParams}}
+    {{#isEnum}}
+
+    /**
+    * enum for parameter {{paramName}}
+    */
+    {{#nonPublicApi}}internal {{/nonPublicApi}}{{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}enum class {{enumName}}{{operationIdCamelCase}}({{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}val value: {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}kotlin.String{{/isContainer}}) {
+    {{^enumUnknownDefaultCase}}
+        {{#allowableValues}}
+            {{#enumVars}}
+                {{^multiplatform}}
+                    {{#moshi}}
+        @Json(name = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}
+                    {{/moshi}}
+                    {{#gson}}
+        @SerializedName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}
+                    {{/gson}}
+                    {{#jackson}}
+        @JsonProperty(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}
+                    {{/jackson}}
+                    {{#kotlinx_serialization}}
+        @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}
+                    {{/kotlinx_serialization}}
+                {{/multiplatform}}
+                {{#multiplatform}}
+                    @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}
+                {{/multiplatform}}
+            {{/enumVars}}
+        {{/allowableValues}}
+    {{/enumUnknownDefaultCase}}
+    {{#enumUnknownDefaultCase}}
+        {{#allowableValues}}
+            {{#enumVars}}
+                {{^-last}}
+                    {{^multiplatform}}
+                        {{#moshi}}
+            @Json(name = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}),
+                        {{/moshi}}
+                        {{#gson}}
+            @SerializedName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}),
+                        {{/gson}}
+                        {{#jackson}}
+            @JsonProperty(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}),
+                        {{/jackson}}
+                        {{#kotlinx_serialization}}
+            @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}),
+                        {{/kotlinx_serialization}}
+                    {{/multiplatform}}
+                    {{#multiplatform}}
+            @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}),
+                    {{/multiplatform}}
+                {{/-last}}
+            {{/enumVars}}
+        {{/allowableValues}}
+    {{/enumUnknownDefaultCase}}
+    }
+
+    {{/isEnum}}
+    {{/allParams}}
+    /**
+     * {{{httpMethod}}} {{{path}}}
+     * {{summary}}
+     * {{notes}}
+     * Responses:{{#responses}}
+     *  - {{code}}: {{{message}}}{{/responses}}
+     *{{>paramJavadoc}}
+     * @return Either<{{#isResponseFile}}ResponseBody{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{^returnType}}Unit{{/returnType}}{{/isResponseFile}}, ClientException>
+     */
+    {{#isDeprecated}}
+    @Deprecated("This api was deprecated")
+    {{/isDeprecated}}
+    {{#formParams}}
+    {{#-first}}
+    {{#isMultipart}}@Multipart{{/isMultipart}}{{^isMultipart}}@FormUrlEncoded{{/isMultipart}}
+    {{/-first}}
+    {{/formParams}}
+    {{^formParams}}
+    {{#prioritizedContentTypes}}
+    {{#-first}}
+    @Headers("Content-Type:{{{mediaType}}}")
+    {{/-first}}
+    {{/prioritizedContentTypes}}
+    {{/formParams}}
+    @{{httpMethod}}("{{{path}}}")
+    suspend fun {{operationId}}({{^allParams}}){{/allParams}}{{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{^-last}}, {{/-last}}{{#-last}}){{/-last}}{{/allParams}}: Either<{{#isResponseFile}}ResponseBody{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{^returnType}}Unit{{/returnType}}{{/isResponseFile}}, ClientException>
+
+    {{/operation}}
+}
+{{/operations}}
diff --git a/app/api-application/src/main/resources/templates/kotlin-retrofit2/infrastructure/ApiClient.kt.mustache b/app/api-application/src/main/resources/templates/kotlin-retrofit2/infrastructure/ApiClient.kt.mustache
new file mode 100644
index 0000000..6b89866
--- /dev/null
+++ b/app/api-application/src/main/resources/templates/kotlin-retrofit2/infrastructure/ApiClient.kt.mustache
@@ -0,0 +1,384 @@
+package {{packageName}}.infrastructure
+
+
+{{#hasAuthMethods}}
+{{#authMethods}}
+{{#isBasic}}
+{{#isBasicBasic}}
+import {{packageName}}.auth.HttpBasicAuth
+{{/isBasicBasic}}
+{{#isBasicBearer}}
+import {{packageName}}.auth.HttpBearerAuth
+{{/isBasicBearer}}
+{{/isBasic}}
+{{#isApiKey}}
+import {{packageName}}.auth.ApiKeyAuth
+{{/isApiKey}}
+{{/authMethods}}
+{{/hasAuthMethods}}
+
+import okhttp3.Call
+import okhttp3.Interceptor
+import okhttp3.OkHttpClient
+import retrofit2.Retrofit
+import okhttp3.logging.HttpLoggingInterceptor
+import retrofit2.Converter
+import retrofit2.CallAdapter
+import com.fasterxml.jackson.databind.ObjectMapper
+import retrofit2.converter.jackson.JacksonConverterFactory
+
+{{#kotlinx_serialization}}
+import retrofit2.converter.kotlinx.serialization.asConverterFactory
+import {{packageName}}.infrastructure.Serializer.kotlinxSerializationJson
+import okhttp3.MediaType.Companion.toMediaType
+{{/kotlinx_serialization}}
+
+{{#nonPublicApi}}internal {{/nonPublicApi}}{{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}class ApiClient(
+    private var baseUrl: String = defaultBasePath,
+    private val okHttpClientBuilder: OkHttpClient.Builder? = null,
+    {{^kotlinx_serialization}}
+    private val serializerBuilder: {{#gson}}GsonBuilder{{/gson}}{{#moshi}}Moshi.Builder{{/moshi}}{{#jackson}}ObjectMapper{{/jackson}} = {{#generateOneOfAnyOfWrappers}}{{#gson}}registerTypeAdapterFactoryForAllModels({{/gson}}{{/generateOneOfAnyOfWrappers}}Serializer.{{#gson}}gsonBuilder{{/gson}}{{#generateOneOfAnyOfWrappers}}{{#gson}}){{/gson}}{{/generateOneOfAnyOfWrappers}}{{#moshi}}moshiBuilder{{/moshi}}{{#jackson}}jacksonObjectMapper{{/jackson}},
+    {{/kotlinx_serialization}}
+    private val callFactory: Call.Factory? = null,
+    private val callAdapterFactories: List<CallAdapter.Factory> = listOf(
+        {{#useRxJava}}
+        RxJavaCallAdapterFactory.create(),
+        {{/useRxJava}}
+        {{#useRxJava2}}
+        RxJava2CallAdapterFactory.create(),
+        {{/useRxJava2}}
+        {{#useRxJava3}}
+        RxJava3CallAdapterFactory.create(),
+        {{/useRxJava3}}
+    ),
+    private val converterFactories: List<Converter.Factory> = listOf(
+        {{#gson}}
+        GsonConverterFactory.create(serializerBuilder.create()),
+        {{/gson}}
+        {{#moshi}}
+        MoshiConverterFactory.create(serializerBuilder.build()),
+        {{/moshi}}
+        {{#kotlinx_serialization}}
+        kotlinxSerializationJson.asConverterFactory("application/json".toMediaType()),
+        {{/kotlinx_serialization}}
+        {{#jackson}}
+        JacksonConverterFactory.create(serializerBuilder),
+        {{/jackson}}
+    )
+) {
+    private val apiAuthorizations = mutableMapOf<String, Interceptor>()
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}var logger: ((String) -> Unit)? = null
+
+    private val retrofitBuilder: Retrofit.Builder by lazy {
+        Retrofit.Builder()
+            .baseUrl(baseUrl)
+            .apply {
+                callAdapterFactories.forEach {
+                    addCallAdapterFactory(it)
+                }
+            }
+            .apply {
+                converterFactories.forEach {
+                    addConverterFactory(it)
+                }
+            }
+    }
+
+    private val clientBuilder: OkHttpClient.Builder by lazy {
+        okHttpClientBuilder ?: defaultClientBuilder
+    }
+
+    private val defaultClientBuilder: OkHttpClient.Builder by lazy {
+        OkHttpClient()
+            .newBuilder()
+            .addInterceptor(HttpLoggingInterceptor { message -> logger?.invoke(message) }
+                .apply { level = HttpLoggingInterceptor.Level.BODY }
+            )
+    }
+
+    init {
+        normalizeBaseUrl()
+    }
+
+    {{#hasAuthMethods}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}constructor(
+        baseUrl: String = defaultBasePath,
+        okHttpClientBuilder: OkHttpClient.Builder? = null,
+        {{^kotlinx_serialization}}serializerBuilder: {{#gson}}GsonBuilder{{/gson}}{{#moshi}}Moshi.Builder{{/moshi}}{{#jackson}}ObjectMapper{{/jackson}} = Serializer.{{#gson}}gsonBuilder{{/gson}}{{#moshi}}moshiBuilder{{/moshi}}{{#jackson}}jacksonObjectMapper{{/jackson}},{{/kotlinx_serialization}}
+        authNames: Array<String>
+    ) : this(baseUrl, okHttpClientBuilder{{^kotlinx_serialization}}, serializerBuilder{{/kotlinx_serialization}}) {
+        authNames.forEach { authName ->
+            val auth: Interceptor? = when (authName) { {{#authMethods}}
+                {{#isBasicBasic}}"{{name}}" -> HttpBasicAuth()
+                {{/isBasicBasic}}{{#isBasicBearer}}"{{name}}" -> HttpBearerAuth("{{scheme}}")
+                {{/isBasicBearer}}{{#isApiKey}}"{{name}}" -> ApiKeyAuth({{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{#isKeyInQuery}}"query"{{/isKeyInQuery}}{{#isKeyInCookie}}"cookie"{{/isKeyInCookie}}, "{{keyParamName}}")
+                {{/isApiKey}}{{#isOAuth}}"{{name}}" -> OAuth(OAuthFlow.{{flow}}, "{{authorizationUrl}}", "{{tokenUrl}}", "{{#scopes}}{{scope}}{{^-last}}, {{/-last}}{{/scopes}}")
+                {{/isOAuth}}{{^isBasicBasic}}{{^isBasicBearer}}{{^isApiKey}}{{^isOAuth}}"{{name}}" -> null{{/isOAuth}}{{/isApiKey}}{{/isBasicBearer}}{{/isBasicBasic}}{{/authMethods}}
+                else -> throw RuntimeException("auth name $authName not found in available auth names")
+            }
+            if (auth != null) {
+                addAuthorization(authName, auth)
+            }
+        }
+        {{#generateOneOfAnyOfWrappers}}
+        {{^kotlinx_serialization}}
+        {{#gson}}
+        {{#models}}
+        {{#model}}
+        {{^isEnum}}
+        {{^hasChildren}}
+        serializerBuilder.registerTypeAdapterFactory({{modelPackage}}.{{{classname}}}.CustomTypeAdapterFactory())
+        {{/hasChildren}}
+        {{/isEnum}}
+        {{/model}}
+        {{/models}}
+        {{/gson}}
+        {{/kotlinx_serialization}}
+        {{/generateOneOfAnyOfWrappers}}
+    }
+
+    {{#authMethods}}
+    {{#isBasic}}
+    {{#isBasicBasic}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}constructor(
+        baseUrl: String = defaultBasePath,
+        okHttpClientBuilder: OkHttpClient.Builder? = null,
+        {{^kotlinx_serialization}}serializerBuilder: {{#gson}}GsonBuilder{{/gson}}{{#moshi}}Moshi.Builder{{/moshi}}{{#jackson}}ObjectMapper{{/jackson}} = Serializer.{{#gson}}gsonBuilder{{/gson}}{{#moshi}}moshiBuilder{{/moshi}}{{#jackson}}jacksonObjectMapper{{/jackson}},{{/kotlinx_serialization}}
+        authName: String,
+        username: String,
+        password: String
+    ) : this(baseUrl, okHttpClientBuilder, {{^kotlinx_serialization}}serializerBuilder, {{/kotlinx_serialization}}arrayOf(authName)) {
+        setCredentials(username, password)
+    }
+
+    {{/isBasicBasic}}
+    {{#isBasicBearer}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}constructor(
+        baseUrl: String = defaultBasePath,
+        okHttpClientBuilder: OkHttpClient.Builder? = null,
+        {{^kotlinx_serialization}}serializerBuilder: {{#gson}}GsonBuilder{{/gson}}{{#moshi}}Moshi.Builder{{/moshi}}{{#jackson}}ObjectMapper{{/jackson}} = Serializer.{{#gson}}gsonBuilder{{/gson}}{{#moshi}}moshiBuilder{{/moshi}}{{#jackson}}jacksonObjectMapper{{/jackson}},{{/kotlinx_serialization}}
+        authName: String,
+        bearerToken: String
+    ) : this(baseUrl, okHttpClientBuilder, {{^kotlinx_serialization}}serializerBuilder, {{/kotlinx_serialization}}arrayOf(authName)) {
+        setBearerToken(bearerToken)
+    }
+
+    {{/isBasicBearer}}
+    {{/isBasic}}
+    {{/authMethods}}
+    {{#hasOAuthMethods}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}constructor(
+        baseUrl: String = defaultBasePath,
+        okHttpClientBuilder: OkHttpClient.Builder? = null,
+        {{^kotlinx_serialization}}serializerBuilder: {{#gson}}GsonBuilder{{/gson}}{{#moshi}}Moshi.Builder{{/moshi}}{{#jackson}}ObjectMapper{{/jackson}} = Serializer.{{#gson}}gsonBuilder{{/gson}}{{#moshi}}moshiBuilder{{/moshi}}{{#jackson}}jacksonObjectMapper{{/jackson}},{{/kotlinx_serialization}}
+        authName: String,
+        clientId: String,
+        secret: String,
+        username: String,
+        password: String
+    ) : this(baseUrl, okHttpClientBuilder, {{^kotlinx_serialization}}serializerBuilder, {{/kotlinx_serialization}}arrayOf(authName)) {
+        getTokenEndPoint()
+            ?.setClientId(clientId)
+            ?.setClientSecret(secret)
+            ?.setUsername(username)
+            ?.setPassword(password)
+    }
+
+    {{/hasOAuthMethods}}
+    {{#authMethods}}
+    {{#isBasic}}
+    {{#isBasicBasic}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun setCredentials(username: String, password: String): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, HttpBasicAuth> {
+            setCredentials(username, password)
+        }
+        {{#hasOAuthMethods}}
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            tokenRequestBuilder.setUsername(username).setPassword(password)
+        }
+        {{/hasOAuthMethods}}
+        return this
+    }
+
+    {{/isBasicBasic}}
+    {{^isBasicBasic}}
+    {{#hasOAuthMethods}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun setCredentials(username: String, password: String): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            tokenRequestBuilder.setUsername(username).setPassword(password)
+        }
+        return this
+    }
+    {{/hasOAuthMethods}}
+    {{/isBasicBasic}}
+    {{#isBasicBearer}}
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun setBearerToken(bearerToken: String): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, HttpBearerAuth> {
+            this.bearerToken = bearerToken
+        }
+        return this
+    }
+
+    {{/isBasicBearer}}
+    {{/isBasic}}
+    {{/authMethods}}
+    {{/hasAuthMethods}}
+    {{#hasOAuthMethods}}
+    /**
+     * Helper method to configure the token endpoint of the first oauth found in the apiAuthorizations (there should be only one)
+     * @return Token request builder
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun getTokenEndPoint(): TokenRequestBuilder? {
+        var result: TokenRequestBuilder? = null
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            result = tokenRequestBuilder
+        }
+        return result
+    }
+
+    /**
+     * Helper method to configure authorization endpoint of the first oauth found in the apiAuthorizations (there should be only one)
+     * @return Authentication request builder
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun getAuthorizationEndPoint(): AuthenticationRequestBuilder? {
+        var result: AuthenticationRequestBuilder? = null
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            result = authenticationRequestBuilder
+        }
+        return result
+    }
+
+    /**
+     * Helper method to pre-set the oauth access token of the first oauth found in the apiAuthorizations (there should be only one)
+     * @param accessToken Access token
+     * @return ApiClient
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun setAccessToken(accessToken: String): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            setAccessToken(accessToken)
+        }
+        return this
+    }
+
+    /**
+     * Helper method to configure the oauth accessCode/implicit flow parameters
+     * @param clientId Client ID
+     * @param clientSecret Client secret
+     * @param redirectURI Redirect URI
+     * @return ApiClient
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun configureAuthorizationFlow(clientId: String, clientSecret: String, redirectURI: String): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            tokenRequestBuilder
+                .setClientId(clientId)
+                .setClientSecret(clientSecret)
+                .setRedirectURI(redirectURI)
+            authenticationRequestBuilder
+                ?.setClientId(clientId)
+                ?.setRedirectURI(redirectURI)
+        }
+        return this
+    }
+
+    /**
+     * Configures a listener which is notified when a new access token is received.
+     * @param accessTokenListener Access token listener
+     * @return ApiClient
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun registerAccessTokenListener(accessTokenListener: AccessTokenListener): ApiClient {
+        apiAuthorizations.values.runOnFirst<Interceptor, OAuth> {
+            registerAccessTokenListener(accessTokenListener)
+        }
+        return this
+    }
+
+    {{/hasOAuthMethods}}
+    /**
+     * Adds an authorization to be used by the client
+     * @param authName Authentication name
+     * @param authorization Authorization interceptor
+     * @return ApiClient
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun addAuthorization(authName: String, authorization: Interceptor): ApiClient {
+        if (apiAuthorizations.containsKey(authName)) {
+            throw RuntimeException("auth name $authName already in api authorizations")
+        }
+        apiAuthorizations[authName] = authorization
+        clientBuilder.addInterceptor(authorization)
+        return this
+    }
+
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun setLogger(logger: (String) -> Unit): ApiClient {
+        this.logger = logger
+        return this
+    }
+
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun <S> createService(serviceClass: Class<S>): S {
+        val usedCallFactory = this.callFactory ?: clientBuilder.build()
+        return retrofitBuilder.callFactory(usedCallFactory).build().create(serviceClass)
+    }
+
+    {{#generateOneOfAnyOfWrappers}}
+    {{^kotlinx_serialization}}
+    {{#gson}}
+    /**
+     * Gets the serializer builder.
+     * @return serial builder
+     */
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun getSerializerBuilder(): GsonBuilder {
+        return serializerBuilder
+    }
+
+    {{/gson}}
+    {{/kotlinx_serialization}}
+    {{/generateOneOfAnyOfWrappers}}
+    private fun normalizeBaseUrl() {
+        if (!baseUrl.endsWith("/")) {
+            baseUrl += "/"
+        }
+    }
+
+    private inline fun <T, reified U> Iterable<T>.runOnFirst(callback: U.() -> Unit) {
+        for (element in this) {
+            if (element is U) {
+                callback.invoke(element)
+                break
+            }
+        }
+    }
+
+    {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}companion object {
+        @JvmStatic
+        protected val baseUrlKey: String = "{{packageName}}.baseUrl"
+
+        @JvmStatic
+        {{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}val defaultBasePath: String by lazy {
+            System.getProperties().getProperty(baseUrlKey, "{{{basePath}}}")
+        }
+    }
+}
+{{#generateOneOfAnyOfWrappers}}
+{{^kotlinx_serialization}}
+{{#gson}}
+
+/**
+ * Registers all models with the type adapter factory.
+ *
+ * @param gsonBuilder gson builder
+ * @return GSON builder
+ */
+{{^nonPublicApi}}{{#explicitApi}}public {{/explicitApi}}{{/nonPublicApi}}fun registerTypeAdapterFactoryForAllModels(gsonBuilder: GsonBuilder): GsonBuilder {
+    {{#models}}
+    {{#model}}
+    {{^isEnum}}
+    {{^hasChildren}}
+    gsonBuilder.registerTypeAdapterFactory({{modelPackage}}.{{{classname}}}.CustomTypeAdapterFactory())
+    {{/hasChildren}}
+    {{/isEnum}}
+    {{/model}}
+    {{/models}}
+    return gsonBuilder
+}
+{{/gson}}
+{{/kotlinx_serialization}}
+{{/generateOneOfAnyOfWrappers}}
diff --git a/core/module-retrofit/src/main/kotlin/com/dietfit/retrofit/EitherCall.kt b/core/module-retrofit/src/main/kotlin/com/dietfit/retrofit/EitherCall.kt
index 7c28fcd..4ed38f4 100644
--- a/core/module-retrofit/src/main/kotlin/com/dietfit/retrofit/EitherCall.kt
+++ b/core/module-retrofit/src/main/kotlin/com/dietfit/retrofit/EitherCall.kt
@@ -36,21 +36,31 @@ internal class EitherCall<R>(
     call.enqueue(
       object : Callback<R> {
         override fun onResponse(call: Call<R>, response: Response<R>) {
-          val either = if (!response.isSuccessful) {
-            val error = try {
-              response.errorBody().use { e ->
-                jackson.readValue(e?.string(), ErrorResponse::class.java)
+          val either = when {
+            !response.isSuccessful -> {
+              val error = try {
+                response.errorBody()?.use { e ->
+                  jackson.readValue(e.string(), ErrorResponse::class.java)
+                } ?: ErrorResponse("Unknown error", response.code())
+              } catch (e: Exception) {
+                ErrorResponse(e.message ?: "Parsing error", response.code())
               }
-            } catch (e: Exception) {
-              ErrorResponse(e.message, response.code())
+              Either.Left(error)
             }
-            Either.Left(error)
-          } else {
-            val body = response.body()
-            if (body == null) {
-              Either.Left(ErrorResponse("null", 404))
-            } else {
-              Either.Right(body)
+
+            response.code() == 204 -> {
+              // Explicitly handle 204 No Content as success
+              @Suppress("UNCHECKED_CAST")
+              Either.Right(Unit as R)
+            }
+
+            else -> {
+              val body = response.body()
+              if (body == null) {
+                Either.Left(ErrorResponse("Empty response", response.code()))
+              } else {
+                Either.Right(body)
+              }
             }
           }
           callback.onResponse(this@EitherCall, Response.success(either))
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index 834025d..62d4a03 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -43,6 +43,7 @@ mockk = "1.13.13"
 okhttp = "4.12.0"
 openapi = "5.2.0"
 openapiConfig = "1.5.3"
+openapiGenerator = "7.0.1"
 opentelemetry = "1.33.0"
 postgresql = "42.7.4"
 postgis = "2024.1.0"
@@ -68,6 +69,7 @@ ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
 ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlintPlugin" }
 shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
 sonarqube = { id = "org.sonarqube", version.ref = "sonar" }
+openapiGenerator = { id = "org.openapi.generator", version.ref = "openapiGenerator" }
 
 [libraries]
 spartan-codegen = { module = "com.c0x12c.exposed.codegen:module-codegen", version.ref = "codegen" }
-- 
2.45.2

